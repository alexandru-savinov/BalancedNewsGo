{
  "info": {
    "name": "Unified Backend Tests",
    "description": "Comprehensive test suite for the News Filter backend API, including article creation, feedback, rescoring, and debugging functionality. Manual scoring and LLM rescoring are fully separated, with independent endpoints and strict error handling to ensure no cross-compatibility. The test plan covers all valid and invalid flows for both manual and LLM-based rescoring.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Article Management Tests",
      "item": [
        {
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "name": "Create Article - Missing Fields",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Create Article - Invalid URL Format",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Create Article - Valid",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Create Article - Duplicate URL",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "name": "Get Articles - Default Parameters",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].CompositeScore).to.not.be.undefined;",
                      "        pm.expect(json.data[0].Confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Articles - With Source Filter",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/api/articles?source=test",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].Source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Articles - Cache Test",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/api/articles?source=test",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].Source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Ensemble Details",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/api/articles/{{articleId}}/ensemble",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles", "{{articleId}}", "ensemble"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "2. Feedback Handler Tests",
      "item": [
        {
          "name": "Submit Feedback - Missing Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/feedback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "feedback"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}}\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/feedback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "feedback"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid feedback category');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Submit Feedback - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/feedback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "feedback"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 for valid feedback\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "3. Article Rescoring Tests",
      "item": [
        {
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "name": "Create Article for Rescoring",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{rescoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{rescoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Article (Verify Score)",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/api/articles/{{rescoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles", "{{rescoreArticleId}}"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated correctly\", function () {",
                      "    pm.expect(json.data.article.CompositeScore).to.eql(0.5);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{rescoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{rescoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{rescoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{rescoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "name": "Rescore Non-existent Article",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/999999",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "999999"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{invalidScoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{invalidScoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{invalidScoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{invalidScoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{invalidScoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{invalidScoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{invalidScoreArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{invalidScoreArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "3.3 Score Progress Tests",
          "item": [
            {
              "name": "Create Article for SSE Testing",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/articles",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"SSE Test Article\",\n  \"content\": \"Test content for SSE progress monitoring.\",\n  \"url\": \"https://example.com/sse-test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"sseArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"sseArticleId\");",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Trigger Rescoring for SSE Monitoring",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/llm/reanalyze/{{sseArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "llm", "reanalyze", "{{sseArticleId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Rescoring initiated\", function () {",
                      "    pm.expect([200, 202]).to.include(pm.response.code);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Score Progress (Polling)",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/api/articles/{{sseArticleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "articles", "{{sseArticleId}}"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Score progress monitoring (polling)\", function () {",
                      "    const maxAttempts = 5;",
                      "    const interval = 1000;",
                      "    let attempts = 0;",
                      "",
                      "    function checkProgress() {",
                      "        if (attempts >= maxAttempts) {",
                      "            pm.expect.fail('Score progress monitoring timed out');",
                      "            return;",
                      "        }",
                      "        attempts++;",
                      "",
                      "        pm.sendRequest({",
                      "            url: pm.request.url.toString(),",
                      "            method: 'GET'",
                      "        }, function (err, res) {",
                      "            if (err) {",
                      "                pm.expect.fail(err);",
                      "                return;",
                      "            }",
                      "",
                      "            const json = res.json();",
                      "            if (json.data.article.Status === 'completed' || json.data.article.Status === 'error') {",
                      "                pm.expect(json.data.article.CompositeScore).to.not.be.undefined;",
                      "                return;",
                      "            }",
                      "",
                      "            setTimeout(checkProgress, interval);",
                      "        });",
                      "    }",
                      "",
                      "    checkProgress();",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}