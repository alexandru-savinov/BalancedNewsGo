{
  "collection": {
    "item": [
      {
        "id": "89f27704-0727-4424-8c2c-a60e89ea4cb3",
        "name": "1. Article Management Tests",
        "item": [
          {
            "id": "122ec24d-5874-43f0-8e30-462790d2843e",
            "name": "1.1 Article Creation Tests",
            "item": [
              {
                "id": "84aa2475-5429-486b-a564-660a1ee07d97",
                "name": "Create Article - Missing Fields",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400 for missing fields\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"Response contains error about missing fields\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.error.message).to.include('Missing required fields');",
                        "});"
                      ],
                      "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                    }
                  }
                ]
              },
              {
                "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
                "name": "Create Article - Invalid URL Format",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400 for invalid URL\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"Response contains error about invalid URL\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.error.message).to.include('Invalid URL format');",
                        "});"
                      ],
                      "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                    }
                  }
                ]
              },
              {
                "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
                "name": "Create Article - Valid",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "",
                        "if (pm.response.code === 200 || pm.response.code === 201) {",
                        "    var json = pm.response.json();",
                        "    pm.environment.set(\"articleId\", json.data.article_id);",
                        "}"
                      ],
                      "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                    }
                  }
                ]
              },
              {
                "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
                "name": "Create Article - Duplicate URL",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                        "    pm.response.to.have.status(409);",
                        "});",
                        "",
                        "pm.test(\"Response contains error about duplicate URL\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.error.message).to.include('already exists');",
                        "});"
                      ],
                      "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "db337994-5407-4c7e-bc76-43358a538d37",
            "name": "1.2 Article Retrieval Tests",
            "item": [
              {
                "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
                "name": "Get Articles - Default Parameters",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains articles\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "    pm.expect(json.data).to.be.an('array');",
                        "});",
                        "",
                        "pm.test(\"Articles have composite_score and confidence\", function () {",
                        "    var json = pm.response.json();",
                        "    if (json.data && json.data.length > 0) {",
                        "        console.log('First article:', JSON.stringify(json.data[0]));",
                        "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                        "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                        "    }",
                        "});"
                      ],
                      "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                    }
                  }
                ]
              },
              {
                "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
                "name": "Get Articles - With Source Filter",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "source",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains articles with correct source\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "    pm.expect(json.data).to.be.an('array');",
                        "    if (json.data && json.data.length > 0) {",
                        "        pm.expect(json.data[0].source).to.equal('test');",
                        "    }",
                        "});"
                      ],
                      "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                    }
                  }
                ]
              },
              {
                "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
                "name": "Get Articles - Cache Test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "source",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains articles with correct source\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "    pm.expect(json.data).to.be.an('array');",
                        "    if (json.data && json.data.length > 0) {",
                        "        pm.expect(json.data[0].source).to.equal('test');",
                        "    }",
                        "});"
                      ],
                      "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                    }
                  }
                ]
              },
              {
                "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
                "name": "Get Ensemble Details",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{articleId}}",
                      "ensemble"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 404\", function () {",
                        "    pm.expect([200, 404]).to.include(pm.response.code);",
                        "});",
                        "",
                        "if (pm.response.code === 200) {",
                        "    pm.test(\"Response contains ensemble data\", function () {",
                        "        var json = pm.response.json();",
                        "        pm.expect(json.success).to.be.true;",
                        "        pm.expect(json.data).to.have.property('ensembles');",
                        "        pm.expect(json.data.ensembles).to.be.an('array');",
                        "    });",
                        "}"
                      ],
                      "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "1903cf3b-2c9d-41fe-90b6-cf0e7fe4375e",
        "name": "2. Feedback Handler Tests",
        "item": [
          {
            "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
            "name": "Submit Feedback - Missing Fields",
            "request": {
              "url": {
                "path": [
                  "api",
                  "feedback"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"article_id\": {{articleId}}\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for missing fields\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Response contains error about missing fields\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Missing required fields');",
                    "});"
                  ],
                  "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
                }
              }
            ]
          },
          {
            "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
            "name": "Submit Feedback - Invalid Category",
            "request": {
              "url": {
                "path": [
                  "api",
                  "feedback"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for invalid category\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Response contains error about invalid category\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Invalid category');",
                    "});"
                  ],
                  "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
                }
              }
            ]
          },
          {
            "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
            "name": "Submit Feedback - Valid",
            "request": {
              "url": {
                "path": [
                  "api",
                  "feedback"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 for valid feedback\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1f378911-c8a1-4828-961f-420b475cf489",
        "name": "3. Article Rescoring Tests",
        "item": [
          {
            "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
            "name": "3.1 Valid Rescoring Tests",
            "item": [
              {
                "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
                "name": "Create Article for Rescoring",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "if (pm.response.code === 200 || pm.response.code === 201) {",
                        "    var json = pm.response.json();",
                        "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                        "} else {",
                        "    pm.environment.unset(\"rescoreArticleId\");",
                        "}"
                      ],
                      "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                    }
                  }
                ]
              },
              {
                "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
                "name": "Rescore Article (Valid Score 0.5)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 0.5\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                    }
                  }
                ]
              },
              {
                "id": "a23760fd-18af-488a-a456-51d24265821d",
                "name": "Get Article (Verify Score)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "var json = pm.response.json();",
                        "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                        "pm.test(\"Score updated to 0.5\", function () {",
                        "    // The API might return the score in different locations based on the response structure",
                        "    // Try different paths where the score might be found",
                        "    var score = null;",
                        "    if (json.data && json.data.composite_score !== undefined) {",
                        "        score = json.data.composite_score;",
                        "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                        "        score = json.data.article.CompositeScore;",
                        "    } else if (json.composite_score !== undefined) {",
                        "        score = json.composite_score;",
                        "    } else if (json.score !== undefined) {",
                        "        score = json.score;",
                        "    }",
                        "    pm.expect(score).to.eql(0.5);",
                        "});"
                      ],
                      "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                    }
                  }
                ]
              },
              {
                "id": "8e2d999e-f544-430a-9173-140bee1f905e",
                "name": "Rescore Article (Upper Boundary 1.0)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 1.0\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                    }
                  }
                ]
              },
              {
                "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
                "name": "Rescore Article (Lower Boundary -1.0)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": -1.0\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
            "name": "3.2 Invalid Rescoring Tests",
            "item": [
              {
                "id": "98eaba03-0063-459a-8daa-971942856259",
                "name": "Rescore Non-existent Article",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "999999"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 0.5\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});"
                      ],
                      "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                    }
                  }
                ]
              },
              {
                "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
                "name": "Create Article for Invalid Score Tests",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "if (pm.response.code === 200 || pm.response.code === 201) {",
                        "    var json = pm.response.json();",
                        "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                        "} else {",
                        "    pm.environment.unset(\"invalidScoreArticleId\");",
                        "}"
                      ],
                      "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                    }
                  }
                ]
              },
              {
                "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
                "name": "Rescore Article (Below Range -2.0)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": -2.0\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});"
                      ],
                      "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                    }
                  }
                ]
              },
              {
                "id": "5eb9295b-a254-475a-816c-8257724653aa",
                "name": "Rescore Article (Above Range 1.1)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 1.1\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});"
                      ],
                      "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                    }
                  }
                ]
              },
              {
                "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
                "name": "Rescore Article (Non-Numeric Score)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": \"not-a-number\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});"
                      ],
                      "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                    }
                  }
                ]
              },
              {
                "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
                "name": "Rescore Article (Empty JSON)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 400\", function () {",
                        "    pm.expect([200, 400]).to.include(pm.response.code);",
                        "});"
                      ],
                      "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "56e4cbb6-3bfa-4984-bf05-dc4fda89943c",
            "name": "3.3 Score Progress Tests",
            "item": [
              {
                "id": "911e662b-cdb1-4da7-ac37-25de4dfedb89",
                "name": "Get Score Progress",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "score-progress",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c7e3a91-9830-44fb-99e3-0e6823bb29ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 404\", function () {",
                        "    pm.expect([200, 404]).to.include(pm.response.code);",
                        "});"
                      ],
                      "_lastExecutionId": "dc6022b9-bc50-4ec9-b4a1-ca3ae2c9527e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "12293365-8c83-41cf-b2b5-d5992b3e7f5a",
        "name": "4. Debug Tests",
        "item": [
          {
            "id": "15851efe-2cf8-4f36-89b9-a4bb8ecb7367",
            "name": "4.1 Debug Feedback Handler",
            "item": [
              {
                "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
                "name": "Get Database Schema",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "debug",
                      "schema"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains schema information\", function () {",
                        "    var json = pm.response.json();",
                        "    console.log(JSON.stringify(json, null, 2));",
                        "});"
                      ],
                      "_lastExecutionId": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
                    }
                  }
                ]
              },
              {
                "id": "7c8ae39e-cbd6-45b5-8872-45aec209aed8",
                "name": "Submit Feedback - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "feedback"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "X-Debug",
                      "value": "true"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4081d12-9480-446a-bc6c-663c60513e8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "4db1369b-ad8b-46d5-9c0a-d4e484ffd885"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "f05dc995-a2a7-4adb-8ba2-cb32e6efdab0",
            "name": "4.2 Debug Article Creation",
            "item": [
              {
                "id": "d51c2711-3753-4458-8f5a-61b5ce881d78",
                "name": "Create Article - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "X-Debug",
                      "value": "true"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9b6a9ce-dd10-427d-8392-8f911835c674",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "    if (json.data && json.data.article_id) {",
                        "        pm.environment.set(\"debugArticleId\", json.data.article_id);",
                        "        console.log('Set debugArticleId to:', json.data.article_id);",
                        "    }",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "b1a6f8dc-25a6-4828-8409-5b24386d81a4"
                    }
                  }
                ]
              },
              {
                "id": "9ac575d2-7e69-4f7b-aed5-14f9478aae6b",
                "name": "Get Article - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{debugArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bef22975-faed-4b49-a1cb-8b8355ae4f5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "91bd2741-c73f-4a06-9978-e6d422019fcb"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "8d9dc5df-fb2f-4f11-aeda-aa4b74b5ceeb",
            "name": "4.3 Debug Get Articles",
            "item": [
              {
                "id": "f8d75f31-46f8-499d-ace6-2f1517e2dba4",
                "name": "Get Articles - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "debug",
                        "value": "true"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a809e6b-6fd3-4791-ad93-230bfae9842e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response headers:', pm.response.headers.all());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Response structure:', Object.keys(json));",
                        "    if (json.data && Array.isArray(json.data)) {",
                        "        console.log('Number of articles:', json.data.length);",
                        "        if (json.data.length > 0) {",
                        "            console.log('First article structure:', Object.keys(json.data[0]));",
                        "            console.log('First article sample:', {",
                        "                id: json.data[0].id,",
                        "                title: json.data[0].title,",
                        "                source: json.data[0].source,",
                        "                composite_score: json.data[0].composite_score,",
                        "                confidence: json.data[0].confidence",
                        "            });",
                        "        }",
                        "    }",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                        "}"
                      ],
                      "_lastExecutionId": "74a74af0-2250-4c85-9a52-9c6dab1eb5ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "fafe227b-f6d6-4ad3-a8b4-4abf8a5844e5",
            "name": "4.4 Debug Ensemble Details",
            "item": [
              {
                "id": "1ada200a-599a-4a43-9300-cb1c2272d8f0",
                "name": "Get Ensemble Details - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{debugArticleId}}",
                      "ensemble"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "debug",
                        "value": "true"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ba08326-0f41-446a-9181-18da51b9193d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "90012ddd-83eb-482c-9bbd-f90734890a97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "859bcf29-b964-499b-962f-47dea133685c",
      "name": "Unified Backend Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive test suite for the News Filter backend API, including article creation, feedback, rescoring, and debugging functionality",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "local-env",
    "name": "Local Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "",
        "key": "articleId"
      }
    ]
  },
  "globals": {
    "id": "d18b7408-57a2-45bb-b51b-4d0f2d47a6af",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 29,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 29,
        "pending": 0,
        "failed": 2
      },
      "prerequests": {
        "total": 29,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 29,
        "pending": 0,
        "failed": 29
      },
      "tests": {
        "total": 29,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 39,
        "pending": 0,
        "failed": 34
      },
      "testScripts": {
        "total": 29,
        "pending": 0,
        "failed": 2
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1744640905299,
      "completed": 1744640907860
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 29,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "578fb41e-658b-414c-99ab-2a10c07d7e17",
          "httpRequestId": "eb9e2e1f-31be-47a5-aeef-c87bd42ba019"
        },
        "item": {
          "id": "84aa2475-5429-486b-a564-660a1ee07d97",
          "name": "Create Article - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02009d10-fde9-4b67-9ee2-913bc4a18d53",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
          }
        },
        "id": "84aa2475-5429-486b-a564-660a1ee07d97",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for missing fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for missing fields",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response contains error about missing fields",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains error about missing fields",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "24f26f12-09a5-4e05-88b4-2f73cbb08983",
          "length": 29,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb6ded69-2118-45e9-8916-5e3f38492779"
        },
        "item": {
          "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
          "name": "Create Article - Invalid URL Format",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid URL\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid URL format');",
                  "});"
                ],
                "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2e2bb364-e9bb-436c-841c-7fb784493d54",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"2025-04-14T14:28:25.486Z\"\n}"
          }
        },
        "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for invalid URL",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for invalid URL",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response contains error about invalid URL",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains error about invalid URL",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad2af4ce-a9e9-4d0f-ba50-a132d4cc4efe",
          "length": 29,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71e38033-db97-42ad-b602-815ed88184df"
        },
        "item": {
          "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
          "name": "Create Article - Valid",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"articleId\", json.data.article_id);",
                  "}"
                ],
                "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b2e26a4-d1fe-4a34-b183-79d81b39a085",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-1744640906\",\n  \"pub_date\": \"2025-04-14T14:28:25.581Z\"\n}"
          }
        },
        "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 201",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "348d6d0e-67ac-46c8-9298-eeaa69cbedc9",
          "length": 29,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dd3fb1c3-3f1b-4f76-b552-674ce6a22583"
        },
        "item": {
          "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
          "name": "Create Article - Duplicate URL",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about duplicate URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b07cfeb0-f5c0-4787-80a8-fb3c2020c927",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-1744640906\",\n  \"pub_date\": \"2025-04-14T14:28:25.670Z\"\n}"
          }
        },
        "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 409 for duplicate URL",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 409 for duplicate URL",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response contains error about duplicate URL",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains error about duplicate URL",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "38da55f8-12a4-4af4-97bd-023b9adee6b0",
          "length": 29,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ffcd2f9-5eef-4bce-8fd4-0bfebdaabc4c"
        },
        "item": {
          "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cf1c5f70-d630-4493-b16b-6b99c3d1c192",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response contains articles",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains articles",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Articles have composite_score and confidence",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Articles have composite_score and confidence",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bb43bd62-5cfe-4ed8-8f45-05877ba87df5",
          "length": 29,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd746771-37e1-4c2d-9804-08e473bba302"
        },
        "item": {
          "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
          "name": "Get Articles - With Source Filter",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "source",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ced2dbbc-9290-4add-91b4-8770a043eccf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response contains articles with correct source",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains articles with correct source",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a0c202d-ff25-41d6-818d-943b5f7da859",
          "length": 29,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c5a4204c-2568-40e6-a384-fd065ba25893"
        },
        "item": {
          "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
          "name": "Get Articles - Cache Test",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "source",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7f444103-1d36-4f58-a2d7-0ff59a8a3154",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response contains articles with correct source",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains articles with correct source",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "509ad818-71f1-42f6-9364-135b361ec389",
          "length": 29,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e863615f-5af6-47a3-8baf-9ed223b44243"
        },
        "item": {
          "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
          "name": "Get Ensemble Details",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}",
                "ensemble"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains ensemble data\", function () {",
                  "        var json = pm.response.json();",
                  "        pm.expect(json.success).to.be.true;",
                  "        pm.expect(json.data).to.have.property('ensembles');",
                  "        pm.expect(json.data.ensembles).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "",
              "ensemble"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c54b9345-ed16-4914-83f9-a548080373f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 404",
              "message": "expected [ 200, 404 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 404 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f5409a6a-7a7a-49a2-b96c-35accd91f13d",
          "length": 29,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c7eec28-de0e-4681-92c6-f581311cd41e"
        },
        "item": {
          "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
          "name": "Submit Feedback - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c775a710-b834-4cca-9a8b-2fe125d4dad6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": \n}"
          }
        },
        "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for missing fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for missing fields",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response contains error about missing fields",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains error about missing fields",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9d84bc65-cd19-4bca-8cf2-be4cdc3d9ea1",
          "length": 29,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee63fd1c-adb7-448c-9b9e-6c593985e6db"
        },
        "item": {
          "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid category');",
                  "});"
                ],
                "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5c50b1f6-02f2-422e-8c14-12f617b2f3d4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": ,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
          }
        },
        "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for invalid category",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for invalid category",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response contains error about invalid category",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains error about invalid category",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2eec3755-8860-4e25-9579-72cf6b3e6169",
          "length": 29,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "acb50204-c1b7-4c0e-8722-29107013590a"
        },
        "item": {
          "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
          "name": "Submit Feedback - Valid",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid feedback\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "92a5e33f-9025-4b8e-9fd1-d05721c62514",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": ,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 for valid feedback",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 for valid feedback",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "10ae967d-3d63-4af7-8af6-2b4ab27f87b0",
          "length": 29,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c5ec6d52-38d4-4ccd-9cd4-0980f0b1b9ae"
        },
        "item": {
          "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
          "name": "Create Article for Rescoring",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"rescoreArticleId\");",
                  "}"
                ],
                "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "afa2a6e4-d349-487b-a1c0-ece72d85c915",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-1744640906\",\n  \"pub_date\": \"2025-04-14T14:28:26.383Z\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 201",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e21d1ed3-3851-462b-afed-1b1e3b3aadae",
          "length": 29,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d1cdb964-7557-4641-8ced-e752883e4dfa"
        },
        "item": {
          "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
          "name": "Rescore Article (Valid Score 0.5)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BrescoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6884f4b1-c176-4136-aa92-7703a55ce6c8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4eb3634c-fc94-4c73-8956-9140814674db",
          "length": 29,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aba6ac34-c7d2-4c87-a225-79f002d019e3"
        },
        "item": {
          "id": "a23760fd-18af-488a-a456-51d24265821d",
          "name": "Get Article (Verify Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                  "pm.test(\"Score updated to 0.5\", function () {",
                  "    // The API might return the score in different locations based on the response structure",
                  "    // Try different paths where the score might be found",
                  "    var score = null;",
                  "    if (json.data && json.data.composite_score !== undefined) {",
                  "        score = json.data.composite_score;",
                  "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                  "        score = json.data.article.CompositeScore;",
                  "    } else if (json.composite_score !== undefined) {",
                  "        score = json.composite_score;",
                  "    } else if (json.score !== undefined) {",
                  "        score = json.score;",
                  "    }",
                  "    pm.expect(score).to.eql(0.5);",
                  "});"
                ],
                "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BrescoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "17e00efc-a00d-404c-8d5e-a2976f495406",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "a23760fd-18af-488a-a456-51d24265821d",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "d0f359ff-13c8-46f2-8143-788651222391",
              "timestamp": 1744640906595,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "58261946-8af4-45d5-907e-df239dbcdf42",
          "length": 29,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "87dc5e8b-eb30-4691-86cb-2e5ca13c6ddb"
        },
        "item": {
          "id": "8e2d999e-f544-430a-9173-140bee1f905e",
          "name": "Rescore Article (Upper Boundary 1.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BrescoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05c76f1c-1d4e-447a-b1ee-8187941a6b88",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 1.0\n}"
          }
        },
        "id": "8e2d999e-f544-430a-9173-140bee1f905e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1c26d38-2684-4a55-bcf8-6950c5dc35d2",
          "length": 29,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5472a7fa-b8fe-4a60-bb4f-ee293f0b2ecf"
        },
        "item": {
          "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
          "name": "Rescore Article (Lower Boundary -1.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BrescoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "49f243ab-977e-491c-9d90-faf8b966fe21",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": -1.0\n}"
          }
        },
        "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ce5b238a-f654-4546-965c-d918f74f598e",
          "length": 29,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bdd1772f-23bb-41f5-827d-8a18141c2b0d"
        },
        "item": {
          "id": "98eaba03-0063-459a-8daa-971942856259",
          "name": "Rescore Non-existent Article",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "999999"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "999999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4e41207b-c764-4b72-8e07-1758045f3797",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "id": "98eaba03-0063-459a-8daa-971942856259",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bbe5932c-bd9c-47c8-b38a-ff3bc86b5cd9",
          "length": 29,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d9755645-9b06-4ccc-ba23-f85ba8394de7"
        },
        "item": {
          "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
          "name": "Create Article for Invalid Score Tests",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"invalidScoreArticleId\");",
                  "}"
                ],
                "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5c511810-34cb-4395-8893-508630aa8ec9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-1744640907\",\n  \"pub_date\": \"2025-04-14T14:28:26.898Z\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 201",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "369e7e59-a9b0-4893-9b1e-e68ff10f77af",
          "length": 29,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0914d202-6bf5-4ba7-bcb0-e7e56d5adced"
        },
        "item": {
          "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
          "name": "Rescore Article (Below Range -2.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BinvalidScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c7e6d778-40ba-4d11-8a4d-c6b211f9534f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": -2.0\n}"
          }
        },
        "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "04396392-f0a9-4a23-8a8c-4862952e41b8",
          "length": 29,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b365b99e-6352-44d8-91ea-9734ddc1f8eb"
        },
        "item": {
          "id": "5eb9295b-a254-475a-816c-8257724653aa",
          "name": "Rescore Article (Above Range 1.1)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BinvalidScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3253cbee-398c-46f0-b9e4-d1de79a91623",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 1.1\n}"
          }
        },
        "id": "5eb9295b-a254-475a-816c-8257724653aa",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "88de72c9-d2b9-4941-b4fa-aec9dfe3ac00",
          "length": 29,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "38781df4-aa78-4918-86f5-4933d521ae01"
        },
        "item": {
          "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
          "name": "Rescore Article (Non-Numeric Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"not-a-number\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BinvalidScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d048e1af-e466-4230-bb24-2cffe030ced6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": \"not-a-number\"\n}"
          }
        },
        "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c5afe051-33f7-49f7-af34-7c5b1aaaf65d",
          "length": 29,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0df337de-6d94-4e2c-9ec3-5a180f06f134"
        },
        "item": {
          "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
          "name": "Rescore Article (Empty JSON)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});"
                ],
                "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BinvalidScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "41879b27-dc96-4460-9cad-a0cca2ad5b8d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{}"
          }
        },
        "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 400",
              "message": "expected [ 200, 400 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 400 ] to include undefined\n   at Object.eval sandbox-script.js:1:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3a44a0fe-fa19-4b25-9971-c9cad7e2fef6",
          "length": 29,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bc5b284c-6a8f-429e-881b-75a26bf32f8a"
        },
        "item": {
          "id": "911e662b-cdb1-4da7-ac37-25de4dfedb89",
          "name": "Get Score Progress",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "score-progress",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c7e3a91-9830-44fb-99e3-0e6823bb29ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});"
                ],
                "_lastExecutionId": "dc6022b9-bc50-4ec9-b4a1-ca3ae2c9527e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "score-progress",
              "%7B%7BrescoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f33b959c-a988-43e4-9c2f-548689644340",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "911e662b-cdb1-4da7-ac37-25de4dfedb89",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 404",
              "message": "expected [ 200, 404 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 404 ] to include undefined\n   at Object.eval sandbox-script.js:1:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "681f079a-cb14-44f1-833b-1170f17c504c",
          "length": 29,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89f592ea-c1ac-4b63-b599-8d42bfca31f6"
        },
        "item": {
          "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ],
                "_lastExecutionId": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "debug",
              "schema"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc2b280b-76e6-4936-bd1f-2a61d4a9a8a9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Response contains schema information",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains schema information",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cb96f283-1d77-4bd2-8e3f-d3ebd793db41",
          "length": 29,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "229b1e13-0d2c-44f6-bc53-5b4df924316e"
        },
        "item": {
          "id": "7c8ae39e-cbd6-45b5-8872-45aec209aed8",
          "name": "Submit Feedback - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4081d12-9480-446a-bc6c-663c60513e8c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "4db1369b-ad8b-46d5-9c0a-d4e484ffd885"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Debug",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d93a429-0b37-498c-8790-93beb9f16bd4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": ,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "7c8ae39e-cbd6-45b5-8872-45aec209aed8",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "de0056a8-9de8-48d8-b27b-fe4ca822544d",
          "length": 29,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "836a53de-0eca-4918-8f1d-91c8489eee40"
        },
        "item": {
          "id": "d51c2711-3753-4458-8f5a-61b5ce881d78",
          "name": "Create Article - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9b6a9ce-dd10-427d-8392-8f911835c674",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "    if (json.data && json.data.article_id) {",
                  "        pm.environment.set(\"debugArticleId\", json.data.article_id);",
                  "        console.log('Set debugArticleId to:', json.data.article_id);",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "b1a6f8dc-25a6-4828-8409-5b24386d81a4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Debug",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "baa56bf5-ba14-4904-9451-1e2754ade827",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-1744640908\",\n  \"pub_date\": \"2025-04-14T14:28:27.548Z\"\n}"
          }
        },
        "id": "d51c2711-3753-4458-8f5a-61b5ce881d78",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "61b2280b-6921-47a9-9b6f-ab7b6e6e8fa1",
          "length": 29,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "742a167e-ac99-4b60-a3fa-c33b2da0a3de"
        },
        "item": {
          "id": "9ac575d2-7e69-4f7b-aed5-14f9478aae6b",
          "name": "Get Article - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{debugArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bef22975-faed-4b49-a1cb-8b8355ae4f5e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "91bd2741-c73f-4a06-9978-e6d422019fcb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BdebugArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48decc97-4b2a-470e-a9ba-6b50877e06f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "9ac575d2-7e69-4f7b-aed5-14f9478aae6b",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e38f7dc5-f10d-45ee-8b23-ee88a718d94f",
          "length": 29,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1fa38caa-d6bb-4a87-8201-7af8277a9e40"
        },
        "item": {
          "id": "f8d75f31-46f8-499d-ace6-2f1517e2dba4",
          "name": "Get Articles - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9a809e6b-6fd3-4791-ad93-230bfae9842e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response headers:', pm.response.headers.all());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Response structure:', Object.keys(json));",
                  "    if (json.data && Array.isArray(json.data)) {",
                  "        console.log('Number of articles:', json.data.length);",
                  "        if (json.data.length > 0) {",
                  "            console.log('First article structure:', Object.keys(json.data[0]));",
                  "            console.log('First article sample:', {",
                  "                id: json.data[0].id,",
                  "                title: json.data[0].title,",
                  "                source: json.data[0].source,",
                  "                composite_score: json.data[0].composite_score,",
                  "                confidence: json.data[0].confidence",
                  "            });",
                  "        }",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                  "}"
                ],
                "_lastExecutionId": "74a74af0-2250-4c85-9a52-9c6dab1eb5ce"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "debug",
                "value": "true"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ccf177e2-ee5b-467b-9683-4d534adf066f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "f8d75f31-46f8-499d-ace6-2f1517e2dba4",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'substring')",
              "checksum": "74fa7b1eff5b29603aab90349019b036",
              "id": "e804c067-a077-4cad-88c8-ee0952232ce7",
              "timestamp": 1744640907758,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "94cc41bc-e4ea-42fc-91ec-708df7e9e248",
          "length": 29,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b992e1e0-2a55-4ee9-aa56-434a0d5cf7d9"
        },
        "item": {
          "id": "1ada200a-599a-4a43-9300-cb1c2272d8f0",
          "name": "Get Ensemble Details - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{debugArticleId}}",
                "ensemble"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ba08326-0f41-446a-9181-18da51b9193d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "90012ddd-83eb-482c-9bbd-f90734890a97"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BdebugArticleId%7D%7D",
              "ensemble"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "debug",
                "value": "true"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2dc34a98-f58f-48e1-91ec-8e69f8493d34",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "1ada200a-599a-4a43-9300-cb1c2272d8f0",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "f38ba2e1-0855-45b0-aeec-cfafeabf60a8",
          "timestamp": 1744640905389,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "84aa2475-5429-486b-a564-660a1ee07d97",
          "name": "Create Article - Missing Fields",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "02009d10-fde9-4b67-9ee2-913bc4a18d53",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 29,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "578fb41e-658b-414c-99ab-2a10c07d7e17",
          "httpRequestId": "eb9e2e1f-31be-47a5-aeef-c87bd42ba019"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for missing fields",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "2c626e75deab984969b0bdaac7847390",
          "id": "6e6d7a52-1cd2-4840-8924-e9829fcae6e8",
          "timestamp": 1744640905424,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "84aa2475-5429-486b-a564-660a1ee07d97",
          "name": "Create Article - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 29,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "578fb41e-658b-414c-99ab-2a10c07d7e17",
          "httpRequestId": "eb9e2e1f-31be-47a5-aeef-c87bd42ba019",
          "scriptId": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
          "execution": "224d46a5-3e4d-42fc-a776-07f97ff88472"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains error about missing fields",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "db499ae1dd890981e5cb1bb45cd70533",
          "id": "dc51a288-afe8-4a5c-b312-530f890dad23",
          "timestamp": 1744640905427,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "84aa2475-5429-486b-a564-660a1ee07d97",
          "name": "Create Article - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 29,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "578fb41e-658b-414c-99ab-2a10c07d7e17",
          "httpRequestId": "eb9e2e1f-31be-47a5-aeef-c87bd42ba019",
          "scriptId": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
          "execution": "224d46a5-3e4d-42fc-a776-07f97ff88472"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "d8e26d46-87c5-47b8-be66-4c6c453d70f0",
          "timestamp": 1744640905509,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
          "name": "Create Article - Invalid URL Format",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2e2bb364-e9bb-436c-841c-7fb784493d54",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"2025-04-14T14:28:25.486Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid URL\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid URL format');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "24f26f12-09a5-4e05-88b4-2f73cbb08983",
          "length": 29,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb6ded69-2118-45e9-8916-5e3f38492779"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for invalid URL",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "0fef733535a0254aab839a04cfb0dd0f",
          "id": "1ed8355a-e176-4706-bd47-41d6f5f4317d",
          "timestamp": 1744640905519,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
          "name": "Create Article - Invalid URL Format",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid URL\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid URL format');",
                  "});"
                ],
                "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "24f26f12-09a5-4e05-88b4-2f73cbb08983",
          "length": 29,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb6ded69-2118-45e9-8916-5e3f38492779",
          "scriptId": "020307e7-ae31-41e9-a469-24e382a8e515",
          "execution": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains error about invalid URL",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "7cfea2fd9d51e0eedf0b35d960cdb54c",
          "id": "ab5d5d5c-69b5-4983-a734-cb01b63e1621",
          "timestamp": 1744640905520,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
          "name": "Create Article - Invalid URL Format",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid URL\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid URL format');",
                  "});"
                ],
                "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "24f26f12-09a5-4e05-88b4-2f73cbb08983",
          "length": 29,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb6ded69-2118-45e9-8916-5e3f38492779",
          "scriptId": "020307e7-ae31-41e9-a469-24e382a8e515",
          "execution": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "9b34cc12-d6c8-418c-83d0-344ccc5cacbc",
          "timestamp": 1744640905603,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
          "name": "Create Article - Valid",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8b2e26a4-d1fe-4a34-b183-79d81b39a085",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-1744640906\",\n  \"pub_date\": \"2025-04-14T14:28:25.581Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"articleId\", json.data.article_id);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ad2af4ce-a9e9-4d0f-ba50-a132d4cc4efe",
          "length": 29,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71e38033-db97-42ad-b602-815ed88184df"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 201",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "9e108a5981287aebaa42ab65a3c5e524",
          "id": "ec09ea37-1c15-4d09-8267-8ebf239f055e",
          "timestamp": 1744640905621,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
          "name": "Create Article - Valid",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"articleId\", json.data.article_id);",
                  "}"
                ],
                "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ad2af4ce-a9e9-4d0f-ba50-a132d4cc4efe",
          "length": 29,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71e38033-db97-42ad-b602-815ed88184df",
          "scriptId": "490442bb-3b66-4eac-980a-c9ff769781c6",
          "execution": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "c016c6d1-1383-4f4e-bc15-bdc5e56f6556",
          "timestamp": 1744640905691,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
          "name": "Create Article - Duplicate URL",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b07cfeb0-f5c0-4787-80a8-fb3c2020c927",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-1744640906\",\n  \"pub_date\": \"2025-04-14T14:28:25.670Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about duplicate URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "348d6d0e-67ac-46c8-9298-eeaa69cbedc9",
          "length": 29,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dd3fb1c3-3f1b-4f76-b552-674ce6a22583"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 409 for duplicate URL",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "eb7350ee2349ae356835024903089c38",
          "id": "e72220ee-2e96-4caf-8c33-85a9ceb2b5ef",
          "timestamp": 1744640905708,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
          "name": "Create Article - Duplicate URL",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about duplicate URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "348d6d0e-67ac-46c8-9298-eeaa69cbedc9",
          "length": 29,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dd3fb1c3-3f1b-4f76-b552-674ce6a22583",
          "scriptId": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
          "execution": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains error about duplicate URL",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "64b4f24c8391721a9dee72332ad5f015",
          "id": "ee9d2826-6abe-49ef-a8d8-886d4d00e402",
          "timestamp": 1744640905709,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
          "name": "Create Article - Duplicate URL",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about duplicate URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
              }
            }
          ]
        },
        "parent": {
          "id": "122ec24d-5874-43f0-8e30-462790d2843e",
          "name": "1.1 Article Creation Tests",
          "item": [
            {
              "id": "84aa2475-5429-486b-a564-660a1ee07d97",
              "name": "Create Article - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02aa5ec9-228d-42ba-bfe5-75d67e717766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "224d46a5-3e4d-42fc-a776-07f97ff88472"
                  }
                }
              ]
            },
            {
              "id": "fcb1afbf-682d-454f-a8db-08683abd8d71",
              "name": "Create Article - Invalid URL Format",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "020307e7-ae31-41e9-a469-24e382a8e515",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid URL\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid URL format');",
                      "});"
                    ],
                    "_lastExecutionId": "2bc4a0fe-59de-4f0f-a381-4c9171c13b6c"
                  }
                }
              ]
            },
            {
              "id": "b785b803-bd1a-4edc-82c1-a41aece7a08b",
              "name": "Create Article - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "490442bb-3b66-4eac-980a-c9ff769781c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"articleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "bbcc1d3d-3e82-424c-a26e-466880b1c40a"
                  }
                }
              ]
            },
            {
              "id": "f44097d3-85c4-4a8a-acf8-1e2e1c9c2081",
              "name": "Create Article - Duplicate URL",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about duplicate URL\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "348d6d0e-67ac-46c8-9298-eeaa69cbedc9",
          "length": 29,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dd3fb1c3-3f1b-4f76-b552-674ce6a22583",
          "scriptId": "d7a76f2f-daf4-4f48-bf0f-71c718653b7b",
          "execution": "c4a4dc3c-3898-4088-8adc-0341bbc9bf75"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "08439ec9-0278-434f-bfa7-b2eaec75cc65",
          "timestamp": 1744640905772,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "cf1c5f70-d630-4493-b16b-6b99c3d1c192",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "38da55f8-12a4-4af4-97bd-023b9adee6b0",
          "length": 29,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ffcd2f9-5eef-4bce-8fd4-0bfebdaabc4c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "069f20f87cf5d2c50296503d3aba1045",
          "id": "8e6034d9-f312-4907-8d81-6b4afef0c339",
          "timestamp": 1744640905790,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "38da55f8-12a4-4af4-97bd-023b9adee6b0",
          "length": 29,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ffcd2f9-5eef-4bce-8fd4-0bfebdaabc4c",
          "scriptId": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
          "execution": "0ce40a7a-80b9-475c-96c4-c3070f308271"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains articles",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "c08b78050bd1b706e4151bbe7e7cdb40",
          "id": "38bac100-3441-45b2-96dd-0ffdcd8adbff",
          "timestamp": 1744640905791,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "38da55f8-12a4-4af4-97bd-023b9adee6b0",
          "length": 29,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ffcd2f9-5eef-4bce-8fd4-0bfebdaabc4c",
          "scriptId": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
          "execution": "0ce40a7a-80b9-475c-96c4-c3070f308271"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Articles have composite_score and confidence",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "1972413ee5c99f226db51894d8850f82",
          "id": "8aabdeee-60f0-413c-ba3b-ee270f46db68",
          "timestamp": 1744640905793,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "38da55f8-12a4-4af4-97bd-023b9adee6b0",
          "length": 29,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ffcd2f9-5eef-4bce-8fd4-0bfebdaabc4c",
          "scriptId": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
          "execution": "0ce40a7a-80b9-475c-96c4-c3070f308271"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "72f068a1-881a-4877-8ad4-fbe34a9ab669",
          "timestamp": 1744640905868,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
          "name": "Get Articles - With Source Filter",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ced2dbbc-9290-4add-91b4-8770a043eccf",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "bb43bd62-5cfe-4ed8-8f45-05877ba87df5",
          "length": 29,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd746771-37e1-4c2d-9804-08e473bba302"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "1a4ec3a35892ad375c572c535bbc6e63",
          "id": "232ca844-b9ce-4eb5-8d79-12363a8749d1",
          "timestamp": 1744640905876,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
          "name": "Get Articles - With Source Filter",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bb43bd62-5cfe-4ed8-8f45-05877ba87df5",
          "length": 29,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd746771-37e1-4c2d-9804-08e473bba302",
          "scriptId": "1830bc3f-5d4f-4668-a47b-41e044318177",
          "execution": "0e4a65e8-b307-46c7-b963-002502302a52"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains articles with correct source",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "34763042ac7a8148c37e9db3e07ae40f",
          "id": "a7e87784-2237-4c11-8c3a-e3ba8673ed09",
          "timestamp": 1744640905877,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
          "name": "Get Articles - With Source Filter",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bb43bd62-5cfe-4ed8-8f45-05877ba87df5",
          "length": 29,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd746771-37e1-4c2d-9804-08e473bba302",
          "scriptId": "1830bc3f-5d4f-4668-a47b-41e044318177",
          "execution": "0e4a65e8-b307-46c7-b963-002502302a52"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "2257fbc9-579b-4de6-b6a4-6148a65035c6",
          "timestamp": 1744640905957,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
          "name": "Get Articles - Cache Test",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7f444103-1d36-4f58-a2d7-0ff59a8a3154",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "0a0c202d-ff25-41d6-818d-943b5f7da859",
          "length": 29,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c5a4204c-2568-40e6-a384-fd065ba25893"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "cceaa75a111dfd6afb1dcf3ec5edba7f",
          "id": "60ff7772-7bc1-44a3-b481-81da0eaa90ae",
          "timestamp": 1744640905975,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
          "name": "Get Articles - Cache Test",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a0c202d-ff25-41d6-818d-943b5f7da859",
          "length": 29,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c5a4204c-2568-40e6-a384-fd065ba25893",
          "scriptId": "a376b447-65ef-4be9-90a3-d26dada63c0b",
          "execution": "9de1ad25-1309-47d0-8e0d-8114168f4275"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains articles with correct source",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "a1b1132ef9887e2aa4af832d0e9fd3a9",
          "id": "990d2fb1-1856-443d-91ca-e110b3dd036e",
          "timestamp": 1744640905976,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
          "name": "Get Articles - Cache Test",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a0c202d-ff25-41d6-818d-943b5f7da859",
          "length": 29,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c5a4204c-2568-40e6-a384-fd065ba25893",
          "scriptId": "a376b447-65ef-4be9-90a3-d26dada63c0b",
          "execution": "9de1ad25-1309-47d0-8e0d-8114168f4275"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "3b609532-fdd1-409e-9220-3fc4a3e562a0",
          "timestamp": 1744640906050,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
          "name": "Get Ensemble Details",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "",
                "ensemble"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c54b9345-ed16-4914-83f9-a548080373f1",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains ensemble data\", function () {",
                  "        var json = pm.response.json();",
                  "        pm.expect(json.success).to.be.true;",
                  "        pm.expect(json.data).to.have.property('ensembles');",
                  "        pm.expect(json.data.ensembles).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "509ad818-71f1-42f6-9364-135b361ec389",
          "length": 29,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e863615f-5af6-47a3-8baf-9ed223b44243"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 404",
          "message": "expected [ 200, 404 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 404 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "307f478234fdf9e4d388f8e36d424e3c",
          "id": "95a003cd-5a9c-4adf-95d9-936792130bf3",
          "timestamp": 1744640906056,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
          "name": "Get Ensemble Details",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}",
                "ensemble"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains ensemble data\", function () {",
                  "        var json = pm.response.json();",
                  "        pm.expect(json.success).to.be.true;",
                  "        pm.expect(json.data).to.have.property('ensembles');",
                  "        pm.expect(json.data.ensembles).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
              }
            }
          ]
        },
        "parent": {
          "id": "db337994-5407-4c7e-bc76-43358a538d37",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "d23101fd-2050-4ca0-bbe2-91dae0dace50",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd8adce-6881-41ff-97ef-9e7ba79994bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0ce40a7a-80b9-475c-96c4-c3070f308271"
                  }
                }
              ]
            },
            {
              "id": "c10dde21-d98e-4daf-a5bc-d65495a39609",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1830bc3f-5d4f-4668-a47b-41e044318177",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e4a65e8-b307-46c7-b963-002502302a52"
                  }
                }
              ]
            },
            {
              "id": "dbee8e0e-076f-45b9-927a-2902138f1361",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a376b447-65ef-4be9-90a3-d26dada63c0b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "9de1ad25-1309-47d0-8e0d-8114168f4275"
                  }
                }
              ]
            },
            {
              "id": "165d20e8-f0d5-47fa-a233-e83339861fd1",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "509ad818-71f1-42f6-9364-135b361ec389",
          "length": 29,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e863615f-5af6-47a3-8baf-9ed223b44243",
          "scriptId": "e49b0fca-4c11-446a-8038-13f1995ff5ae",
          "execution": "366cdd61-5b85-450b-9c95-e39f8c57c18d"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "c96cae36-6e8c-4f82-b8e5-cf3ef5d2bf2b",
          "timestamp": 1744640906125,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
          "name": "Submit Feedback - Missing Fields",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c775a710-b834-4cca-9a8b-2fe125d4dad6",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": \n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "f5409a6a-7a7a-49a2-b96c-35accd91f13d",
          "length": 29,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c7eec28-de0e-4681-92c6-f581311cd41e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for missing fields",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "f509c727e3fb45761892274e6ce003fd",
          "id": "62a68f83-2f0c-4907-ae81-7a4efcd79eff",
          "timestamp": 1744640906141,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
          "name": "Submit Feedback - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
              }
            }
          ]
        },
        "parent": {
          "id": "1903cf3b-2c9d-41fe-90b6-cf0e7fe4375e",
          "name": "2. Feedback Handler Tests",
          "item": [
            {
              "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
              "name": "Submit Feedback - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
                  }
                }
              ]
            },
            {
              "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
              "name": "Submit Feedback - Invalid Category",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid category\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid category\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid category');",
                      "});"
                    ],
                    "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
                  }
                }
              ]
            },
            {
              "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
              "name": "Submit Feedback - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid feedback\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f5409a6a-7a7a-49a2-b96c-35accd91f13d",
          "length": 29,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c7eec28-de0e-4681-92c6-f581311cd41e",
          "scriptId": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
          "execution": "7460712d-41d8-40d2-a026-338c4e77da2b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains error about missing fields",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "59a85e869c3279610339d18b2c4abac5",
          "id": "f4fd3312-7e48-4d8e-849a-095ad5e80cf4",
          "timestamp": 1744640906142,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
          "name": "Submit Feedback - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
              }
            }
          ]
        },
        "parent": {
          "id": "1903cf3b-2c9d-41fe-90b6-cf0e7fe4375e",
          "name": "2. Feedback Handler Tests",
          "item": [
            {
              "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
              "name": "Submit Feedback - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
                  }
                }
              ]
            },
            {
              "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
              "name": "Submit Feedback - Invalid Category",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid category\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid category\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid category');",
                      "});"
                    ],
                    "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
                  }
                }
              ]
            },
            {
              "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
              "name": "Submit Feedback - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid feedback\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f5409a6a-7a7a-49a2-b96c-35accd91f13d",
          "length": 29,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c7eec28-de0e-4681-92c6-f581311cd41e",
          "scriptId": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
          "execution": "7460712d-41d8-40d2-a026-338c4e77da2b"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "28b5d275-5c7e-478c-b1d1-9796a821aafe",
          "timestamp": 1744640906220,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5c50b1f6-02f2-422e-8c14-12f617b2f3d4",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": ,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid category');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9d84bc65-cd19-4bca-8cf2-be4cdc3d9ea1",
          "length": 29,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee63fd1c-adb7-448c-9b9e-6c593985e6db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for invalid category",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "2dd075d31f0ee7c8d8456642f64304da",
          "id": "2915ecf8-1d61-48ea-b944-cfd88702c4c9",
          "timestamp": 1744640906237,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid category');",
                  "});"
                ],
                "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
              }
            }
          ]
        },
        "parent": {
          "id": "1903cf3b-2c9d-41fe-90b6-cf0e7fe4375e",
          "name": "2. Feedback Handler Tests",
          "item": [
            {
              "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
              "name": "Submit Feedback - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
                  }
                }
              ]
            },
            {
              "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
              "name": "Submit Feedback - Invalid Category",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid category\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid category\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid category');",
                      "});"
                    ],
                    "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
                  }
                }
              ]
            },
            {
              "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
              "name": "Submit Feedback - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid feedback\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d84bc65-cd19-4bca-8cf2-be4cdc3d9ea1",
          "length": 29,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee63fd1c-adb7-448c-9b9e-6c593985e6db",
          "scriptId": "982343f0-1092-40dd-b65c-e8ece2478727",
          "execution": "dce34127-f687-4044-95d4-383a248207a8"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains error about invalid category",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "cb561f2c733cff0bb1f2e63595935af3",
          "id": "3d69c926-520e-4515-af21-a164ce924b5a",
          "timestamp": 1744640906238,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid category');",
                  "});"
                ],
                "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
              }
            }
          ]
        },
        "parent": {
          "id": "1903cf3b-2c9d-41fe-90b6-cf0e7fe4375e",
          "name": "2. Feedback Handler Tests",
          "item": [
            {
              "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
              "name": "Submit Feedback - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
                  }
                }
              ]
            },
            {
              "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
              "name": "Submit Feedback - Invalid Category",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid category\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid category\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid category');",
                      "});"
                    ],
                    "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
                  }
                }
              ]
            },
            {
              "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
              "name": "Submit Feedback - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid feedback\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d84bc65-cd19-4bca-8cf2-be4cdc3d9ea1",
          "length": 29,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee63fd1c-adb7-448c-9b9e-6c593985e6db",
          "scriptId": "982343f0-1092-40dd-b65c-e8ece2478727",
          "execution": "dce34127-f687-4044-95d4-383a248207a8"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "c36ad002-d8b4-4439-bf35-8c31654be9b7",
          "timestamp": 1744640906322,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
          "name": "Submit Feedback - Valid",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "92a5e33f-9025-4b8e-9fd1-d05721c62514",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": ,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid feedback\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2eec3755-8860-4e25-9579-72cf6b3e6169",
          "length": 29,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "acb50204-c1b7-4c0e-8722-29107013590a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 for valid feedback",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8d7553fbe30f3cbf15a7f0d087f16ebd",
          "id": "c1080750-109d-48ed-9c08-8f87f9908abe",
          "timestamp": 1744640906340,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
          "name": "Submit Feedback - Valid",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid feedback\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
              }
            }
          ]
        },
        "parent": {
          "id": "1903cf3b-2c9d-41fe-90b6-cf0e7fe4375e",
          "name": "2. Feedback Handler Tests",
          "item": [
            {
              "id": "c2e4a9cf-6800-4cb5-b44c-4ce0c3475817",
              "name": "Submit Feedback - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147fa22d-c20f-415b-bfc6-33e558ddee6b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "7460712d-41d8-40d2-a026-338c4e77da2b"
                  }
                }
              ]
            },
            {
              "id": "4edc6272-0fa2-4143-b266-5d26cff647e1",
              "name": "Submit Feedback - Invalid Category",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "982343f0-1092-40dd-b65c-e8ece2478727",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid category\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid category\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid category');",
                      "});"
                    ],
                    "_lastExecutionId": "dce34127-f687-4044-95d4-383a248207a8"
                  }
                }
              ]
            },
            {
              "id": "4bee8c45-0fc4-4247-9301-24f9f8053f6e",
              "name": "Submit Feedback - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88128302-6f19-4312-afb5-82550ef7d7b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid feedback\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2eec3755-8860-4e25-9579-72cf6b3e6169",
          "length": 29,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "acb50204-c1b7-4c0e-8722-29107013590a",
          "scriptId": "88128302-6f19-4312-afb5-82550ef7d7b6",
          "execution": "11cef94c-a8a8-4a0e-b871-0b875d12ed44"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "1c15da60-81e3-4b39-a3db-ece223b49671",
          "timestamp": 1744640906389,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
          "name": "Create Article for Rescoring",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "afa2a6e4-d349-487b-a1c0-ece72d85c915",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-1744640906\",\n  \"pub_date\": \"2025-04-14T14:28:26.383Z\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"rescoreArticleId\");",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "10ae967d-3d63-4af7-8af6-2b4ab27f87b0",
          "length": 29,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c5ec6d52-38d4-4ccd-9cd4-0980f0b1b9ae"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 201",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "12b28c20a5e613c415531be8e648ee20",
          "id": "3daca3a0-eb53-440a-89cf-63cfb7fafbf1",
          "timestamp": 1744640906405,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
          "name": "Create Article for Rescoring",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"rescoreArticleId\");",
                  "}"
                ],
                "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
              }
            }
          ]
        },
        "parent": {
          "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                  }
                }
              ]
            },
            {
              "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                  }
                }
              ]
            },
            {
              "id": "a23760fd-18af-488a-a456-51d24265821d",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                  }
                }
              ]
            },
            {
              "id": "8e2d999e-f544-430a-9173-140bee1f905e",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                  }
                }
              ]
            },
            {
              "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "10ae967d-3d63-4af7-8af6-2b4ab27f87b0",
          "length": 29,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c5ec6d52-38d4-4ccd-9cd4-0980f0b1b9ae",
          "scriptId": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
          "execution": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "386eddea-fc50-4234-8321-7ff3926da21c",
          "timestamp": 1744640906484,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
          "name": "Rescore Article (Valid Score 0.5)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BrescoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6884f4b1-c176-4136-aa92-7703a55ce6c8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "e21d1ed3-3851-462b-afed-1b1e3b3aadae",
          "length": 29,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d1cdb964-7557-4641-8ced-e752883e4dfa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "e0055d7ace1bf50d8afc3b6401279aca",
          "id": "5cf57009-9685-4abe-9ea3-a960b58f67ff",
          "timestamp": 1744640906501,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
          "name": "Rescore Article (Valid Score 0.5)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
              }
            }
          ]
        },
        "parent": {
          "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                  }
                }
              ]
            },
            {
              "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                  }
                }
              ]
            },
            {
              "id": "a23760fd-18af-488a-a456-51d24265821d",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                  }
                }
              ]
            },
            {
              "id": "8e2d999e-f544-430a-9173-140bee1f905e",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                  }
                }
              ]
            },
            {
              "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e21d1ed3-3851-462b-afed-1b1e3b3aadae",
          "length": 29,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d1cdb964-7557-4641-8ced-e752883e4dfa",
          "scriptId": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
          "execution": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "c50b8259-5057-4d54-8753-9c775e551654",
          "timestamp": 1744640906573,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a23760fd-18af-488a-a456-51d24265821d",
          "name": "Get Article (Verify Score)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BrescoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "17e00efc-a00d-404c-8d5e-a2976f495406",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                  "pm.test(\"Score updated to 0.5\", function () {",
                  "    // The API might return the score in different locations based on the response structure",
                  "    // Try different paths where the score might be found",
                  "    var score = null;",
                  "    if (json.data && json.data.composite_score !== undefined) {",
                  "        score = json.data.composite_score;",
                  "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                  "        score = json.data.article.CompositeScore;",
                  "    } else if (json.composite_score !== undefined) {",
                  "        score = json.composite_score;",
                  "    } else if (json.score !== undefined) {",
                  "        score = json.score;",
                  "    }",
                  "    pm.expect(score).to.eql(0.5);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "4eb3634c-fc94-4c73-8956-9140814674db",
          "length": 29,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aba6ac34-c7d2-4c87-a225-79f002d019e3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "6d373ede21178f222361239f0b929474",
          "id": "a941a04f-1896-4c30-816c-731412d038b3",
          "timestamp": 1744640906592,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a23760fd-18af-488a-a456-51d24265821d",
          "name": "Get Article (Verify Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                  "pm.test(\"Score updated to 0.5\", function () {",
                  "    // The API might return the score in different locations based on the response structure",
                  "    // Try different paths where the score might be found",
                  "    var score = null;",
                  "    if (json.data && json.data.composite_score !== undefined) {",
                  "        score = json.data.composite_score;",
                  "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                  "        score = json.data.article.CompositeScore;",
                  "    } else if (json.composite_score !== undefined) {",
                  "        score = json.composite_score;",
                  "    } else if (json.score !== undefined) {",
                  "        score = json.score;",
                  "    }",
                  "    pm.expect(score).to.eql(0.5);",
                  "});"
                ],
                "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
              }
            }
          ]
        },
        "parent": {
          "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                  }
                }
              ]
            },
            {
              "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                  }
                }
              ]
            },
            {
              "id": "a23760fd-18af-488a-a456-51d24265821d",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                  }
                }
              ]
            },
            {
              "id": "8e2d999e-f544-430a-9173-140bee1f905e",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                  }
                }
              ]
            },
            {
              "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4eb3634c-fc94-4c73-8956-9140814674db",
          "length": 29,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aba6ac34-c7d2-4c87-a225-79f002d019e3",
          "scriptId": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
          "execution": "7b4a67de-f3f8-45c5-8494-a840859cc929"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "d0f359ff-13c8-46f2-8143-788651222391",
          "timestamp": 1744640906595,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a23760fd-18af-488a-a456-51d24265821d",
          "name": "Get Article (Verify Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                  "pm.test(\"Score updated to 0.5\", function () {",
                  "    // The API might return the score in different locations based on the response structure",
                  "    // Try different paths where the score might be found",
                  "    var score = null;",
                  "    if (json.data && json.data.composite_score !== undefined) {",
                  "        score = json.data.composite_score;",
                  "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                  "        score = json.data.article.CompositeScore;",
                  "    } else if (json.composite_score !== undefined) {",
                  "        score = json.composite_score;",
                  "    } else if (json.score !== undefined) {",
                  "        score = json.score;",
                  "    }",
                  "    pm.expect(score).to.eql(0.5);",
                  "});"
                ],
                "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
              }
            }
          ]
        },
        "parent": {
          "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                  }
                }
              ]
            },
            {
              "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                  }
                }
              ]
            },
            {
              "id": "a23760fd-18af-488a-a456-51d24265821d",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                  }
                }
              ]
            },
            {
              "id": "8e2d999e-f544-430a-9173-140bee1f905e",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                  }
                }
              ]
            },
            {
              "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4eb3634c-fc94-4c73-8956-9140814674db",
          "length": 29,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aba6ac34-c7d2-4c87-a225-79f002d019e3",
          "scriptId": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "194e02c9-95fa-4003-8ad2-f91b89ef922c",
          "timestamp": 1744640906668,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8e2d999e-f544-430a-9173-140bee1f905e",
          "name": "Rescore Article (Upper Boundary 1.0)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BrescoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "05c76f1c-1d4e-447a-b1ee-8187941a6b88",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "58261946-8af4-45d5-907e-df239dbcdf42",
          "length": 29,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "87dc5e8b-eb30-4691-86cb-2e5ca13c6ddb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "2e722e6633b40d6fcbc916c1a9282f82",
          "id": "757438ea-cf43-4635-b42c-35d91265c9f6",
          "timestamp": 1744640906686,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8e2d999e-f544-430a-9173-140bee1f905e",
          "name": "Rescore Article (Upper Boundary 1.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
              }
            }
          ]
        },
        "parent": {
          "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                  }
                }
              ]
            },
            {
              "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                  }
                }
              ]
            },
            {
              "id": "a23760fd-18af-488a-a456-51d24265821d",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                  }
                }
              ]
            },
            {
              "id": "8e2d999e-f544-430a-9173-140bee1f905e",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                  }
                }
              ]
            },
            {
              "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "58261946-8af4-45d5-907e-df239dbcdf42",
          "length": 29,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "87dc5e8b-eb30-4691-86cb-2e5ca13c6ddb",
          "scriptId": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
          "execution": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "9a4971ba-b984-4efa-ac93-2c717be470ad",
          "timestamp": 1744640906748,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
          "name": "Rescore Article (Lower Boundary -1.0)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BrescoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "49f243ab-977e-491c-9d90-faf8b966fe21",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a1c26d38-2684-4a55-bcf8-6950c5dc35d2",
          "length": 29,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5472a7fa-b8fe-4a60-bb4f-ee293f0b2ecf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "78f15cdcb0025728a6e8a85594916efa",
          "id": "2a6f68df-0f19-49ab-ae24-3943cb6a89db",
          "timestamp": 1744640906765,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
          "name": "Rescore Article (Lower Boundary -1.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
              }
            }
          ]
        },
        "parent": {
          "id": "36cf37ed-d5fb-4a88-9c0b-0b20457c24f7",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "87b8cecb-bceb-4227-871a-38c18959dd33",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b9b6992-1a98-4c61-afef-844bc15b60c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "e11ec4cf-fe7b-4884-8088-e92b9ca90de9"
                  }
                }
              ]
            },
            {
              "id": "00a0bff7-6270-4822-82ac-6d831d17d33d",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbec01ee-5a53-46dc-8ad4-6a60dc7cce14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "c0a54f46-c1bf-4e33-bb24-dc830ccfc552"
                  }
                }
              ]
            },
            {
              "id": "a23760fd-18af-488a-a456-51d24265821d",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e586d44-ec3e-433b-ad51-e7ddf4a756c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "7b4a67de-f3f8-45c5-8494-a840859cc929"
                  }
                }
              ]
            },
            {
              "id": "8e2d999e-f544-430a-9173-140bee1f905e",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3bc63f5-d488-4eca-b610-03977f92bcd6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "83ef9b65-4eb9-4527-a08a-5e3b78e02bfa"
                  }
                }
              ]
            },
            {
              "id": "23f23aec-1c53-4bda-84e0-b1d56b82177f",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "04e4b673-096a-49d3-be1d-0d8f8254af05"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a1c26d38-2684-4a55-bcf8-6950c5dc35d2",
          "length": 29,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5472a7fa-b8fe-4a60-bb4f-ee293f0b2ecf",
          "scriptId": "b9079b01-a2b4-4021-96cd-aed1ca79454f",
          "execution": "04e4b673-096a-49d3-be1d-0d8f8254af05"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "a0caca08-e73f-424f-af5d-49a7664e2251",
          "timestamp": 1744640906823,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "98eaba03-0063-459a-8daa-971942856259",
          "name": "Rescore Non-existent Article",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "999999"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "4e41207b-c764-4b72-8e07-1758045f3797",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ce5b238a-f654-4546-965c-d918f74f598e",
          "length": 29,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bdd1772f-23bb-41f5-827d-8a18141c2b0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "34147f9da141ea8bb631c3a8710314bb",
          "id": "f04f92c4-f9c3-4374-82b1-e2676a5124b8",
          "timestamp": 1744640906829,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "98eaba03-0063-459a-8daa-971942856259",
          "name": "Rescore Non-existent Article",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "999999"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
              }
            }
          ]
        },
        "parent": {
          "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "id": "98eaba03-0063-459a-8daa-971942856259",
              "name": "Rescore Non-existent Article",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                  }
                }
              ]
            },
            {
              "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                  }
                }
              ]
            },
            {
              "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                  }
                }
              ]
            },
            {
              "id": "5eb9295b-a254-475a-816c-8257724653aa",
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                  }
                }
              ]
            },
            {
              "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                  }
                }
              ]
            },
            {
              "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ce5b238a-f654-4546-965c-d918f74f598e",
          "length": 29,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bdd1772f-23bb-41f5-827d-8a18141c2b0d",
          "scriptId": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
          "execution": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "4c656938-ffb0-445d-966a-877be27c128c",
          "timestamp": 1744640906918,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
          "name": "Create Article for Invalid Score Tests",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5c511810-34cb-4395-8893-508630aa8ec9",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-1744640907\",\n  \"pub_date\": \"2025-04-14T14:28:26.898Z\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"invalidScoreArticleId\");",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "bbe5932c-bd9c-47c8-b38a-ff3bc86b5cd9",
          "length": 29,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d9755645-9b06-4ccc-ba23-f85ba8394de7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 201",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "a27bf080eeeaf717359799135837fc76",
          "id": "01faa963-e03d-412a-b03d-f13631cc7cf8",
          "timestamp": 1744640906923,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
          "name": "Create Article for Invalid Score Tests",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"invalidScoreArticleId\");",
                  "}"
                ],
                "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
              }
            }
          ]
        },
        "parent": {
          "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "id": "98eaba03-0063-459a-8daa-971942856259",
              "name": "Rescore Non-existent Article",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                  }
                }
              ]
            },
            {
              "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                  }
                }
              ]
            },
            {
              "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                  }
                }
              ]
            },
            {
              "id": "5eb9295b-a254-475a-816c-8257724653aa",
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                  }
                }
              ]
            },
            {
              "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                  }
                }
              ]
            },
            {
              "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bbe5932c-bd9c-47c8-b38a-ff3bc86b5cd9",
          "length": 29,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d9755645-9b06-4ccc-ba23-f85ba8394de7",
          "scriptId": "1baeeb74-73cb-405f-85ca-e819b669509f",
          "execution": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "782913da-061f-46a5-9732-0b23375ddc68",
          "timestamp": 1744640906985,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
          "name": "Rescore Article (Below Range -2.0)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BinvalidScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c7e6d778-40ba-4d11-8a4d-c6b211f9534f",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "369e7e59-a9b0-4893-9b1e-e68ff10f77af",
          "length": 29,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0914d202-6bf5-4ba7-bcb0-e7e56d5adced"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "b96c2921ddab25e7f28aef4895800ec2",
          "id": "e3e1b45e-8595-40ff-adf7-5ceba33977dc",
          "timestamp": 1744640906991,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
          "name": "Rescore Article (Below Range -2.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
              }
            }
          ]
        },
        "parent": {
          "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "id": "98eaba03-0063-459a-8daa-971942856259",
              "name": "Rescore Non-existent Article",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                  }
                }
              ]
            },
            {
              "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                  }
                }
              ]
            },
            {
              "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                  }
                }
              ]
            },
            {
              "id": "5eb9295b-a254-475a-816c-8257724653aa",
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                  }
                }
              ]
            },
            {
              "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                  }
                }
              ]
            },
            {
              "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "369e7e59-a9b0-4893-9b1e-e68ff10f77af",
          "length": 29,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0914d202-6bf5-4ba7-bcb0-e7e56d5adced",
          "scriptId": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
          "execution": "98084d5e-178d-40d2-8791-f873849930fb"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "34cb6f74-83ff-415d-979f-54f14bdea74e",
          "timestamp": 1744640907010,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5eb9295b-a254-475a-816c-8257724653aa",
          "name": "Rescore Article (Above Range 1.1)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BinvalidScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3253cbee-398c-46f0-b9e4-d1de79a91623",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "04396392-f0a9-4a23-8a8c-4862952e41b8",
          "length": 29,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b365b99e-6352-44d8-91ea-9734ddc1f8eb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "ab0e07fd9ee6f1d2c81395c5653ad69c",
          "id": "676f1102-fedb-4ef6-8872-bdf7493948e1",
          "timestamp": 1744640907024,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5eb9295b-a254-475a-816c-8257724653aa",
          "name": "Rescore Article (Above Range 1.1)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
              }
            }
          ]
        },
        "parent": {
          "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "id": "98eaba03-0063-459a-8daa-971942856259",
              "name": "Rescore Non-existent Article",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                  }
                }
              ]
            },
            {
              "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                  }
                }
              ]
            },
            {
              "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                  }
                }
              ]
            },
            {
              "id": "5eb9295b-a254-475a-816c-8257724653aa",
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                  }
                }
              ]
            },
            {
              "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                  }
                }
              ]
            },
            {
              "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "04396392-f0a9-4a23-8a8c-4862952e41b8",
          "length": 29,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b365b99e-6352-44d8-91ea-9734ddc1f8eb",
          "scriptId": "931ceca7-6c41-41c8-8d65-548ae486bbce",
          "execution": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "21d70926-cff2-4c01-a73a-49960f4fbf13",
          "timestamp": 1744640907102,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
          "name": "Rescore Article (Non-Numeric Score)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BinvalidScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d048e1af-e466-4230-bb24-2cffe030ced6",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"not-a-number\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "88de72c9-d2b9-4941-b4fa-aec9dfe3ac00",
          "length": 29,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "38781df4-aa78-4918-86f5-4933d521ae01"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "149402f2143c059983ea70862b2d281d",
          "id": "ab64887e-8f71-4b49-a365-872e065f1b19",
          "timestamp": 1744640907120,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
          "name": "Rescore Article (Non-Numeric Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"not-a-number\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
              }
            }
          ]
        },
        "parent": {
          "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "id": "98eaba03-0063-459a-8daa-971942856259",
              "name": "Rescore Non-existent Article",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                  }
                }
              ]
            },
            {
              "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                  }
                }
              ]
            },
            {
              "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                  }
                }
              ]
            },
            {
              "id": "5eb9295b-a254-475a-816c-8257724653aa",
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                  }
                }
              ]
            },
            {
              "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                  }
                }
              ]
            },
            {
              "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "88de72c9-d2b9-4941-b4fa-aec9dfe3ac00",
          "length": 29,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "38781df4-aa78-4918-86f5-4933d521ae01",
          "scriptId": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
          "execution": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "6fd4be3b-e21e-4727-85b1-779bb2091c0a",
          "timestamp": 1744640907198,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
          "name": "Rescore Article (Empty JSON)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BinvalidScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "41879b27-dc96-4460-9cad-a0cca2ad5b8d",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c5afe051-33f7-49f7-af34-7c5b1aaaf65d",
          "length": 29,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0df337de-6d94-4e2c-9ec3-5a180f06f134"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 400",
          "message": "expected [ 200, 400 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 400 ] to include undefined\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "f26876df261501b4a31c0c8820f83a87",
          "id": "84b7018b-990c-4f20-b6b7-8ae7914020b7",
          "timestamp": 1744640907206,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
          "name": "Rescore Article (Empty JSON)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});"
                ],
                "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
              }
            }
          ]
        },
        "parent": {
          "id": "86f6b310-544f-495f-bc57-d71398c6ece9",
          "name": "3.2 Invalid Rescoring Tests",
          "item": [
            {
              "id": "98eaba03-0063-459a-8daa-971942856259",
              "name": "Rescore Non-existent Article",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b21affd-1e32-4f35-8ad2-d4e56fe0ecbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "_lastExecutionId": "eeaed29e-95ea-4abe-8c8a-ab302e3c37c8"
                  }
                }
              ]
            },
            {
              "id": "8e6cd0e6-d8e3-4ec2-aab7-388762c9a0e3",
              "name": "Create Article for Invalid Score Tests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1baeeb74-73cb-405f-85ca-e819b669509f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"invalidScoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "d1d2eef0-b8af-4cba-948b-404638c0c5ac"
                  }
                }
              ]
            },
            {
              "id": "c1a22d41-a4ea-45fd-8ff3-9277a426c42b",
              "name": "Rescore Article (Below Range -2.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0460d4-a9b3-4ab5-8d76-5e4a9ebc16b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "98084d5e-178d-40d2-8791-f873849930fb"
                  }
                }
              ]
            },
            {
              "id": "5eb9295b-a254-475a-816c-8257724653aa",
              "name": "Rescore Article (Above Range 1.1)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "931ceca7-6c41-41c8-8d65-548ae486bbce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "74c7384b-7178-4fc3-93e4-77a2a1089daa"
                  }
                }
              ]
            },
            {
              "id": "19c6d02a-26da-46da-a9ae-4e213ff254c8",
              "name": "Rescore Article (Non-Numeric Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"not-a-number\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6aa70a6b-5b1e-4188-9b81-81edd8bc2406",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "5076f80d-a28a-4bf4-ac52-ef8a88aa7298"
                  }
                }
              ]
            },
            {
              "id": "72da88d4-823c-402b-b9a1-44ef7e19c0a7",
              "name": "Rescore Article (Empty JSON)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{invalidScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b55e7604-036d-4f22-85b1-cb43fd95f202",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect([200, 400]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "8579e290-e421-43ee-b212-a38c91266add"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c5afe051-33f7-49f7-af34-7c5b1aaaf65d",
          "length": 29,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0df337de-6d94-4e2c-9ec3-5a180f06f134",
          "scriptId": "b55e7604-036d-4f22-85b1-cb43fd95f202",
          "execution": "8579e290-e421-43ee-b212-a38c91266add"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "c414520f-32bd-43e0-af2d-9090f1decd3b",
          "timestamp": 1744640907272,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "911e662b-cdb1-4da7-ac37-25de4dfedb89",
          "name": "Get Score Progress",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "score-progress",
                "%7B%7BrescoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f33b959c-a988-43e4-9c2f-548689644340",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c7e3a91-9830-44fb-99e3-0e6823bb29ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3a44a0fe-fa19-4b25-9971-c9cad7e2fef6",
          "length": 29,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bc5b284c-6a8f-429e-881b-75a26bf32f8a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 404",
          "message": "expected [ 200, 404 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 404 ] to include undefined\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "18593b0ce4a2e46aa2fdf143a6606fe9",
          "id": "8a4431b7-cce9-499f-9c51-d97acb38010f",
          "timestamp": 1744640907289,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "911e662b-cdb1-4da7-ac37-25de4dfedb89",
          "name": "Get Score Progress",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "score-progress",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c7e3a91-9830-44fb-99e3-0e6823bb29ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});"
                ],
                "_lastExecutionId": "dc6022b9-bc50-4ec9-b4a1-ca3ae2c9527e"
              }
            }
          ]
        },
        "parent": {
          "id": "56e4cbb6-3bfa-4984-bf05-dc4fda89943c",
          "name": "3.3 Score Progress Tests",
          "item": [
            {
              "id": "911e662b-cdb1-4da7-ac37-25de4dfedb89",
              "name": "Get Score Progress",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "score-progress",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2c7e3a91-9830-44fb-99e3-0e6823bb29ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});"
                    ],
                    "_lastExecutionId": "dc6022b9-bc50-4ec9-b4a1-ca3ae2c9527e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3a44a0fe-fa19-4b25-9971-c9cad7e2fef6",
          "length": 29,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bc5b284c-6a8f-429e-881b-75a26bf32f8a",
          "scriptId": "2c7e3a91-9830-44fb-99e3-0e6823bb29ae",
          "execution": "dc6022b9-bc50-4ec9-b4a1-ca3ae2c9527e"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "42d9fa92-e0da-4d71-9acb-830edeb84eb6",
          "timestamp": 1744640907366,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "bc2b280b-76e6-4936-bd1f-2a61d4a9a8a9",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "681f079a-cb14-44f1-833b-1170f17c504c",
          "length": 29,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89f592ea-c1ac-4b63-b599-8d42bfca31f6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "c06b10aae7d1e198bcf8490807b193f0",
          "id": "f84b1372-4abb-40da-89e4-14adfd7930e6",
          "timestamp": 1744640907384,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ],
                "_lastExecutionId": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
              }
            }
          ]
        },
        "parent": {
          "id": "15851efe-2cf8-4f36-89b9-a4bb8ecb7367",
          "name": "4.1 Debug Feedback Handler",
          "item": [
            {
              "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
              "name": "Get Database Schema",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "debug",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains schema information\", function () {",
                      "    var json = pm.response.json();",
                      "    console.log(JSON.stringify(json, null, 2));",
                      "});"
                    ],
                    "_lastExecutionId": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
                  }
                }
              ]
            },
            {
              "id": "7c8ae39e-cbd6-45b5-8872-45aec209aed8",
              "name": "Submit Feedback - Debug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Debug",
                    "value": "true"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4081d12-9480-446a-bc6c-663c60513e8c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Response received\", function () {",
                      "    console.log('Status code:', pm.response.code);",
                      "    console.log('Response body:', pm.response.text());",
                      "});",
                      "",
                      "try {",
                      "    var json = pm.response.json();",
                      "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                      "} catch (e) {",
                      "    console.log('Error parsing JSON:', e.message);",
                      "}"
                    ],
                    "_lastExecutionId": "4db1369b-ad8b-46d5-9c0a-d4e484ffd885"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "681f079a-cb14-44f1-833b-1170f17c504c",
          "length": 29,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89f592ea-c1ac-4b63-b599-8d42bfca31f6",
          "scriptId": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
          "execution": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains schema information",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "4c1217a2a28a9b2521d1b5b05074e53c",
          "id": "e1d6bf5f-3694-4f7b-9ba2-0c2b11b9a2ce",
          "timestamp": 1744640907386,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ],
                "_lastExecutionId": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
              }
            }
          ]
        },
        "parent": {
          "id": "15851efe-2cf8-4f36-89b9-a4bb8ecb7367",
          "name": "4.1 Debug Feedback Handler",
          "item": [
            {
              "id": "04780c59-1015-4bc5-875f-9d340fa68e4e",
              "name": "Get Database Schema",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "debug",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains schema information\", function () {",
                      "    var json = pm.response.json();",
                      "    console.log(JSON.stringify(json, null, 2));",
                      "});"
                    ],
                    "_lastExecutionId": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
                  }
                }
              ]
            },
            {
              "id": "7c8ae39e-cbd6-45b5-8872-45aec209aed8",
              "name": "Submit Feedback - Debug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Debug",
                    "value": "true"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4081d12-9480-446a-bc6c-663c60513e8c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Response received\", function () {",
                      "    console.log('Status code:', pm.response.code);",
                      "    console.log('Response body:', pm.response.text());",
                      "});",
                      "",
                      "try {",
                      "    var json = pm.response.json();",
                      "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                      "} catch (e) {",
                      "    console.log('Error parsing JSON:', e.message);",
                      "}"
                    ],
                    "_lastExecutionId": "4db1369b-ad8b-46d5-9c0a-d4e484ffd885"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "681f079a-cb14-44f1-833b-1170f17c504c",
          "length": 29,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89f592ea-c1ac-4b63-b599-8d42bfca31f6",
          "scriptId": "70477ed5-c18d-4403-8f7e-32cf1e4794d2",
          "execution": "0d7cc927-061d-493e-942a-9e3d3c426ce4"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "aab8ef98-453d-40b4-9f06-98a5c2adb4bb",
          "timestamp": 1744640907456,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7c8ae39e-cbd6-45b5-8872-45aec209aed8",
          "name": "Submit Feedback - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1d93a429-0b37-498c-8790-93beb9f16bd4",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": ,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4081d12-9480-446a-bc6c-663c60513e8c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "cb96f283-1d77-4bd2-8e3f-d3ebd793db41",
          "length": 29,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "229b1e13-0d2c-44f6-bc53-5b4df924316e"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "28139a2f-6c7f-479b-ab4c-afea43b8d709",
          "timestamp": 1744640907568,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d51c2711-3753-4458-8f5a-61b5ce881d78",
          "name": "Create Article - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "baa56bf5-ba14-4904-9451-1e2754ade827",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-1744640908\",\n  \"pub_date\": \"2025-04-14T14:28:27.548Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9b6a9ce-dd10-427d-8392-8f911835c674",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "    if (json.data && json.data.article_id) {",
                  "        pm.environment.set(\"debugArticleId\", json.data.article_id);",
                  "        console.log('Set debugArticleId to:', json.data.article_id);",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "de0056a8-9de8-48d8-b27b-fe4ca822544d",
          "length": 29,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "836a53de-0eca-4918-8f1d-91c8489eee40"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "99d529a9-fa30-4174-9f6f-b08ac672e718",
          "timestamp": 1744640907663,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "9ac575d2-7e69-4f7b-aed5-14f9478aae6b",
          "name": "Get Article - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BdebugArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "48decc97-4b2a-470e-a9ba-6b50877e06f3",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bef22975-faed-4b49-a1cb-8b8355ae4f5e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "61b2280b-6921-47a9-9b6f-ab7b6e6e8fa1",
          "length": 29,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "742a167e-ac99-4b60-a3fa-c33b2da0a3de"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "a4bf64e1-c947-4cc1-b596-3c21edc3d952",
          "timestamp": 1744640907737,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f8d75f31-46f8-499d-ace6-2f1517e2dba4",
          "name": "Get Articles - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ccf177e2-ee5b-467b-9683-4d534adf066f",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9a809e6b-6fd3-4791-ad93-230bfae9842e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response headers:', pm.response.headers.all());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Response structure:', Object.keys(json));",
                  "    if (json.data && Array.isArray(json.data)) {",
                  "        console.log('Number of articles:', json.data.length);",
                  "        if (json.data.length > 0) {",
                  "            console.log('First article structure:', Object.keys(json.data[0]));",
                  "            console.log('First article sample:', {",
                  "                id: json.data[0].id,",
                  "                title: json.data[0].title,",
                  "                source: json.data[0].source,",
                  "                composite_score: json.data[0].composite_score,",
                  "                confidence: json.data[0].confidence",
                  "            });",
                  "        }",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "e38f7dc5-f10d-45ee-8b23-ee88a718d94f",
          "length": 29,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1fa38caa-d6bb-4a87-8201-7af8277a9e40"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'substring')",
          "checksum": "74fa7b1eff5b29603aab90349019b036",
          "id": "e804c067-a077-4cad-88c8-ee0952232ce7",
          "timestamp": 1744640907758,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f8d75f31-46f8-499d-ace6-2f1517e2dba4",
          "name": "Get Articles - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9a809e6b-6fd3-4791-ad93-230bfae9842e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response headers:', pm.response.headers.all());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Response structure:', Object.keys(json));",
                  "    if (json.data && Array.isArray(json.data)) {",
                  "        console.log('Number of articles:', json.data.length);",
                  "        if (json.data.length > 0) {",
                  "            console.log('First article structure:', Object.keys(json.data[0]));",
                  "            console.log('First article sample:', {",
                  "                id: json.data[0].id,",
                  "                title: json.data[0].title,",
                  "                source: json.data[0].source,",
                  "                composite_score: json.data[0].composite_score,",
                  "                confidence: json.data[0].confidence",
                  "            });",
                  "        }",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                  "}"
                ],
                "_lastExecutionId": "74a74af0-2250-4c85-9a52-9c6dab1eb5ce"
              }
            }
          ]
        },
        "parent": {
          "id": "8d9dc5df-fb2f-4f11-aeda-aa4b74b5ceeb",
          "name": "4.3 Debug Get Articles",
          "item": [
            {
              "id": "f8d75f31-46f8-499d-ace6-2f1517e2dba4",
              "name": "Get Articles - Debug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "debug",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a809e6b-6fd3-4791-ad93-230bfae9842e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Response received\", function () {",
                      "    console.log('Status code:', pm.response.code);",
                      "    console.log('Response headers:', pm.response.headers.all());",
                      "});",
                      "",
                      "try {",
                      "    var json = pm.response.json();",
                      "    console.log('Response structure:', Object.keys(json));",
                      "    if (json.data && Array.isArray(json.data)) {",
                      "        console.log('Number of articles:', json.data.length);",
                      "        if (json.data.length > 0) {",
                      "            console.log('First article structure:', Object.keys(json.data[0]));",
                      "            console.log('First article sample:', {",
                      "                id: json.data[0].id,",
                      "                title: json.data[0].title,",
                      "                source: json.data[0].source,",
                      "                composite_score: json.data[0].composite_score,",
                      "                confidence: json.data[0].confidence",
                      "            });",
                      "        }",
                      "    }",
                      "} catch (e) {",
                      "    console.log('Error parsing JSON:', e.message);",
                      "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                      "}"
                    ],
                    "_lastExecutionId": "74a74af0-2250-4c85-9a52-9c6dab1eb5ce"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e38f7dc5-f10d-45ee-8b23-ee88a718d94f",
          "length": 29,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1fa38caa-d6bb-4a87-8201-7af8277a9e40",
          "scriptId": "9a809e6b-6fd3-4791-ad93-230bfae9842e"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "fc590cb8-45c3-4e1d-8235-f941ca2ec500",
          "timestamp": 1744640907832,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1ada200a-599a-4a43-9300-cb1c2272d8f0",
          "name": "Get Ensemble Details - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BdebugArticleId%7D%7D",
                "ensemble"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2dc34a98-f58f-48e1-91ec-8e69f8493d34",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ba08326-0f41-446a-9181-18da51b9193d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "94cc41bc-e4ea-42fc-91ec-708df7e9e248",
          "length": 29,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b992e1e0-2a55-4ee9-aa56-434a0d5cf7d9"
        }
      }
    ],
    "error": null
  }
}