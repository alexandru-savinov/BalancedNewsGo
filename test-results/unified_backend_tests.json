{
  "collection": {
    "item": [
      {
        "id": "7ee89521-d00e-433f-9d6c-7955e717e4bf",
        "name": "1. Article Management Tests",
        "item": [
          {
            "id": "1181590c-d521-4ceb-91c2-7f7071d65de4",
            "name": "1.1 Article Creation Tests",
            "item": [
              {
                "id": "651939c1-3766-4b5c-85cd-b802f85b9d5f",
                "name": "Create Article - Missing Fields",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fc560a1-db29-4338-8967-44480d2868a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400 for missing fields\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"Response contains error about missing fields\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.error.message).to.include('Missing required fields');",
                        "});"
                      ],
                      "_lastExecutionId": "f67bf362-8841-46dc-bfe7-3c33714da6e4"
                    }
                  }
                ]
              },
              {
                "id": "d83d5797-2ffc-4421-b704-7feb6e8301f2",
                "name": "Create Article - Invalid URL Format",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32997191-871f-4fd2-9ea0-11534a23cf3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400 for invalid URL\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"Response contains error about invalid URL\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.error.message).to.include('Invalid URL format');",
                        "});"
                      ],
                      "_lastExecutionId": "4ac3c1c2-63e1-4ff9-9938-28842b7d6fe2"
                    }
                  }
                ]
              },
              {
                "id": "763701d0-41e6-43a3-ad5a-3ebb5936c9ca",
                "name": "Create Article - Valid",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d4eabf2-6860-4194-a5bf-642f93c6d670",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "",
                        "if (pm.response.code === 200 || pm.response.code === 201) {",
                        "    var json = pm.response.json();",
                        "    pm.environment.set(\"articleId\", json.data.article_id);",
                        "}"
                      ],
                      "_lastExecutionId": "ccafe8b4-c127-4abf-9f1c-456a39d24f10"
                    }
                  }
                ]
              },
              {
                "id": "df75f1e5-bf3d-4499-b858-15b88a2dffe5",
                "name": "Create Article - Duplicate URL",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d332831c-3acf-481a-85f1-5a1acb85bd1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                        "    pm.response.to.have.status(409);",
                        "});",
                        "",
                        "pm.test(\"Response contains error about duplicate URL\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.error.message).to.include('already exists');",
                        "});"
                      ],
                      "_lastExecutionId": "49f6e5a8-5de4-4a42-80ac-3136e6c9a993"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "43a352ec-d98e-48c6-a892-ccb5fcb650e6",
            "name": "1.2 Article Retrieval Tests",
            "item": [
              {
                "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
                "name": "Get Articles - Default Parameters",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af7597b5-cd13-4fee-935d-c76a49073930",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains articles\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "    pm.expect(json.data).to.be.an('array');",
                        "});",
                        "",
                        "pm.test(\"Articles have composite_score and confidence\", function () {",
                        "    var json = pm.response.json();",
                        "    if (json.data && json.data.length > 0) {",
                        "        console.log('First article:', JSON.stringify(json.data[0]));",
                        "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                        "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                        "    }",
                        "});"
                      ],
                      "_lastExecutionId": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
                    }
                  }
                ]
              },
              {
                "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
                "name": "Get Articles - With Source Filter",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "source",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains articles with correct source\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "    pm.expect(json.data).to.be.an('array');",
                        "    if (json.data && json.data.length > 0) {",
                        "        pm.expect(json.data[0].source).to.equal('test');",
                        "    }",
                        "});"
                      ],
                      "_lastExecutionId": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
                    }
                  }
                ]
              },
              {
                "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
                "name": "Get Articles - Cache Test",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "source",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains articles with correct source\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "    pm.expect(json.data).to.be.an('array');",
                        "    if (json.data && json.data.length > 0) {",
                        "        pm.expect(json.data[0].source).to.equal('test');",
                        "    }",
                        "});"
                      ],
                      "_lastExecutionId": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
                    }
                  }
                ]
              },
              {
                "id": "77365fb8-2a34-4cee-8f27-2ffe7b60c045",
                "name": "Get Ensemble Details",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{articleId}}",
                      "ensemble"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97fd9a24-57fe-4fab-94d6-e4d8c7de1ac6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 404\", function () {",
                        "    pm.expect([200, 404]).to.include(pm.response.code);",
                        "});",
                        "",
                        "if (pm.response.code === 200) {",
                        "    pm.test(\"Response contains ensemble data\", function () {",
                        "        var json = pm.response.json();",
                        "        pm.expect(json.success).to.be.true;",
                        "        pm.expect(json.data).to.have.property('ensembles');",
                        "        pm.expect(json.data.ensembles).to.be.an('array');",
                        "    });",
                        "}"
                      ],
                      "_lastExecutionId": "81db780a-f17d-457b-bb5a-4ca4b79940d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "cb39e3c3-f4f1-416a-bb85-cbf6c62b21ef",
        "name": "2. Feedback Handler Tests",
        "item": [
          {
            "id": "06f610c0-ba66-490b-b5f7-2cc0058c0fd0",
            "name": "Submit Feedback - Missing Fields",
            "request": {
              "url": {
                "path": [
                  "api",
                  "feedback"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"article_id\": {{articleId}}\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a2b1656-9eb7-4f76-b6cd-319dac76492c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for missing fields\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Response contains error about missing fields\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Missing required fields');",
                    "});"
                  ],
                  "_lastExecutionId": "3dca2203-1ccd-423a-852f-97eea698a8ed"
                }
              }
            ]
          },
          {
            "id": "1f261976-197a-4f3a-adc0-889ff8af9409",
            "name": "Submit Feedback - Invalid Category",
            "request": {
              "url": {
                "path": [
                  "api",
                  "feedback"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eb842699-c185-4b9a-ace2-a653d07ab0ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for invalid category\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Response contains error about invalid category\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Invalid category');",
                    "});"
                  ],
                  "_lastExecutionId": "af1c12c2-96b8-4264-a3ed-35aabcaf72ee"
                }
              }
            ]
          },
          {
            "id": "3be100d6-0cab-4ac0-8760-d9704270fb6a",
            "name": "Submit Feedback - Valid",
            "request": {
              "url": {
                "path": [
                  "api",
                  "feedback"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7fef76a0-cb51-4c98-aecb-aa0eb95972e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 for valid feedback\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "54fc1dcd-d604-4c28-a498-4c3ca03e77c3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "82c84ddc-a83d-4c47-ae86-d40d86cefc33",
        "name": "3. Article Rescoring Tests",
        "item": [
          {
            "id": "5c90b02c-8838-4caa-8ef1-3cb71554d74d",
            "name": "3.1 Valid Rescoring Tests",
            "item": [
              {
                "id": "4d509159-95bc-4b7d-ad2f-ad0d3f14cb7e",
                "name": "Create Article for Rescoring",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8f177b9-cd67-4e4c-8696-4eb34a30c94b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "if (pm.response.code === 200 || pm.response.code === 201) {",
                        "    var json = pm.response.json();",
                        "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                        "} else {",
                        "    pm.environment.unset(\"rescoreArticleId\");",
                        "}"
                      ],
                      "_lastExecutionId": "7414c618-457d-4c12-9ad2-24e4e9fe1ca8"
                    }
                  }
                ]
              },
              {
                "id": "3ff6ee62-9656-4e6f-aac5-8fa57be6a168",
                "name": "Rescore Article (Valid Score 0.5)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 0.5\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dac7fae4-1c62-44ea-b238-6c3e7637f0f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "1d136b4b-d5f2-4592-aa90-b89c3dc653ed"
                    }
                  }
                ]
              },
              {
                "id": "0f77535c-24a7-4f77-90c4-2773ff8c8e08",
                "name": "Get Article (Verify Score)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8854ad5f-a8b9-4c3e-81b5-4eadef21931c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "var json = pm.response.json();",
                        "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                        "pm.test(\"Score updated to 0.5\", function () {",
                        "    // The API might return the score in different locations based on the response structure",
                        "    // Try different paths where the score might be found",
                        "    var score = null;",
                        "    if (json.data && json.data.composite_score !== undefined) {",
                        "        score = json.data.composite_score;",
                        "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                        "        score = json.data.article.CompositeScore;",
                        "    } else if (json.composite_score !== undefined) {",
                        "        score = json.composite_score;",
                        "    } else if (json.score !== undefined) {",
                        "        score = json.score;",
                        "    }",
                        "    pm.expect(score).to.eql(0.5);",
                        "});"
                      ],
                      "_lastExecutionId": "49da24cc-3841-407c-a0cc-9894c6f29418"
                    }
                  }
                ]
              },
              {
                "id": "ab53c575-1ab4-469a-9c0d-246db2b8f6d6",
                "name": "Rescore Article (Upper Boundary 1.0)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 1.0\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c07588d-209f-461c-9b83-360148f77557",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "2967b334-de4e-4760-8500-399ed0b1d44c"
                    }
                  }
                ]
              },
              {
                "id": "87e23fe0-578b-453e-9909-2d623df5dc89",
                "name": "Rescore Article (Lower Boundary -1.0)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": -1.0\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66d82a29-c2cc-40a2-9e9c-85bfa6beed3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "fd67d57a-1c10-43f3-bdef-02d17506e7b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "b3c9208b-fbf3-4200-811f-e44cf0e580af",
            "name": "3.2 Invalid Rescoring Tests",
            "item": [
              {
                "id": "c73b6638-47be-4abc-bd29-93fc0db3f2e2",
                "name": "Rescore Non-existent Article",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "999999"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 0.5\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52b66e40-be97-44f9-bd22-49fb566f0594",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});"
                      ],
                      "_lastExecutionId": "d74ed3e5-a510-4c7f-9ae7-c21372e08f7e"
                    }
                  }
                ]
              },
              {
                "id": "97c84751-ae76-4187-aa9c-585e8db26c56",
                "name": "Create Article for Invalid Score Tests",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cefca47d-68ec-4377-8cd4-db8bcad357a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "if (pm.response.code === 200 || pm.response.code === 201) {",
                        "    var json = pm.response.json();",
                        "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                        "} else {",
                        "    pm.environment.unset(\"invalidScoreArticleId\");",
                        "}"
                      ],
                      "_lastExecutionId": "509ffa38-b47c-49f8-85ab-7186a3864291"
                    }
                  }
                ]
              },
              {
                "id": "f9f07eec-990b-4b81-8a58-2a6fd8d102b6",
                "name": "Rescore Article (Below Range -2.0)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": -2.0\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91daa213-c578-49b2-b418-2ab4a0633826",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});"
                      ],
                      "_lastExecutionId": "5cbedc30-5ca1-4b9c-ad42-99af9e5d3a4f"
                    }
                  }
                ]
              },
              {
                "id": "ed4c8539-6025-4b22-a0b1-9c76237c86f9",
                "name": "Rescore Article (Above Range 1.1)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 1.1\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46c175c3-be4e-4f9a-86c2-327eab5ed412",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});"
                      ],
                      "_lastExecutionId": "1988442e-aa6a-4d33-928f-e471df99bda4"
                    }
                  }
                ]
              },
              {
                "id": "c21ff488-cf17-48a9-9ac2-b87c61d1e528",
                "name": "Rescore Article (Non-Numeric Score)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": \"not-a-number\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0d67944-ae8f-4b96-9b6a-d2496fbfd550",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});"
                      ],
                      "_lastExecutionId": "f3bf8c6e-c59f-4375-9815-e76f26167b14"
                    }
                  }
                ]
              },
              {
                "id": "3883acd8-0f58-48ca-bcd9-47cd0a81e2ee",
                "name": "Rescore Article (Empty JSON)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "reanalyze",
                      "{{invalidScoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d90fb349-e017-41f8-81b0-b4d29048d09f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 400\", function () {",
                        "    pm.expect([200, 400]).to.include(pm.response.code);",
                        "});"
                      ],
                      "_lastExecutionId": "9084aebe-ba96-4369-ae32-86ce69f7ebc8"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "f610008b-f5c2-4617-91d0-59690f55a73d",
            "name": "3.3 Score Progress Tests",
            "item": [
              {
                "id": "c52cc7b0-ce62-4eea-89c2-e80e67ddf7bf",
                "name": "Get Score Progress (SSE)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "llm",
                      "score-progress",
                      "{{rescoreArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60611323-5973-44e8-861b-0af224e1b7dd",
                      "type": "text/javascript",
                      "exec": [
                        "// Initialize test variables",
                        "let eventSource = null;",
                        "let receivedEvents = [];",
                        "const timeout = 30000; // 30 second timeout",
                        "",
                        "// Helper function to validate event data",
                        "function validateProgressEvent(event) {",
                        "    try {",
                        "        const data = JSON.parse(event.data);",
                        "        pm.expect(data).to.have.property('status');",
                        "        // Accept status values case-insensitively and allow underscores",
                        "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                        "        pm.expect(['inprogress', 'success', 'error']).to.include(status);",
                        "        if (status === 'inprogress') {",
                        "            pm.expect(data).to.have.property('percent');",
                        "            pm.expect(data.percent).to.be.a('number');",
                        "        }",
                        "        if (status === 'success') {",
                        "            pm.expect(data).to.have.property('final_score');",
                        "        }",
                        "        return true;",
                        "    } catch (e) {",
                        "        console.error('Invalid event data:', e);",
                        "        return false;",
                        "    }",
                        "}",
                        "",
                        "// Set up timeout",
                        "const timeoutId = setTimeout(() => {",
                        "    if (eventSource) eventSource.close();",
                        "    pm.test('Test completed within timeout', function() {",
                        "        pm.expect(receivedEvents.length).to.be.greaterThan(0, 'Should have received at least one event');",
                        "    });",
                        "}, timeout);",
                        "",
                        "// Initialize SSE connection",
                        "eventSource = new EventSource(pm.request.url.toString());",
                        "",
                        "// Event handlers",
                        "eventSource.addEventListener('message', function(event) {",
                        "    receivedEvents.push(event);",
                        "    const isValid = validateProgressEvent(event);",
                        "    pm.test('Event data is valid', function() {",
                        "        pm.expect(isValid).to.be.true;",
                        "    });",
                        "",
                        "    // Check for completion",
                        "    try {",
                        "        const data = JSON.parse(event.data);",
                        "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                        "        if (status === 'success' || status === 'error') {",
                        "            eventSource.close();",
                        "            clearTimeout(timeoutId);",
                        "            pm.test('Received completion event', function() {",
                        "                pm.expect(['success', 'error']).to.include(status);",
                        "                if (status === 'success') {",
                        "                    pm.expect(data).to.have.property('final_score');",
                        "                }",
                        "                if (status === 'error') {",
                        "                    pm.expect(data).to.have.property('error');",
                        "                }",
                        "            });",
                        "        }",
                        "    } catch (e) {",
                        "        console.error('Error parsing completion event:', e);",
                        "    }",
                        "});",
                        "",
                        "eventSource.addEventListener('error', function(err) {",
                        "    console.error('SSE Error:', err);",
                        "    eventSource.close();",
                        "    clearTimeout(timeoutId);",
                        "    pm.test('SSE connection error', function() {",
                        "        pm.expect.fail('SSE connection failed');",
                        "    });",
                        "});"
                      ],
                      "_lastExecutionId": "9c33c333-4d33-4084-990c-b1dcaaa4b3de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
        "name": "4. Manual Scoring Tests",
        "description": {
          "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
            "name": "4.1 Valid Manual Scoring",
            "request": {
              "url": {
                "path": [
                  "api",
                  "manual-score",
                  "{{manualScoreArticleId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"score\": 0.5\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31854c3a-b09d-45d0-856a-95051276c175",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 for valid manual score\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                }
              }
            ]
          },
          {
            "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
            "name": "4.2 Invalid: Missing Score Field",
            "request": {
              "url": {
                "path": [
                  "api",
                  "manual-score",
                  "{{manualScoreArticleId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for missing score\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message mentions missing score\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Missing score');",
                    "});"
                  ],
                  "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                }
              }
            ]
          },
          {
            "id": "84b85189-5b46-46a4-9a4b-42772479f624",
            "name": "4.3 Invalid: Non-numeric Score",
            "request": {
              "url": {
                "path": [
                  "api",
                  "manual-score",
                  "{{manualScoreArticleId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"score\": \"bad\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message mentions invalid score\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Invalid score');",
                    "});"
                  ],
                  "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                }
              }
            ]
          },
          {
            "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
            "name": "4.4 Invalid: Extra Fields",
            "request": {
              "url": {
                "path": [
                  "api",
                  "manual-score",
                  "{{manualScoreArticleId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for extra fields\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message mentions extra fields\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Extra fields');",
                    "});"
                  ],
                  "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                }
              }
            ]
          },
          {
            "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
            "name": "4.5 Invalid: Out-of-Range Score",
            "request": {
              "url": {
                "path": [
                  "api",
                  "manual-score",
                  "{{manualScoreArticleId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"score\": 2.0\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message mentions score range\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('Score out of range');",
                    "});"
                  ],
                  "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                }
              }
            ]
          },
          {
            "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
            "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
            "request": {
              "url": {
                "path": [
                  "api",
                  "llm",
                  "reanalyze",
                  "{{manualScoreArticleId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"score\": 0.5\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message mentions score field not allowed\", function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json.error.message).to.include('score field not allowed');",
                    "});"
                  ],
                  "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8d478c75-5e98-4f4e-9673-18025e0955d6",
        "name": "4. Debug Tests",
        "item": [
          {
            "id": "1b47f66c-888e-4597-a7cd-d2689fc0b94d",
            "name": "4.1 Debug Feedback Handler",
            "item": [
              {
                "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
                "name": "Get Database Schema",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "debug",
                      "schema"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains schema information\", function () {",
                        "    var json = pm.response.json();",
                        "    console.log(JSON.stringify(json, null, 2));",
                        "});"
                      ],
                      "_lastExecutionId": "97f7e916-7119-49b4-8fcc-f513485a70c6"
                    }
                  }
                ]
              },
              {
                "id": "1aafc649-1b82-443f-a6e5-b8e922a6b362",
                "name": "Submit Feedback - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "feedback"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "X-Debug",
                      "value": "true"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edd4bcb6-ed4a-4083-9d1a-196ac42622bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "2b212f92-6a57-4960-901e-d51f059414a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "17251066-8c31-483c-a6a2-3bd2222d91cb",
            "name": "4.2 Debug Article Creation",
            "item": [
              {
                "id": "3eab7d8e-3bc0-4689-adf6-6c1789c44391",
                "name": "Create Article - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "X-Debug",
                      "value": "true"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb87c094-0523-4c80-8938-cf37a2bfdd07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "    if (json.data && json.data.article_id) {",
                        "        pm.environment.set(\"debugArticleId\", json.data.article_id);",
                        "        console.log('Set debugArticleId to:', json.data.article_id);",
                        "    }",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "da4240fa-9174-408c-b857-a64beb07ebc7"
                    }
                  }
                ]
              },
              {
                "id": "86ad96a3-4b7c-4249-8114-6d8e7b1d4d8f",
                "name": "Get Article - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{debugArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc4edb51-9b01-4986-ab40-2856a1c8eaf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "5db7ccae-4e0d-4281-9060-963b92547214"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "201c926b-4631-4572-af0c-aec0e3527444",
            "name": "4.3 Debug Get Articles",
            "item": [
              {
                "id": "a81ab9a8-2677-42d0-b7bb-633d4a42e261",
                "name": "Get Articles - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "debug",
                        "value": "true"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8b4ceb7-f71b-475c-8295-20120c49d16e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response headers:', pm.response.headers.all());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Response structure:', Object.keys(json));",
                        "    if (json.data && Array.isArray(json.data)) {",
                        "        console.log('Number of articles:', json.data.length);",
                        "        if (json.data.length > 0) {",
                        "            console.log('First article structure:', Object.keys(json.data[0]));",
                        "            console.log('First article sample:', {",
                        "                id: json.data[0].id,",
                        "                title: json.data[0].title,",
                        "                source: json.data[0].source,",
                        "                composite_score: json.data[0].composite_score,",
                        "                confidence: json.data[0].confidence",
                        "            });",
                        "        }",
                        "    }",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                        "}"
                      ],
                      "_lastExecutionId": "f551d7b2-571e-4e01-919d-20ca56cb8315"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "210154cd-4be0-4c59-ae5a-be857d668edb",
            "name": "4.4 Debug Ensemble Details",
            "item": [
              {
                "id": "1510ebfc-a0eb-4160-a161-bc7cbe52de91",
                "name": "Get Ensemble Details - Debug",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{debugArticleId}}",
                      "ensemble"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "debug",
                        "value": "true"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49168db0-71af-4cfb-a8b0-0468163f6628",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Response received\", function () {",
                        "    console.log('Status code:', pm.response.code);",
                        "    console.log('Response body:', pm.response.text());",
                        "});",
                        "",
                        "try {",
                        "    var json = pm.response.json();",
                        "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                        "} catch (e) {",
                        "    console.log('Error parsing JSON:', e.message);",
                        "}"
                      ],
                      "_lastExecutionId": "fb3feba6-e0fa-4573-a389-b34c4706aabf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "e464f1c7-8f65-4876-9798-12fc07e6150b",
        "name": "5. Cache and Concurrency Tests",
        "item": [
          {
            "id": "da04f39f-e076-4459-806c-266f8cc4d311",
            "name": "5.1 Cache Validation Tests",
            "item": [
              {
                "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
                "name": "Get Article - Cache Hit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{articleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "// Store response time for cache hit comparison",
                        "var firstResponseTime = pm.response.responseTime;",
                        "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                        "",
                        "// Store ETag if present",
                        "var etag = pm.response.headers.get(\"ETag\");",
                        "if (etag) {",
                        "    pm.environment.set(\"articleEtag\", etag);",
                        "}"
                      ],
                      "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
                    }
                  }
                ]
              },
              {
                "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
                "name": "Get Article - Validate Cache Hit",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{articleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "If-None-Match",
                      "value": "{{articleEtag}}"
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 304 for cached response\", function () {",
                        "    pm.response.to.have.status(304);",
                        "});"
                      ],
                      "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
                    }
                  }
                ]
              },
              {
                "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
                "name": "Get Articles - Cache Performance",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "source",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "// Verify response time improvement from caching",
                        "var cachedResponseTime = pm.response.responseTime;",
                        "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                        "",
                        "pm.test(\"Cached response should be faster\", function () {",
                        "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                        "});"
                      ],
                      "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "d9632815-0850-416f-85a0-a1e66166fab0",
            "name": "5.2 Concurrent Operations Tests",
            "item": [
              {
                "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
                "name": "Concurrent Article Creation",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200 or 201\", function () {",
                        "    pm.expect([200, 201]).to.include(pm.response.code);",
                        "});",
                        "",
                        "// Store article ID for concurrent operations",
                        "var json = pm.response.json();",
                        "if (json.data && json.data.article_id) {",
                        "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                        "}"
                      ],
                      "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                    }
                  }
                ]
              },
              {
                "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
                "name": "Concurrent Score Updates",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "manual-score",
                      "{{concurrentArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"score\": 0.5\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response indicates successful update\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                    }
                  }
                ]
              },
              {
                "id": "3c83912c-948b-4907-b445-66cd93909668",
                "name": "Concurrent Feedback Submission",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "feedback"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Feedback submission successful\", function () {",
                        "    var json = pm.response.json();",
                        "    pm.expect(json.success).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "77808634-584d-4a9e-994b-7555f4252cf6",
        "name": "6. Confidence Validation Tests",
        "item": [
          {
            "id": "359dca70-dce0-4967-8dde-df13354192db",
            "name": "6.1 Initial Confidence Tests",
            "item": [
              {
                "id": "73c7328a-3a12-4914-8e7e-759febacc468",
                "name": "Create Article and Check Initial Confidence",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "var json = pm.response.json();",
                        "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                      ],
                      "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
                    }
                  }
                ]
              },
              {
                "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
                "name": "Get Article and Verify Initial Confidence Score",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{confidenceArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test(\"Initial confidence validation\", function () {",
                        "    var json = pm.response.json();",
                        "    var confidence = json.data.article.confidence;",
                        "    ",
                        "    pm.expect(confidence).to.exist;",
                        "    pm.expect(confidence).to.be.a('number');",
                        "    pm.expect(confidence).to.be.within(0, 1);",
                        "    pm.environment.set(\"initialConfidence\", confidence);",
                        "});"
                      ],
                      "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "3e0b1eff-abe8-490e-901b-fa8f24006b11",
            "name": "6.2 Feedback Impact on Confidence",
            "item": [
              {
                "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
                "name": "Submit Initial Feedback",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "feedback"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});"
                      ],
                      "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
                    }
                  }
                ]
              },
              {
                "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
                "name": "Submit Multiple Feedback Items",
                "item": [
                  {
                    "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
                    "name": "Submit Agree Feedback",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "feedback"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});"
                          ],
                          "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
                    "name": "Submit Additional Agree Feedback",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "feedback"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});"
                          ],
                          "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
                "name": "Verify Confidence After Feedback",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{confidenceArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "var json = pm.response.json();",
                        "var currentConfidence = json.data.article.confidence;",
                        "",
                        "if (currentConfidence > 0) {",
                        "    pm.test(\"Confidence updated after feedback\", function () {",
                        "        pm.expect(currentConfidence).to.be.within(0, 1);",
                        "        pm.expect(currentConfidence).to.be.above(0);",
                        "    });",
                        "} else {",
                        "    // Set delay for retry",
                        "    setTimeout(function(){}, 1000);",
                        "}"
                      ],
                      "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
                    }
                  }
                ]
              },
              {
                "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
                "name": "Second Confidence Check",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "articles",
                      "{{confidenceArticleId}}"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test(\"Final confidence validation\", function () {",
                        "    var json = pm.response.json();",
                        "    var currentConfidence = json.data.article.confidence;",
                        "    ",
                        "    pm.expect(currentConfidence).to.exist;",
                        "    pm.expect(currentConfidence).to.be.a('number');",
                        "    pm.expect(currentConfidence).to.be.within(0, 1);",
                        "    ",
                        "    // Log confidence value for debugging",
                        "    console.log('Final confidence value:', currentConfidence);",
                        "});"
                      ],
                      "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "08320825-59ea-44b2-9272-db7df885cea4",
      "name": "Unified Backend Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive test suite for the News Filter backend API, including article creation, feedback, rescoring, and debugging functionality. Manual scoring and LLM rescoring are fully separated, with independent endpoints and strict error handling to ensure no cross-compatibility. The test plan covers all valid and invalid flows for both manual and LLM-based rescoring.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "local-env",
    "name": "Local Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": 3977,
        "key": "articleId"
      },
      {
        "type": "any",
        "value": 3978,
        "key": "rescoreArticleId"
      },
      {
        "type": "any",
        "value": 3979,
        "key": "invalidScoreArticleId"
      },
      {
        "type": "any",
        "value": null,
        "key": "firstResponseTime"
      }
    ]
  },
  "globals": {
    "id": "fd83872b-adea-4138-a138-50ee35ad150a",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 48,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 48,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 48,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 48,
        "pending": 0,
        "failed": 26
      },
      "tests": {
        "total": 48,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 69,
        "pending": 0,
        "failed": 37
      },
      "testScripts": {
        "total": 48,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 178.1818181818182,
      "responseMin": 3,
      "responseMax": 3351,
      "responseSd": 695.1645741290093,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1745423384673,
      "completed": 1745424631124
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 48,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "45884aea-f492-430b-bf46-c7c356943df8",
          "httpRequestId": "3b63bb3e-80ca-40ea-8496-e399ed6c75ea"
        },
        "item": {
          "id": "651939c1-3766-4b5c-85cd-b802f85b9d5f",
          "name": "Create Article - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7fc560a1-db29-4338-8967-44480d2868a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "f67bf362-8841-46dc-bfe7-3c33714da6e4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "676ef7c6-85cd-408b-b84c-342e31362641",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "69",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\"\n}"
          }
        },
        "response": {
          "id": "f15d8a85-4d81-4097-ae0f-75f348197ff3",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:44 GMT"
            },
            {
              "key": "Content-Length",
              "value": "112"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              77,
              105,
              115,
              115,
              105,
              110,
              103,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              58,
              32,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              32,
              117,
              114,
              108,
              44,
              32,
              112,
              117,
              98,
              95,
              100,
              97,
              116,
              101,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 44,
          "responseSize": 112
        },
        "id": "651939c1-3766-4b5c-85cd-b802f85b9d5f",
        "assertions": [
          {
            "assertion": "Status code is 400 for missing fields",
            "skipped": false
          },
          {
            "assertion": "Response contains error about missing fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9000b410-5ee8-41e6-8362-351c2eb352fe",
          "length": 48,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "55e1e603-6f79-4326-8e96-3e8c3775a50f"
        },
        "item": {
          "id": "d83d5797-2ffc-4421-b704-7feb6e8301f2",
          "name": "Create Article - Invalid URL Format",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32997191-871f-4fd2-9ea0-11534a23cf3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid URL\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid URL format');",
                  "});"
                ],
                "_lastExecutionId": "4ac3c1c2-63e1-4ff9-9938-28842b7d6fe2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5267fff5-2040-40ac-ae21-5e9270531f16",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "155",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"invalid-url\",\n  \"pub_date\": \"2025-04-23T15:49:44.832Z\"\n}"
          }
        },
        "response": {
          "id": "dcbb824c-4b89-42c3-b6c0-890b6e9e859e",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:44 GMT"
            },
            {
              "key": "Content-Length",
              "value": "122"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              85,
              82,
              76,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              32,
              40,
              109,
              117,
              115,
              116,
              32,
              115,
              116,
              97,
              114,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              32,
              111,
              114,
              32,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              41,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 122
        },
        "id": "d83d5797-2ffc-4421-b704-7feb6e8301f2",
        "assertions": [
          {
            "assertion": "Status code is 400 for invalid URL",
            "skipped": false
          },
          {
            "assertion": "Response contains error about invalid URL",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "25140103-c0cf-4f1f-af2c-bbb0521c93fe",
          "length": 48,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "386f753c-5268-4dd6-a4cd-81db6ae02b3d"
        },
        "item": {
          "id": "763701d0-41e6-43a3-ad5a-3ebb5936c9ca",
          "name": "Create Article - Valid",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d4eabf2-6860-4194-a5bf-642f93c6d670",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"articleId\", json.data.article_id);",
                  "}"
                ],
                "_lastExecutionId": "ccafe8b4-c127-4abf-9f1c-456a39d24f10"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44c7e098-c844-4920-91a5-be5251720c1a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "179",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article\",\n  \"content\": \"This is a test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-1745423385\",\n  \"pub_date\": \"2025-04-23T15:49:44.945Z\"\n}"
          }
        },
        "response": {
          "id": "1d11db55-493d-4706-8db9-79fd213b6941",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:44 GMT"
            },
            {
              "key": "Content-Length",
              "value": "62"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              55,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 62
        },
        "id": "763701d0-41e6-43a3-ad5a-3ebb5936c9ca",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b12e6073-4673-40ba-aad5-c3f18f494886",
          "length": 48,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1a7debb4-a3f0-43bd-8237-d8f7746900e3"
        },
        "item": {
          "id": "df75f1e5-bf3d-4499-b858-15b88a2dffe5",
          "name": "Create Article - Duplicate URL",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d332831c-3acf-481a-85f1-5a1acb85bd1d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409 for duplicate URL\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about duplicate URL\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "49f6e5a8-5de4-4a42-80ac-3136e6c9a993"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6bfe6e6f-89f0-4b05-916e-0c057bc95ecb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "199",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article Duplicate\",\n  \"content\": \"This is a duplicate test article.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/test-1745423385\",\n  \"pub_date\": \"2025-04-23T15:49:45.056Z\"\n}"
          }
        },
        "response": {
          "id": "46d1bcde-e656-4f92-8451-331d690910d5",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "100"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              99,
              111,
              110,
              102,
              108,
              105,
              99,
              116,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              105,
              115,
              32,
              85,
              82,
              76,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 100
        },
        "id": "df75f1e5-bf3d-4499-b858-15b88a2dffe5",
        "assertions": [
          {
            "assertion": "Status code is 409 for duplicate URL",
            "skipped": false
          },
          {
            "assertion": "Response contains error about duplicate URL",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "28fcb3a2-28c4-4eb3-9b4f-a9118c96cc1c",
          "length": 48,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "594c974e-ea39-4874-b6d4-9248c362e328"
        },
        "item": {
          "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af7597b5-cd13-4fee-935d-c76a49073930",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e018b3bf-9e1b-41f5-9de8-98694aee1c51",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "49f49489-6e64-412e-9991-0bb8457a8871",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              55,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              57,
              58,
              52,
              52,
              46,
              57,
              52,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              56,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              57,
              58,
              52,
              52,
              46,
              57,
              55,
              50,
              51,
              56,
              52,
              56,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              54,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              54,
              46,
              53,
              55,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              55,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              54,
              46,
              53,
              57,
              57,
              52,
              53,
              56,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              55,
              57,
              54,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              54,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              56,
              49,
              57,
              52,
              55,
              56,
              52,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              48,
              51,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              48,
              53,
              50,
              51,
              55,
              51,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              53,
              46,
              48,
              54,
              50,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              53,
              46,
              48,
              56,
              48,
              56,
              55,
              52,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              50,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              52,
              46,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              52,
              46,
              51,
              51,
              51,
              51,
              56,
              48,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              49,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              51,
              46,
              54,
              48,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              51,
              46,
              54,
              50,
              48,
              49,
              52,
              52,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              57,
              54,
              57,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              50,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              57,
              57,
              51,
              51,
              52,
              54,
              56,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              49,
              54,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              49,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              49,
              57,
              53,
              51,
              56,
              53,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              48,
              46,
              50,
              52,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              48,
              46,
              50,
              54,
              56,
              48,
              53,
              54,
              55,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              50,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              57,
              46,
              51,
              56,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              57,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              57,
              46,
              52,
              48,
              52,
              57,
              50,
              52,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              49,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              56,
              46,
              53,
              56,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              57,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              56,
              46,
              53,
              57,
              56,
              53,
              55,
              54,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              48,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              55,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              56,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              55,
              46,
              56,
              53,
              53,
              56,
              52,
              55,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              57,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              54,
              58,
              48,
              48,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              115,
              115,
              101,
              45,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              54,
              53,
              50,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              83,
              69,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              55,
              58,
              51,
              50,
              46,
              51,
              50,
              55,
              50,
              50,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              56,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              56,
              55,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              56,
              56,
              55,
              57,
              53,
              53,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              55,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              49,
              51,
              57,
              56,
              49,
              53,
              55,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              54,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              51,
              46,
              50,
              56,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              51,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              51,
              46,
              51,
              48,
              52,
              54,
              49,
              50,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              48,
              48,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              115,
              115,
              101,
              45,
              116,
              101,
              115,
              116,
              45,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              83,
              69,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              83,
              83,
              69,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              50,
              58,
              48,
              52,
              46,
              56,
              50,
              54,
              57,
              51,
              53,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              52,
              50,
              57,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              54,
              50,
              57,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              52,
              52,
              55,
              48,
              56,
              53,
              57,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              50,
              52,
              58,
              52,
              57,
              46,
              53,
              55,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              54,
              50,
              57,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              52,
              57,
              46,
              53,
              55,
              57,
              54,
              55,
              50,
              50,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 46,
          "responseSize": 7362
        },
        "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains articles",
            "skipped": false
          },
          {
            "assertion": "Articles have composite_score and confidence",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Articles have composite_score and confidence",
              "message": "expected undefined not to be undefined",
              "stack": "AssertionError: expected undefined not to be undefined\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd10e584-bc6d-4dfe-a4d4-03f2ca4087bf",
          "length": 48,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ee6a8a9e-1b28-4072-b3f0-74d25e556042"
        },
        "item": {
          "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
          "name": "Get Articles - With Source Filter",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "source",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0f3d6ee5-0a39-46cb-9660-09d66e71f3a1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "af06712a-4e72-4c7a-b5f2-54d958fc3ea8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              55,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              57,
              58,
              52,
              52,
              46,
              57,
              52,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              56,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              57,
              58,
              52,
              52,
              46,
              57,
              55,
              50,
              51,
              56,
              52,
              56,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              54,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              54,
              46,
              53,
              55,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              55,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              54,
              46,
              53,
              57,
              57,
              52,
              53,
              56,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              55,
              57,
              54,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              54,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              56,
              49,
              57,
              52,
              55,
              56,
              52,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              48,
              51,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              48,
              53,
              50,
              51,
              55,
              51,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              53,
              46,
              48,
              54,
              50,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              53,
              46,
              48,
              56,
              48,
              56,
              55,
              52,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              50,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              52,
              46,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              52,
              46,
              51,
              51,
              51,
              51,
              56,
              48,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              49,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              51,
              46,
              54,
              48,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              51,
              46,
              54,
              50,
              48,
              49,
              52,
              52,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              57,
              54,
              57,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              50,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              57,
              57,
              51,
              51,
              52,
              54,
              56,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              49,
              54,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              49,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              49,
              57,
              53,
              51,
              56,
              53,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              48,
              46,
              50,
              52,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              48,
              46,
              50,
              54,
              56,
              48,
              53,
              54,
              55,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              50,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              57,
              46,
              51,
              56,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              57,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              57,
              46,
              52,
              48,
              52,
              57,
              50,
              52,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              49,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              56,
              46,
              53,
              56,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              57,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              56,
              46,
              53,
              57,
              56,
              53,
              55,
              54,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              48,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              55,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              56,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              55,
              46,
              56,
              53,
              53,
              56,
              52,
              55,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              57,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              54,
              58,
              48,
              48,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              115,
              115,
              101,
              45,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              54,
              53,
              50,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              83,
              69,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              55,
              58,
              51,
              50,
              46,
              51,
              50,
              55,
              50,
              50,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              56,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              56,
              55,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              56,
              56,
              55,
              57,
              53,
              53,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              55,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              49,
              51,
              57,
              56,
              49,
              53,
              55,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              54,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              51,
              46,
              50,
              56,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              51,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              51,
              46,
              51,
              48,
              52,
              54,
              49,
              50,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              48,
              48,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              115,
              115,
              101,
              45,
              116,
              101,
              115,
              116,
              45,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              83,
              69,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              83,
              83,
              69,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              50,
              58,
              48,
              52,
              46,
              56,
              50,
              54,
              57,
              51,
              53,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              52,
              50,
              57,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              54,
              50,
              57,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              52,
              52,
              55,
              48,
              56,
              53,
              57,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              50,
              52,
              58,
              52,
              57,
              46,
              53,
              55,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              54,
              50,
              57,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              52,
              57,
              46,
              53,
              55,
              57,
              54,
              55,
              50,
              50,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 7362
        },
        "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains articles with correct source",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains articles with correct source",
              "message": "expected undefined to equal 'test'",
              "stack": "AssertionError: expected undefined to equal 'test'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b32b7127-78b0-4872-ba29-31a36cd2b06d",
          "length": 48,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0736d177-f854-4176-a387-ba50bf2b73bb"
        },
        "item": {
          "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
          "name": "Get Articles - Cache Test",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "source",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8085263c-296d-4d74-b7de-18da3c0cd5ca",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bfad08a0-dcdd-4493-9cf8-7d73751e1202",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              55,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              57,
              58,
              52,
              52,
              46,
              57,
              52,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              56,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              57,
              58,
              52,
              52,
              46,
              57,
              55,
              50,
              51,
              56,
              52,
              56,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              54,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              54,
              46,
              53,
              55,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              55,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              54,
              46,
              53,
              57,
              57,
              52,
              53,
              56,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              55,
              57,
              54,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              54,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              56,
              49,
              57,
              52,
              55,
              56,
              52,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              48,
              51,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              50,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              52,
              53,
              46,
              48,
              53,
              50,
              51,
              55,
              51,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              53,
              46,
              48,
              54,
              50,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              53,
              46,
              48,
              56,
              48,
              56,
              55,
              52,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              50,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              52,
              46,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              52,
              46,
              51,
              51,
              51,
              51,
              56,
              48,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              49,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              48,
              58,
              52,
              51,
              46,
              54,
              48,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              50,
              56,
              52,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              48,
              58,
              52,
              51,
              46,
              54,
              50,
              48,
              49,
              52,
              52,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              57,
              54,
              57,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              50,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              57,
              57,
              51,
              51,
              52,
              54,
              56,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              49,
              54,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              49,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              49,
              46,
              49,
              57,
              53,
              51,
              56,
              53,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              48,
              49,
              58,
              50,
              48,
              46,
              50,
              52,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              48,
              52,
              56,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              48,
              49,
              58,
              50,
              48,
              46,
              50,
              54,
              56,
              48,
              53,
              54,
              55,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              50,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              57,
              46,
              51,
              56,
              53,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              57,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              57,
              46,
              52,
              48,
              52,
              57,
              50,
              52,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              49,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              56,
              46,
              53,
              56,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              57,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              56,
              46,
              53,
              57,
              56,
              53,
              55,
              54,
              49,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              50,
              48,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              56,
              58,
              50,
              55,
              46,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              55,
              48,
              56,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              56,
              58,
              50,
              55,
              46,
              56,
              53,
              53,
              56,
              52,
              55,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              57,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              54,
              58,
              48,
              48,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              115,
              115,
              101,
              45,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              54,
              53,
              50,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              83,
              69,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              55,
              58,
              51,
              50,
              46,
              51,
              50,
              55,
              50,
              50,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              56,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              56,
              55,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              56,
              56,
              55,
              57,
              53,
              53,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              55,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              52,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              52,
              46,
              49,
              51,
              57,
              56,
              49,
              53,
              55,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              54,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              52,
              51,
              58,
              49,
              51,
              46,
              50,
              56,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              116,
              101,
              115,
              116,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              55,
              51,
              57,
              51,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              51,
              58,
              49,
              51,
              46,
              51,
              48,
              52,
              54,
              49,
              50,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              53,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              48,
              48,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              115,
              115,
              101,
              45,
              116,
              101,
              115,
              116,
              45,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              83,
              69,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              83,
              83,
              69,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              52,
              50,
              58,
              48,
              52,
              46,
              56,
              50,
              54,
              57,
              51,
              53,
              53,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              52,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              52,
              50,
              57,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              54,
              50,
              57,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              83,
              99,
              111,
              114,
              101,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              52,
              52,
              55,
              48,
              56,
              53,
              57,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              49,
              51,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              49,
              56,
              58,
              50,
              52,
              58,
              52,
              57,
              46,
              53,
              55,
              49,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              51,
              52,
              54,
              50,
              57,
              48,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              50,
              84,
              50,
              49,
              58,
              50,
              52,
              58,
              52,
              57,
              46,
              53,
              55,
              57,
              54,
              55,
              50,
              50,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 7362
        },
        "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains articles with correct source",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains articles with correct source",
              "message": "expected undefined to equal 'test'",
              "stack": "AssertionError: expected undefined to equal 'test'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9a0e0394-4af7-409c-bc1b-dac1eb853568",
          "length": 48,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5322afda-4f57-4198-96a5-ae78c9897bc9"
        },
        "item": {
          "id": "77365fb8-2a34-4cee-8f27-2ffe7b60c045",
          "name": "Get Ensemble Details",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}",
                "ensemble"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "97fd9a24-57fe-4fab-94d6-e4d8c7de1ac6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains ensemble data\", function () {",
                  "        var json = pm.response.json();",
                  "        pm.expect(json.success).to.be.true;",
                  "        pm.expect(json.data).to.have.property('ensembles');",
                  "        pm.expect(json.data.ensembles).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "81db780a-f17d-457b-bb5a-4ca4b79940d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "3977",
              "ensemble"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c34c2c7e-7535-44e5-97ca-7b933b02c9d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fe5d7e93-c3ae-4f5c-9c07-bf57d8f2f41d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "82"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              110,
              111,
              116,
              95,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              110,
              115,
              101,
              109,
              98,
              108,
              101,
              32,
              100,
              97,
              116,
              97,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 82
        },
        "id": "77365fb8-2a34-4cee-8f27-2ffe7b60c045",
        "assertions": [
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b8307ab7-27bc-4bd9-927d-ca512f9cbcf6",
          "length": 48,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5dea0168-43b6-4eaf-a911-e616608a0a5a"
        },
        "item": {
          "id": "06f610c0-ba66-490b-b5f7-2cc0058c0fd0",
          "name": "Submit Feedback - Missing Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a2b1656-9eb7-4f76-b6cd-319dac76492c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about missing fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing required fields');",
                  "});"
                ],
                "_lastExecutionId": "3dca2203-1ccd-423a-852f-97eea698a8ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "afccec4c-1bb9-4aad-b295-6d5b330da854",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "24",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": 3977\n}"
          }
        },
        "response": {
          "id": "4385ef50-8817-4cc6-9e73-fff256f74136",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "113"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              77,
              105,
              115,
              115,
              105,
              110,
              103,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              58,
              32,
              102,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              95,
              116,
              101,
              120,
              116,
              44,
              32,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 113
        },
        "id": "06f610c0-ba66-490b-b5f7-2cc0058c0fd0",
        "assertions": [
          {
            "assertion": "Status code is 400 for missing fields",
            "skipped": false
          },
          {
            "assertion": "Response contains error about missing fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2253471d-f2f7-400f-9285-889dce2f1bbc",
          "length": 48,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a277114e-9417-4244-83e5-2bea4399822e"
        },
        "item": {
          "id": "1f261976-197a-4f3a-adc0-889ff8af9409",
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb842699-c185-4b9a-ace2-a653d07ab0ea",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid category');",
                  "});"
                ],
                "_lastExecutionId": "af1c12c2-96b8-4264-a3ed-35aabcaf72ee"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aac71328-aeff-4638-90c4-d576c37ea4df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "131",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": 3977,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
          }
        },
        "response": {
          "id": "83f604a0-f709-4eda-b76c-3d219a3a5500",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "140"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              102,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              32,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              46,
              32,
              77,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              111,
              110,
              101,
              32,
              111,
              102,
              58,
              32,
              97,
              103,
              114,
              101,
              101,
              44,
              32,
              100,
              105,
              115,
              97,
              103,
              114,
              101,
              101,
              44,
              32,
              117,
              110,
              99,
              108,
              101,
              97,
              114,
              44,
              32,
              111,
              116,
              104,
              101,
              114,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 140
        },
        "id": "1f261976-197a-4f3a-adc0-889ff8af9409",
        "assertions": [
          {
            "assertion": "Status code is 400 for invalid category",
            "skipped": false
          },
          {
            "assertion": "Response contains error about invalid category",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains error about invalid category",
              "message": "expected 'Invalid feedback category. Must be on…' to include 'Invalid category'",
              "stack": "AssertionError: expected 'Invalid feedback category. Must be on…' to include 'Invalid category'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a7c6dbff-670b-4c65-bc2f-fc001a536332",
          "length": 48,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "75bdf05c-22ae-42b0-82d1-a4dcb8a8f1b8"
        },
        "item": {
          "id": "3be100d6-0cab-4ac0-8760-d9704270fb6a",
          "name": "Submit Feedback - Valid",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7fef76a0-cb51-4c98-aecb-aa0eb95972e8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid feedback\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "54fc1dcd-d604-4c28-a498-4c3ca03e77c3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a1f3cae8-abbf-462b-8f22-7f3168e1a551",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "140",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": 3977,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "response": {
          "id": "15ff7d84-8861-4200-ad53-d43b256786d7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "54"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              102,
              101,
              101,
              100,
              98,
              97,
              99,
              107,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 54
        },
        "id": "3be100d6-0cab-4ac0-8760-d9704270fb6a",
        "assertions": [
          {
            "assertion": "Status code is 200 for valid feedback",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7622b703-e401-4b5b-aa36-34f98bec5bca",
          "length": 48,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3bc2a043-1249-4343-ae62-cd27959b4291"
        },
        "item": {
          "id": "4d509159-95bc-4b7d-ad2f-ad0d3f14cb7e",
          "name": "Create Article for Rescoring",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8f177b9-cd67-4e4c-8696-4eb34a30c94b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"rescoreArticleId\");",
                  "}"
                ],
                "_lastExecutionId": "7414c618-457d-4c12-9ad2-24e4e9fe1ca8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44b1e4dd-ba90-4ae4-a3fb-07078f604fe0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "216",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-1745423386\",\n  \"pub_date\": \"2025-04-23T15:49:45.817Z\",\n  \"source\": \"test\"\n}"
          }
        },
        "response": {
          "id": "1d9602ac-fe92-41d6-864e-b4ecb6e1e177",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "62"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              56,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 62
        },
        "id": "4d509159-95bc-4b7d-ad2f-ad0d3f14cb7e",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e460cefb-2f11-44dc-a117-b9e9f15710d6",
          "length": 48,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d056c3e3-6e26-4abb-ad2a-3da881d92cc4"
        },
        "item": {
          "id": "3ff6ee62-9656-4e6f-aac5-8fa57be6a168",
          "name": "Rescore Article (Valid Score 0.5)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dac7fae4-1c62-44ea-b238-6c3e7637f0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "1d136b4b-d5f2-4592-aa90-b89c3dc653ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3978"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "33f54d8e-203a-4627-bb5f-e766114c1f61",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "18",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "response": {
          "id": "2f855e76-2b9a-45dc-bee2-8c60b1a2229a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "80"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              56,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              53,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              99,
              111,
              114,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 80
        },
        "id": "3ff6ee62-9656-4e6f-aac5-8fa57be6a168",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "92334f6b-e8aa-4d98-aef6-fbe6299f7c2a",
          "length": 48,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a659ce7f-55aa-4a55-8dc1-513c14591bbc"
        },
        "item": {
          "id": "0f77535c-24a7-4f77-90c4-2773ff8c8e08",
          "name": "Get Article (Verify Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8854ad5f-a8b9-4c3e-81b5-4eadef21931c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                  "pm.test(\"Score updated to 0.5\", function () {",
                  "    // The API might return the score in different locations based on the response structure",
                  "    // Try different paths where the score might be found",
                  "    var score = null;",
                  "    if (json.data && json.data.composite_score !== undefined) {",
                  "        score = json.data.composite_score;",
                  "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                  "        score = json.data.article.CompositeScore;",
                  "    } else if (json.composite_score !== undefined) {",
                  "        score = json.composite_score;",
                  "    } else if (json.score !== undefined) {",
                  "        score = json.score;",
                  "    }",
                  "    pm.expect(score).to.eql(0.5);",
                  "});"
                ],
                "_lastExecutionId": "49da24cc-3841-407c-a0cc-9894c6f29418"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "3978"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "99f5a276-27a9-4b5c-a25e-a72f993c6340",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a49fa8f3-0c3e-490f-a331-26929a402aea",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "484"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              58,
              123,
              34,
              73,
              68,
              34,
              58,
              51,
              57,
              55,
              56,
              44,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              80,
              117,
              98,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              53,
              58,
              52,
              57,
              58,
              52,
              53,
              46,
              56,
              49,
              55,
              90,
              34,
              44,
              34,
              85,
              82,
              76,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              114,
              101,
              115,
              99,
              111,
              114,
              101,
              45,
              49,
              55,
              52,
              53,
              52,
              50,
              51,
              51,
              56,
              54,
              34,
              44,
              34,
              84,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              82,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              115,
              99,
              111,
              114,
              105,
              110,
              103,
              32,
              116,
              101,
              115,
              116,
              115,
              46,
              34,
              44,
              34,
              67,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              83,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              53,
              44,
              34,
              67,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              50,
              51,
              84,
              49,
              56,
              58,
              52,
              57,
              58,
              52,
              53,
              46,
              56,
              52,
              52,
              48,
              49,
              56,
              54,
              43,
              48,
              51,
              58,
              48,
              48,
              34,
              44,
              34,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              70,
              97,
              105,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              76,
              97,
              115,
              116,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              69,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              83,
              99,
              111,
              114,
              101,
              83,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              125,
              44,
              34,
              99,
              111,
              109,
              112,
              111,
              115,
              105,
              116,
              101,
              95,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              44,
              34,
              99,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              49,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              34,
              108,
              108,
              109,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 484
        },
        "id": "0f77535c-24a7-4f77-90c4-2773ff8c8e08",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Score updated to 0.5",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Score updated to 0.5",
              "message": "expected +0 to deeply equal 0.5",
              "stack": "AssertionError: expected +0 to deeply equal 0.5\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "af7617f7-cdc1-4ad9-8703-3bad1d28006e",
          "length": 48,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a1cd316f-05fb-4334-ae93-fb187325ba6d"
        },
        "item": {
          "id": "ab53c575-1ab4-469a-9c0d-246db2b8f6d6",
          "name": "Rescore Article (Upper Boundary 1.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c07588d-209f-461c-9b83-360148f77557",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "2967b334-de4e-4760-8500-399ed0b1d44c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3978"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4fa372b6-dbf4-47a2-a370-c5ade2ea0b7f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "18",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 1.0\n}"
          }
        },
        "response": {
          "id": "098094f1-e63c-4e97-87c0-6ab4e0ddc1d7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "78"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              56,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              49,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              99,
              111,
              114,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 78
        },
        "id": "ab53c575-1ab4-469a-9c0d-246db2b8f6d6",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9449b222-3c69-4db7-8c0a-129eb8cf39ce",
          "length": 48,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d4482e30-4698-4b37-a4ec-3c0a5f98a115"
        },
        "item": {
          "id": "87e23fe0-578b-453e-9909-2d623df5dc89",
          "name": "Rescore Article (Lower Boundary -1.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -1.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66d82a29-c2cc-40a2-9e9c-85bfa6beed3a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "fd67d57a-1c10-43f3-bdef-02d17506e7b9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3978"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "baf84748-73b8-48d7-9d74-e9dba6a27113",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "19",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": -1.0\n}"
          }
        },
        "response": {
          "id": "f05af025-c287-4398-acc0-0b607f1609e3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "79"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              56,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              45,
              49,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              99,
              111,
              114,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 79
        },
        "id": "87e23fe0-578b-453e-9909-2d623df5dc89",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2b1fe600-301a-4380-a869-8c8edacc6c2d",
          "length": 48,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "38bdd59a-2bf4-4955-9e6d-7a17b118954d"
        },
        "item": {
          "id": "c73b6638-47be-4abc-bd29-93fc0db3f2e2",
          "name": "Rescore Non-existent Article",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "999999"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52b66e40-be97-44f9-bd22-49fb566f0594",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "_lastExecutionId": "d74ed3e5-a510-4c7f-9ae7-c21372e08f7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "999999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ed8d7d9b-f49c-4a68-ab1d-89a992adeac6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "18",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "response": {
          "id": "4f036452-7aaf-495e-89c3-31efae5e2b40",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "76"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              110,
              111,
              116,
              95,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              114,
              116,
              105,
              99,
              108,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 308,
          "responseSize": 76
        },
        "id": "c73b6638-47be-4abc-bd29-93fc0db3f2e2",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "77a2b6fb-4fce-4ebb-83b6-697e6c8626a4",
          "length": 48,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "eefb91f0-f533-4869-96cc-b0daa3936978"
        },
        "item": {
          "id": "97c84751-ae76-4187-aa9c-585e8db26c56",
          "name": "Create Article for Invalid Score Tests",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cefca47d-68ec-4377-8cd4-db8bcad357a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var json = pm.response.json();",
                  "    pm.environment.set(\"invalidScoreArticleId\", json.data.article_id);",
                  "} else {",
                  "    pm.environment.unset(\"invalidScoreArticleId\");",
                  "}"
                ],
                "_lastExecutionId": "509ffa38-b47c-49f8-85ab-7186a3864291"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "160b4a51-4fc9-4f02-b98b-4434be4e3af9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "230",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Article for Invalid Score\",\n  \"content\": \"This is a test article for invalid score tests.\",\n  \"url\": \"https://example.com/invalid-score-1745423387\",\n  \"pub_date\": \"2025-04-23T15:49:46.632Z\",\n  \"source\": \"test\"\n}"
          }
        },
        "response": {
          "id": "69873c39-9a7a-4dbb-a135-af5a3bdfc0f3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "62"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              57,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 62
        },
        "id": "97c84751-ae76-4187-aa9c-585e8db26c56",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "af5e9055-9a55-49bc-80b5-d509ee38aacc",
          "length": 48,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "52099cec-b767-410f-8823-26350dc04660"
        },
        "item": {
          "id": "f9f07eec-990b-4b81-8a58-2a6fd8d102b6",
          "name": "Rescore Article (Below Range -2.0)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": -2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91daa213-c578-49b2-b418-2ab4a0633826",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "5cbedc30-5ca1-4b9c-ad42-99af9e5d3a4f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3979"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "11f39c91-3885-4f77-9ec9-ba6f1bab7364",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "19",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": -2.0\n}"
          }
        },
        "response": {
          "id": "4d383afc-e25a-4e8a-b9f2-c31adbafa61f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "100"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              99,
              111,
              114,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              32,
              45,
              49,
              46,
              48,
              32,
              97,
              110,
              100,
              32,
              49,
              46,
              48,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 100
        },
        "id": "f9f07eec-990b-4b81-8a58-2a6fd8d102b6",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5352f1e3-6715-4047-bc43-4c0e2805f02b",
          "length": 48,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3195016b-3fba-4c84-abab-7a6a10c7bc19"
        },
        "item": {
          "id": "ed4c8539-6025-4b22-a0b1-9c76237c86f9",
          "name": "Rescore Article (Above Range 1.1)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 1.1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46c175c3-be4e-4f9a-86c2-327eab5ed412",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "1988442e-aa6a-4d33-928f-e471df99bda4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3979"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "783a9547-c18e-4993-ab7d-3fe63d85db81",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "18",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 1.1\n}"
          }
        },
        "response": {
          "id": "a8bf7b64-c117-4148-93a0-b0adc097c1ea",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "100"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              99,
              111,
              114,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              32,
              45,
              49,
              46,
              48,
              32,
              97,
              110,
              100,
              32,
              49,
              46,
              48,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 100
        },
        "id": "ed4c8539-6025-4b22-a0b1-9c76237c86f9",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a2c46674-3e64-4c55-9fa0-a1c5ed4df3dc",
          "length": 48,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7235cf7a-6c7c-4260-9d57-ada8c35c9ce0"
        },
        "item": {
          "id": "c21ff488-cf17-48a9-9ac2-b87c61d1e528",
          "name": "Rescore Article (Non-Numeric Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"not-a-number\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e0d67944-ae8f-4b96-9b6a-d2496fbfd550",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "f3bf8c6e-c59f-4375-9815-e76f26167b14"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3979"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f91e4551-dd0b-4867-a35b-9379dfbdfee8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "29",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": \"not-a-number\"\n}"
          }
        },
        "response": {
          "id": "c98a69ac-bdff-4bf1-ba2a-b6c04bf3b951",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:46 GMT"
            },
            {
              "key": "Content-Length",
              "value": "85"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              99,
              111,
              114,
              101,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 85
        },
        "id": "c21ff488-cf17-48a9-9ac2-b87c61d1e528",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b2aab531-dfbf-400c-8266-94aadb3378ec",
          "length": 48,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d4e99eb7-52de-4873-ab0c-37a5db8db393"
        },
        "item": {
          "id": "3883acd8-0f58-48ca-bcd9-47cd0a81e2ee",
          "name": "Rescore Article (Empty JSON)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{invalidScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d90fb349-e017-41f8-81b0-b4d29048d09f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});"
                ],
                "_lastExecutionId": "9084aebe-ba96-4369-ae32-86ce69f7ebc8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "3979"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e37f9c29-d348-4d78-bb6f-cdbf023bc680",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "2",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{}"
          }
        },
        "response": {
          "id": "c307e880-88d0-4d2f-a125-7e90e7f5f00c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Wed, 23 Apr 2025 15:49:50 GMT"
            },
            {
              "key": "Content-Length",
              "value": "71"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              57,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              114,
              101,
              97,
              110,
              97,
              108,
              121,
              122,
              101,
              32,
              113,
              117,
              101,
              117,
              101,
              100,
              34,
              125,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3351,
          "responseSize": 71
        },
        "id": "3883acd8-0f58-48ca-bcd9-47cd0a81e2ee",
        "assertions": [
          {
            "assertion": "Status code is 200 or 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a7383901-0b04-44ad-9aa6-62d1bb1030c6",
          "length": 48,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3ab23635-3944-428e-9eb5-2033a9aa7dff"
        },
        "item": {
          "id": "c52cc7b0-ce62-4eea-89c2-e80e67ddf7bf",
          "name": "Get Score Progress (SSE)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "score-progress",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60611323-5973-44e8-861b-0af224e1b7dd",
                "type": "text/javascript",
                "exec": [
                  "// Initialize test variables",
                  "let eventSource = null;",
                  "let receivedEvents = [];",
                  "const timeout = 30000; // 30 second timeout",
                  "",
                  "// Helper function to validate event data",
                  "function validateProgressEvent(event) {",
                  "    try {",
                  "        const data = JSON.parse(event.data);",
                  "        pm.expect(data).to.have.property('status');",
                  "        // Accept status values case-insensitively and allow underscores",
                  "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                  "        pm.expect(['inprogress', 'success', 'error']).to.include(status);",
                  "        if (status === 'inprogress') {",
                  "            pm.expect(data).to.have.property('percent');",
                  "            pm.expect(data.percent).to.be.a('number');",
                  "        }",
                  "        if (status === 'success') {",
                  "            pm.expect(data).to.have.property('final_score');",
                  "        }",
                  "        return true;",
                  "    } catch (e) {",
                  "        console.error('Invalid event data:', e);",
                  "        return false;",
                  "    }",
                  "}",
                  "",
                  "// Set up timeout",
                  "const timeoutId = setTimeout(() => {",
                  "    if (eventSource) eventSource.close();",
                  "    pm.test('Test completed within timeout', function() {",
                  "        pm.expect(receivedEvents.length).to.be.greaterThan(0, 'Should have received at least one event');",
                  "    });",
                  "}, timeout);",
                  "",
                  "// Initialize SSE connection",
                  "eventSource = new EventSource(pm.request.url.toString());",
                  "",
                  "// Event handlers",
                  "eventSource.addEventListener('message', function(event) {",
                  "    receivedEvents.push(event);",
                  "    const isValid = validateProgressEvent(event);",
                  "    pm.test('Event data is valid', function() {",
                  "        pm.expect(isValid).to.be.true;",
                  "    });",
                  "",
                  "    // Check for completion",
                  "    try {",
                  "        const data = JSON.parse(event.data);",
                  "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                  "        if (status === 'success' || status === 'error') {",
                  "            eventSource.close();",
                  "            clearTimeout(timeoutId);",
                  "            pm.test('Received completion event', function() {",
                  "                pm.expect(['success', 'error']).to.include(status);",
                  "                if (status === 'success') {",
                  "                    pm.expect(data).to.have.property('final_score');",
                  "                }",
                  "                if (status === 'error') {",
                  "                    pm.expect(data).to.have.property('error');",
                  "                }",
                  "            });",
                  "        }",
                  "    } catch (e) {",
                  "        console.error('Error parsing completion event:', e);",
                  "    }",
                  "});",
                  "",
                  "eventSource.addEventListener('error', function(err) {",
                  "    console.error('SSE Error:', err);",
                  "    eventSource.close();",
                  "    clearTimeout(timeoutId);",
                  "    pm.test('SSE connection error', function() {",
                  "        pm.expect.fail('SSE connection failed');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "9c33c333-4d33-4084-990c-b1dcaaa4b3de"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "score-progress",
              "3978"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "da105593-8da0-47d9-96c9-dff61d874f4a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c52cc7b0-ce62-4eea-89c2-e80e67ddf7bf",
        "requestError": {
          "errno": -4077,
          "code": "ECONNRESET",
          "syscall": "read"
        },
        "assertions": [
          {
            "assertion": "Test completed within timeout",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Test completed within timeout",
              "message": "Should have received at least one event: expected +0 to be above +0",
              "stack": "AssertionError: Should have received at least one event: expected +0 to be above +0\n   at Object.eval sandbox-script.js:1:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "87d18397-151c-47fb-a2fe-264f7469d300",
          "length": 48,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0b8affc2-f8af-4f5e-9e9c-95e8a436c284"
        },
        "item": {
          "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
          "name": "4.1 Valid Manual Scoring",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31854c3a-b09d-45d0-856a-95051276c175",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid manual score\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "manual-score",
              "%7B%7BmanualScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e462db2e-feb6-456a-9c16-406592a74511",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 for valid manual score",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 for valid manual score",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c6ced456-4669-491d-920e-42f924f25b95",
          "length": 48,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "30f653a4-4b30-49d0-97a8-d1a7ca81876e"
        },
        "item": {
          "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
          "name": "4.2 Invalid: Missing Score Field",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions missing score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing score');",
                  "});"
                ],
                "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "manual-score",
              "%7B%7BmanualScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a71a0d50-e25c-4995-a5ec-1c04752ca97e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{}"
          }
        },
        "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for missing score",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for missing score",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Error message mentions missing score",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error message mentions missing score",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ecdc4bd2-d943-4ac6-8b7a-11bbd0485f31",
          "length": 48,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43739a1c-7cb9-47b9-9106-31d43130a4f3"
        },
        "item": {
          "id": "84b85189-5b46-46a4-9a4b-42772479f624",
          "name": "4.3 Invalid: Non-numeric Score",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"bad\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions invalid score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid score');",
                  "});"
                ],
                "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "manual-score",
              "%7B%7BmanualScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "72bbdf31-e667-4edd-b282-de1590157365",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": \"bad\"\n}"
          }
        },
        "id": "84b85189-5b46-46a4-9a4b-42772479f624",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for non-numeric score",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for non-numeric score",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Error message mentions invalid score",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error message mentions invalid score",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bda3cbfb-edb6-4c76-b01e-83ff647e1d0e",
          "length": 48,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "53203f56-5fdb-4175-a0ef-be6d70ca5bdd"
        },
        "item": {
          "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
          "name": "4.4 Invalid: Extra Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for extra fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions extra fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Extra fields');",
                  "});"
                ],
                "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "manual-score",
              "%7B%7BmanualScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b84c693-9898-49c0-9618-01eb758eea08",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
          }
        },
        "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for extra fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for extra fields",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Error message mentions extra fields",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error message mentions extra fields",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2f177903-3ab0-4d0b-b0a8-8d6fc1dcac17",
          "length": 48,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b2c9d18-c929-4dfe-906b-21d2c4e6edac"
        },
        "item": {
          "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
          "name": "4.5 Invalid: Out-of-Range Score",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score range\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Score out of range');",
                  "});"
                ],
                "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "manual-score",
              "%7B%7BmanualScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "581a8cf6-db4c-4cc0-a443-c33abcb8b898",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 2.0\n}"
          }
        },
        "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for out-of-range score",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for out-of-range score",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Error message mentions score range",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error message mentions score range",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e50869c6-5378-449e-ae07-4fe75e799918",
          "length": 48,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "27d762dc-c1be-4c5c-ba9d-564ff1a8c219"
        },
        "item": {
          "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
          "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score field not allowed\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('score field not allowed');",
                  "});"
                ],
                "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "llm",
              "reanalyze",
              "%7B%7BmanualScoreArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e561fd84-7b97-4ec5-ba4b-77d43b1595f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 400 for manual score sent to LLM endpoint",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 for manual score sent to LLM endpoint",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "Error message mentions score field not allowed",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error message mentions score field not allowed",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8477c2c6-67a3-4c6d-b7c4-697a3845fcea",
          "length": 48,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "81242c5d-4103-4844-b696-50bcae357dfe"
        },
        "item": {
          "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ],
                "_lastExecutionId": "97f7e916-7119-49b4-8fcc-f513485a70c6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "debug",
              "schema"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aa84abdf-17f1-4a21-80ee-be81f3bbd0bb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Response contains schema information",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains schema information",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "198440a0-213a-401f-b1ec-7c6ade018eef",
          "length": 48,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f53270d2-fb6a-4c5d-bbe6-8f09fa302848"
        },
        "item": {
          "id": "1aafc649-1b82-443f-a6e5-b8e922a6b362",
          "name": "Submit Feedback - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edd4bcb6-ed4a-4083-9d1a-196ac42622bb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "2b212f92-6a57-4960-901e-d51f059414a6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Debug",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4c3bce5b-8e5f-4192-a590-3678280856c6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": 3977,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "1aafc649-1b82-443f-a6e5-b8e922a6b362",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6d739c35-bdc8-4d6d-9235-01feb07a2ba9",
          "length": 48,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6b07be9e-420c-4f2b-8c15-b97fd3121502"
        },
        "item": {
          "id": "3eab7d8e-3bc0-4689-adf6-6c1789c44391",
          "name": "Create Article - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb87c094-0523-4c80-8938-cf37a2bfdd07",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "    if (json.data && json.data.article_id) {",
                  "        pm.environment.set(\"debugArticleId\", json.data.article_id);",
                  "        console.log('Set debugArticleId to:', json.data.article_id);",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "da4240fa-9174-408c-b857-a64beb07ebc7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Debug",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ccf8b28-070c-482b-b89f-bce4e6b8d413",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-1745424630\",\n  \"pub_date\": \"2025-04-23T16:10:29.866Z\"\n}"
          }
        },
        "id": "3eab7d8e-3bc0-4689-adf6-6c1789c44391",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "52f03839-25fd-423f-9ad7-03bfb52ddefb",
          "length": 48,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c8ee252f-3182-4bc2-9811-7eed25b83239"
        },
        "item": {
          "id": "86ad96a3-4b7c-4249-8114-6d8e7b1d4d8f",
          "name": "Get Article - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{debugArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc4edb51-9b01-4986-ab40-2856a1c8eaf9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "5db7ccae-4e0d-4281-9060-963b92547214"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BdebugArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "603a582c-1730-498a-9d13-846fcda2b91b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "86ad96a3-4b7c-4249-8114-6d8e7b1d4d8f",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7d0f9a16-77ca-436b-baf8-637e74a5024a",
          "length": 48,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2258d7e0-d415-465d-9e39-25cffc23b73b"
        },
        "item": {
          "id": "a81ab9a8-2677-42d0-b7bb-633d4a42e261",
          "name": "Get Articles - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8b4ceb7-f71b-475c-8295-20120c49d16e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response headers:', pm.response.headers.all());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Response structure:', Object.keys(json));",
                  "    if (json.data && Array.isArray(json.data)) {",
                  "        console.log('Number of articles:', json.data.length);",
                  "        if (json.data.length > 0) {",
                  "            console.log('First article structure:', Object.keys(json.data[0]));",
                  "            console.log('First article sample:', {",
                  "                id: json.data[0].id,",
                  "                title: json.data[0].title,",
                  "                source: json.data[0].source,",
                  "                composite_score: json.data[0].composite_score,",
                  "                confidence: json.data[0].confidence",
                  "            });",
                  "        }",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                  "}"
                ],
                "_lastExecutionId": "f551d7b2-571e-4e01-919d-20ca56cb8315"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "debug",
                "value": "true"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "46fc5de7-f4d8-423e-9a52-bb2561a72c6e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "a81ab9a8-2677-42d0-b7bb-633d4a42e261",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'substring')",
              "checksum": "74fa7b1eff5b29603aab90349019b036",
              "id": "2843a258-0bd2-402e-8c0f-62282f31855d",
              "timestamp": 1745424630057,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ebae7274-f02c-4f8d-8205-b1414b1de460",
          "length": 48,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4f28173f-ba5d-4d90-a2bd-4221f8eaf05c"
        },
        "item": {
          "id": "1510ebfc-a0eb-4160-a161-bc7cbe52de91",
          "name": "Get Ensemble Details - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{debugArticleId}}",
                "ensemble"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "49168db0-71af-4cfb-a8b0-0468163f6628",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ],
                "_lastExecutionId": "fb3feba6-e0fa-4573-a389-b34c4706aabf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BdebugArticleId%7D%7D",
              "ensemble"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "debug",
                "value": "true"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f127a1b-3e50-40fe-9f85-d22f46413c48",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "1510ebfc-a0eb-4160-a161-bc7cbe52de91",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "90461bf2-25c4-4679-8162-c234987a3ac8",
          "length": 48,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "01161195-9961-437c-a9c0-65755c801a37"
        },
        "item": {
          "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
          "name": "Get Article - Cache Hit",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Store response time for cache hit comparison",
                  "var firstResponseTime = pm.response.responseTime;",
                  "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                  "",
                  "// Store ETag if present",
                  "var etag = pm.response.headers.get(\"ETag\");",
                  "if (etag) {",
                  "    pm.environment.set(\"articleEtag\", etag);",
                  "}"
                ],
                "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "3977"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a7fc9728-dadf-4a55-9a49-cff7e088086e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "214d82f1-e718-40e7-a43a-12df17e829de",
          "length": 48,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2ddda20f-79a8-4baf-b800-2ada4c772112"
        },
        "item": {
          "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
          "name": "Get Article - Validate Cache Hit",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "If-None-Match",
                "value": "{{articleEtag}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 304 for cached response\", function () {",
                  "    pm.response.to.have.status(304);",
                  "});"
                ],
                "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "3977"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "If-None-Match",
              "value": "{{articleEtag}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a766e30-784d-441e-a7c8-e8d1b22f65a1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 304 for cached response",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 304 for cached response",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b0ef71b-e1a5-4cf7-978d-9104a955cb66",
          "length": 48,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41fa5d13-d20e-459d-930a-813763edcd7d"
        },
        "item": {
          "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
          "name": "Get Articles - Cache Performance",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify response time improvement from caching",
                  "var cachedResponseTime = pm.response.responseTime;",
                  "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                  "",
                  "pm.test(\"Cached response should be faster\", function () {",
                  "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                  "});"
                ],
                "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "source",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f069dc3-0c00-4b94-8b23-c6cc62840cfc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "Cached response should be faster",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Cached response should be faster",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "22753472-5db6-433d-a1a9-088a0b6c6c31",
          "length": 48,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0038d240-f476-4abe-a2db-2dce2c0630ee"
        },
        "item": {
          "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
          "name": "Concurrent Article Creation",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Store article ID for concurrent operations",
                  "var json = pm.response.json();",
                  "if (json.data && json.data.article_id) {",
                  "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                  "}"
                ],
                "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "342631e7-f1d7-41a4-b422-97c8f78826cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Concurrent Test Article 1745424630\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-1745424630\",\n  \"pub_date\": \"2025-04-23T16:10:30.407Z\"\n}"
          }
        },
        "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 201",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:39)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "948b9e53-214d-49f0-86c5-99a2038a96bf",
              "timestamp": 1745424630424,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b15503b-dc74-4b11-90ee-b748925471f3",
          "length": 48,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1f91e3d-d1de-49ce-b26a-2e90f2eaebb8"
        },
        "item": {
          "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
          "name": "Concurrent Score Updates",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{concurrentArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates successful update\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "manual-score",
              "%7B%7BconcurrentArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f6e9015-8d62-4070-ab61-3627baae591a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"score\": 0.5\n}"
          }
        },
        "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "Response indicates successful update",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response indicates successful update",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d31fdb6-dfa2-4e6d-8052-f60943492fdc",
          "length": 48,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bb537c9b-d766-4468-8cc7-d4e45250dc31"
        },
        "item": {
          "id": "3c83912c-948b-4907-b445-66cd93909668",
          "name": "Concurrent Feedback Submission",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Feedback submission successful\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "423f27ed-6c7c-4cf2-9724-21c1e7d8b3a9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "3c83912c-948b-4907-b445-66cd93909668",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "Feedback submission successful",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Feedback submission successful",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f4c8227e-8b32-46a8-b4a8-42a354a9da9d",
          "length": 48,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ac4eaa5-9090-4b09-809d-9d3c9a7ccf8d"
        },
        "item": {
          "id": "73c7328a-3a12-4914-8e7e-759febacc468",
          "name": "Create Article and Check Initial Confidence",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                ],
                "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d1ddbe71-e0ca-4161-95c9-a04836e56b8d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-1745424631\",\n  \"pub_date\": \"2025-04-23T16:10:30.623Z\"\n}"
          }
        },
        "id": "73c7328a-3a12-4914-8e7e-759febacc468",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "7feecb4f-904b-4ad2-9da3-cf17919abde6",
              "timestamp": 1745424630659,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5489c6fd-5971-4807-ab9b-8de47a0ccfe0",
          "length": 48,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "55d19b69-8d1d-4b63-bb6c-bbd934bfbd36"
        },
        "item": {
          "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
          "name": "Get Article and Verify Initial Confidence Score",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Initial confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var confidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(confidence).to.exist;",
                  "    pm.expect(confidence).to.be.a('number');",
                  "    pm.expect(confidence).to.be.within(0, 1);",
                  "    pm.environment.set(\"initialConfidence\", confidence);",
                  "});"
                ],
                "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BconfidenceArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d5c51ced-72a3-4b03-af61-34c0440a5add",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "Initial confidence validation",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Initial confidence validation",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8f237f5e-6abb-4056-be3a-e7824a23244b",
          "length": 48,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "63a62513-47a0-433a-a813-1a9d1cc243a5"
        },
        "item": {
          "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
          "name": "Submit Initial Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6790ebe3-0e73-4b4c-8c28-c44b18bb2efa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0051bd5a-f38a-4b0f-8a89-d446f5b5478c",
          "length": 48,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2d1348a8-ae53-4ee1-9e39-d62c9c39aa85"
        },
        "item": {
          "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
          "name": "Submit Agree Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1848888b-147e-47f8-b1d3-af6fab578103",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "28a26935-05d9-4ba6-88ec-84d993984b2b",
          "length": 48,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "702b11a3-1c77-496f-a945-470cbdff66c2"
        },
        "item": {
          "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
          "name": "Submit Additional Agree Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "feedback"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cd3447a1-e033-49ea-9a1c-0600a5d3d597",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
          }
        },
        "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3b08cd65-0d21-42af-ab8b-8b380876d4e8",
          "length": 48,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61301404-d135-4a2a-91b5-455072375521"
        },
        "item": {
          "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
          "name": "Verify Confidence After Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "var currentConfidence = json.data.article.confidence;",
                  "",
                  "if (currentConfidence > 0) {",
                  "    pm.test(\"Confidence updated after feedback\", function () {",
                  "        pm.expect(currentConfidence).to.be.within(0, 1);",
                  "        pm.expect(currentConfidence).to.be.above(0);",
                  "    });",
                  "} else {",
                  "    // Set delay for retry",
                  "    setTimeout(function(){}, 1000);",
                  "}"
                ],
                "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BconfidenceArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "14370795-a54c-4f98-8364-6f3951587495",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "28571415-cda9-472f-a9bc-fbc825732b18",
              "timestamp": 1745424631034,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fb5e48c8-a5f2-41fc-b766-9cd44b373167",
          "length": 48,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c5f4f2d5-90a9-4eab-aed8-5c614fb70285"
        },
        "item": {
          "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
          "name": "Second Confidence Check",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Final confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var currentConfidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(currentConfidence).to.exist;",
                  "    pm.expect(currentConfidence).to.be.a('number');",
                  "    pm.expect(currentConfidence).to.be.within(0, 1);",
                  "    ",
                  "    // Log confidence value for debugging",
                  "    console.log('Final confidence value:', currentConfidence);",
                  "});"
                ],
                "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "articles",
              "%7B%7BconfidenceArticleId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05c54669-662e-43ad-b9bf-b7f91b264293",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "Final confidence validation",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Final confidence validation",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 24148
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Articles have composite_score and confidence",
          "message": "expected undefined not to be undefined",
          "stack": "AssertionError: expected undefined not to be undefined\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "1ccf097de637bed47856194d2876adb5",
          "id": "ae09a082-a229-467d-af17-ec82823763fd",
          "timestamp": 1745423385238,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
          "name": "Get Articles - Default Parameters",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af7597b5-cd13-4fee-935d-c76a49073930",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Articles have composite_score and confidence\", function () {",
                  "    var json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        console.log('First article:', JSON.stringify(json.data[0]));",
                  "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                  "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
              }
            }
          ]
        },
        "parent": {
          "id": "43a352ec-d98e-48c6-a892-ccb5fcb650e6",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af7597b5-cd13-4fee-935d-c76a49073930",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
                  }
                }
              ]
            },
            {
              "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
                  }
                }
              ]
            },
            {
              "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
                  }
                }
              ]
            },
            {
              "id": "77365fb8-2a34-4cee-8f27-2ffe7b60c045",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "97fd9a24-57fe-4fab-94d6-e4d8c7de1ac6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "81db780a-f17d-457b-bb5a-4ca4b79940d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "28fcb3a2-28c4-4eb3-9b4f-a9118c96cc1c",
          "length": 48,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "594c974e-ea39-4874-b6d4-9248c362e328",
          "scriptId": "af7597b5-cd13-4fee-935d-c76a49073930",
          "execution": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains articles with correct source",
          "message": "expected undefined to equal 'test'",
          "stack": "AssertionError: expected undefined to equal 'test'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "b387952c7a2ed6f32b6a224d909ab8b0",
          "id": "d6e5097d-6369-4410-a5a5-62027860e542",
          "timestamp": 1745423385349,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
          "name": "Get Articles - With Source Filter",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
              }
            }
          ]
        },
        "parent": {
          "id": "43a352ec-d98e-48c6-a892-ccb5fcb650e6",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af7597b5-cd13-4fee-935d-c76a49073930",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
                  }
                }
              ]
            },
            {
              "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
                  }
                }
              ]
            },
            {
              "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
                  }
                }
              ]
            },
            {
              "id": "77365fb8-2a34-4cee-8f27-2ffe7b60c045",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "97fd9a24-57fe-4fab-94d6-e4d8c7de1ac6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "81db780a-f17d-457b-bb5a-4ca4b79940d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cd10e584-bc6d-4dfe-a4d4-03f2ca4087bf",
          "length": 48,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ee6a8a9e-1b28-4072-b3f0-74d25e556042",
          "scriptId": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
          "execution": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains articles with correct source",
          "message": "expected undefined to equal 'test'",
          "stack": "AssertionError: expected undefined to equal 'test'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "9715e4b353ae172b211846f9560d0649",
          "id": "5165463f-c6ec-4cac-a172-ee6b8afbfed0",
          "timestamp": 1745423385444,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
          "name": "Get Articles - Cache Test",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains articles with correct source\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data).to.be.an('array');",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.expect(json.data[0].source).to.equal('test');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
              }
            }
          ]
        },
        "parent": {
          "id": "43a352ec-d98e-48c6-a892-ccb5fcb650e6",
          "name": "1.2 Article Retrieval Tests",
          "item": [
            {
              "id": "ea5b871f-5496-4bfa-a4df-dab46c088966",
              "name": "Get Articles - Default Parameters",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af7597b5-cd13-4fee-935d-c76a49073930",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Articles have composite_score and confidence\", function () {",
                      "    var json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        console.log('First article:', JSON.stringify(json.data[0]));",
                      "        pm.expect(json.data[0].composite_score).to.not.be.undefined;",
                      "        pm.expect(json.data[0].confidence).to.not.be.undefined;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bc55b4ee-7a5b-4e6f-8ff2-713c6cfc0950"
                  }
                }
              ]
            },
            {
              "id": "0fa52407-6d15-4977-94ab-c9f0a631fa68",
              "name": "Get Articles - With Source Filter",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcd4697f-fa49-45f4-af71-bd2bdf657f70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "09c5f6db-c3fb-4221-b158-f1a332ca5c89"
                  }
                }
              ]
            },
            {
              "id": "a4d9ef1d-aad3-47c1-89f5-941c73cbc3c1",
              "name": "Get Articles - Cache Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains articles with correct source\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data).to.be.an('array');",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.expect(json.data[0].source).to.equal('test');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
                  }
                }
              ]
            },
            {
              "id": "77365fb8-2a34-4cee-8f27-2ffe7b60c045",
              "name": "Get Ensemble Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}",
                    "ensemble"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "97fd9a24-57fe-4fab-94d6-e4d8c7de1ac6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 404\", function () {",
                      "    pm.expect([200, 404]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains ensemble data\", function () {",
                      "        var json = pm.response.json();",
                      "        pm.expect(json.success).to.be.true;",
                      "        pm.expect(json.data).to.have.property('ensembles');",
                      "        pm.expect(json.data.ensembles).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "81db780a-f17d-457b-bb5a-4ca4b79940d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b32b7127-78b0-4872-ba29-31a36cd2b06d",
          "length": 48,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0736d177-f854-4176-a387-ba50bf2b73bb",
          "scriptId": "61516a2f-d4e4-45fd-8c02-9ba71a2d2f3b",
          "execution": "0dabe0a0-f405-4cc2-96d5-3fb8a6b195e3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains error about invalid category",
          "message": "expected 'Invalid feedback category. Must be on…' to include 'Invalid category'",
          "stack": "AssertionError: expected 'Invalid feedback category. Must be on…' to include 'Invalid category'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d724864f19bd606c140e8a6171db6f27",
          "id": "678d2d26-109f-4e9b-b366-d666ca53ad11",
          "timestamp": 1745423385688,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f261976-197a-4f3a-adc0-889ff8af9409",
          "name": "Submit Feedback - Invalid Category",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb842699-c185-4b9a-ace2-a653d07ab0ea",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for invalid category\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error about invalid category\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid category');",
                  "});"
                ],
                "_lastExecutionId": "af1c12c2-96b8-4264-a3ed-35aabcaf72ee"
              }
            }
          ]
        },
        "parent": {
          "id": "cb39e3c3-f4f1-416a-bb85-cbf6c62b21ef",
          "name": "2. Feedback Handler Tests",
          "item": [
            {
              "id": "06f610c0-ba66-490b-b5f7-2cc0058c0fd0",
              "name": "Submit Feedback - Missing Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a2b1656-9eb7-4f76-b6cd-319dac76492c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about missing fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing required fields');",
                      "});"
                    ],
                    "_lastExecutionId": "3dca2203-1ccd-423a-852f-97eea698a8ed"
                  }
                }
              ]
            },
            {
              "id": "1f261976-197a-4f3a-adc0-889ff8af9409",
              "name": "Submit Feedback - Invalid Category",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"invalid-category\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb842699-c185-4b9a-ace2-a653d07ab0ea",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for invalid category\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contains error about invalid category\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid category');",
                      "});"
                    ],
                    "_lastExecutionId": "af1c12c2-96b8-4264-a3ed-35aabcaf72ee"
                  }
                }
              ]
            },
            {
              "id": "3be100d6-0cab-4ac0-8760-d9704270fb6a",
              "name": "Submit Feedback - Valid",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fef76a0-cb51-4c98-aecb-aa0eb95972e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid feedback\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "54fc1dcd-d604-4c28-a498-4c3ca03e77c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2253471d-f2f7-400f-9285-889dce2f1bbc",
          "length": 48,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a277114e-9417-4244-83e5-2bea4399822e",
          "scriptId": "eb842699-c185-4b9a-ace2-a653d07ab0ea",
          "execution": "af1c12c2-96b8-4264-a3ed-35aabcaf72ee"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Score updated to 0.5",
          "message": "expected +0 to deeply equal 0.5",
          "stack": "AssertionError: expected +0 to deeply equal 0.5\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "afea4c826b0cc88ca76306f0939a4225",
          "id": "0854c3c2-6b20-47b6-9771-bb57f16d191e",
          "timestamp": 1745423386023,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0f77535c-24a7-4f77-90c4-2773ff8c8e08",
          "name": "Get Article (Verify Score)",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8854ad5f-a8b9-4c3e-81b5-4eadef21931c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                  "pm.test(\"Score updated to 0.5\", function () {",
                  "    // The API might return the score in different locations based on the response structure",
                  "    // Try different paths where the score might be found",
                  "    var score = null;",
                  "    if (json.data && json.data.composite_score !== undefined) {",
                  "        score = json.data.composite_score;",
                  "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                  "        score = json.data.article.CompositeScore;",
                  "    } else if (json.composite_score !== undefined) {",
                  "        score = json.composite_score;",
                  "    } else if (json.score !== undefined) {",
                  "        score = json.score;",
                  "    }",
                  "    pm.expect(score).to.eql(0.5);",
                  "});"
                ],
                "_lastExecutionId": "49da24cc-3841-407c-a0cc-9894c6f29418"
              }
            }
          ]
        },
        "parent": {
          "id": "5c90b02c-8838-4caa-8ef1-3cb71554d74d",
          "name": "3.1 Valid Rescoring Tests",
          "item": [
            {
              "id": "4d509159-95bc-4b7d-ad2f-ad0d3f14cb7e",
              "name": "Create Article for Rescoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Article for Rescoring\",\n  \"content\": \"This is a test article for rescoring tests.\",\n  \"url\": \"https://example.com/rescore-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f177b9-cd67-4e4c-8696-4eb34a30c94b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    var json = pm.response.json();",
                      "    pm.environment.set(\"rescoreArticleId\", json.data.article_id);",
                      "} else {",
                      "    pm.environment.unset(\"rescoreArticleId\");",
                      "}"
                    ],
                    "_lastExecutionId": "7414c618-457d-4c12-9ad2-24e4e9fe1ca8"
                  }
                }
              ]
            },
            {
              "id": "3ff6ee62-9656-4e6f-aac5-8fa57be6a168",
              "name": "Rescore Article (Valid Score 0.5)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dac7fae4-1c62-44ea-b238-6c3e7637f0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "1d136b4b-d5f2-4592-aa90-b89c3dc653ed"
                  }
                }
              ]
            },
            {
              "id": "0f77535c-24a7-4f77-90c4-2773ff8c8e08",
              "name": "Get Article (Verify Score)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8854ad5f-a8b9-4c3e-81b5-4eadef21931c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "console.log('Response JSON:', JSON.stringify(json, null, 2));",
                      "pm.test(\"Score updated to 0.5\", function () {",
                      "    // The API might return the score in different locations based on the response structure",
                      "    // Try different paths where the score might be found",
                      "    var score = null;",
                      "    if (json.data && json.data.composite_score !== undefined) {",
                      "        score = json.data.composite_score;",
                      "    } else if (json.data && json.data.article && json.data.article.CompositeScore !== undefined) {",
                      "        score = json.data.article.CompositeScore;",
                      "    } else if (json.composite_score !== undefined) {",
                      "        score = json.composite_score;",
                      "    } else if (json.score !== undefined) {",
                      "        score = json.score;",
                      "    }",
                      "    pm.expect(score).to.eql(0.5);",
                      "});"
                    ],
                    "_lastExecutionId": "49da24cc-3841-407c-a0cc-9894c6f29418"
                  }
                }
              ]
            },
            {
              "id": "ab53c575-1ab4-469a-9c0d-246db2b8f6d6",
              "name": "Rescore Article (Upper Boundary 1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c07588d-209f-461c-9b83-360148f77557",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "2967b334-de4e-4760-8500-399ed0b1d44c"
                  }
                }
              ]
            },
            {
              "id": "87e23fe0-578b-453e-9909-2d623df5dc89",
              "name": "Rescore Article (Lower Boundary -1.0)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": -1.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d82a29-c2cc-40a2-9e9c-85bfa6beed3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "fd67d57a-1c10-43f3-bdef-02d17506e7b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "92334f6b-e8aa-4d98-aef6-fbe6299f7c2a",
          "length": 48,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a659ce7f-55aa-4a55-8dc1-513c14591bbc",
          "scriptId": "8854ad5f-a8b9-4c3e-81b5-4eadef21931c",
          "execution": "49da24cc-3841-407c-a0cc-9894c6f29418"
        }
      },
      {
        "error": {
          "errno": -4077,
          "code": "ECONNRESET",
          "syscall": "read",
          "name": "Error",
          "message": "read ECONNRESET",
          "stack": "Error: read ECONNRESET\n    at TCP.onStreamRead (node:internal/stream_base_commons:216:20)",
          "checksum": "45ca115c0a1a48d6ab2cc13c3bf16c7d",
          "id": "dd1f0d31-750c-4bfb-b75e-93b79b8b03fd",
          "timestamp": 1745424599072,
          "stacktrace": [
            {
              "fileName": "node:internal/stream_base_commons",
              "lineNumber": 216,
              "functionName": "TCP.onStreamRead",
              "typeName": "TCP",
              "methodName": "onStreamRead",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c52cc7b0-ce62-4eea-89c2-e80e67ddf7bf",
          "name": "Get Score Progress (SSE)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "score-progress",
                "3978"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "da105593-8da0-47d9-96c9-dff61d874f4a",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60611323-5973-44e8-861b-0af224e1b7dd",
                "type": "text/javascript",
                "exec": [
                  "// Initialize test variables",
                  "let eventSource = null;",
                  "let receivedEvents = [];",
                  "const timeout = 30000; // 30 second timeout",
                  "",
                  "// Helper function to validate event data",
                  "function validateProgressEvent(event) {",
                  "    try {",
                  "        const data = JSON.parse(event.data);",
                  "        pm.expect(data).to.have.property('status');",
                  "        // Accept status values case-insensitively and allow underscores",
                  "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                  "        pm.expect(['inprogress', 'success', 'error']).to.include(status);",
                  "        if (status === 'inprogress') {",
                  "            pm.expect(data).to.have.property('percent');",
                  "            pm.expect(data.percent).to.be.a('number');",
                  "        }",
                  "        if (status === 'success') {",
                  "            pm.expect(data).to.have.property('final_score');",
                  "        }",
                  "        return true;",
                  "    } catch (e) {",
                  "        console.error('Invalid event data:', e);",
                  "        return false;",
                  "    }",
                  "}",
                  "",
                  "// Set up timeout",
                  "const timeoutId = setTimeout(() => {",
                  "    if (eventSource) eventSource.close();",
                  "    pm.test('Test completed within timeout', function() {",
                  "        pm.expect(receivedEvents.length).to.be.greaterThan(0, 'Should have received at least one event');",
                  "    });",
                  "}, timeout);",
                  "",
                  "// Initialize SSE connection",
                  "eventSource = new EventSource(pm.request.url.toString());",
                  "",
                  "// Event handlers",
                  "eventSource.addEventListener('message', function(event) {",
                  "    receivedEvents.push(event);",
                  "    const isValid = validateProgressEvent(event);",
                  "    pm.test('Event data is valid', function() {",
                  "        pm.expect(isValid).to.be.true;",
                  "    });",
                  "",
                  "    // Check for completion",
                  "    try {",
                  "        const data = JSON.parse(event.data);",
                  "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                  "        if (status === 'success' || status === 'error') {",
                  "            eventSource.close();",
                  "            clearTimeout(timeoutId);",
                  "            pm.test('Received completion event', function() {",
                  "                pm.expect(['success', 'error']).to.include(status);",
                  "                if (status === 'success') {",
                  "                    pm.expect(data).to.have.property('final_score');",
                  "                }",
                  "                if (status === 'error') {",
                  "                    pm.expect(data).to.have.property('error');",
                  "                }",
                  "            });",
                  "        }",
                  "    } catch (e) {",
                  "        console.error('Error parsing completion event:', e);",
                  "    }",
                  "});",
                  "",
                  "eventSource.addEventListener('error', function(err) {",
                  "    console.error('SSE Error:', err);",
                  "    eventSource.close();",
                  "    clearTimeout(timeoutId);",
                  "    pm.test('SSE connection error', function() {",
                  "        pm.expect.fail('SSE connection failed');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a7383901-0b04-44ad-9aa6-62d1bb1030c6",
          "length": 48,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3ab23635-3944-428e-9eb5-2033a9aa7dff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Test completed within timeout",
          "message": "Should have received at least one event: expected +0 to be above +0",
          "stack": "AssertionError: Should have received at least one event: expected +0 to be above +0\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "9009a5bc728366783853e067085b58a9",
          "id": "8355ad88-4880-4e7f-9b32-440d0bd13900",
          "timestamp": 1745424629093,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c52cc7b0-ce62-4eea-89c2-e80e67ddf7bf",
          "name": "Get Score Progress (SSE)",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "score-progress",
                "{{rescoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60611323-5973-44e8-861b-0af224e1b7dd",
                "type": "text/javascript",
                "exec": [
                  "// Initialize test variables",
                  "let eventSource = null;",
                  "let receivedEvents = [];",
                  "const timeout = 30000; // 30 second timeout",
                  "",
                  "// Helper function to validate event data",
                  "function validateProgressEvent(event) {",
                  "    try {",
                  "        const data = JSON.parse(event.data);",
                  "        pm.expect(data).to.have.property('status');",
                  "        // Accept status values case-insensitively and allow underscores",
                  "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                  "        pm.expect(['inprogress', 'success', 'error']).to.include(status);",
                  "        if (status === 'inprogress') {",
                  "            pm.expect(data).to.have.property('percent');",
                  "            pm.expect(data.percent).to.be.a('number');",
                  "        }",
                  "        if (status === 'success') {",
                  "            pm.expect(data).to.have.property('final_score');",
                  "        }",
                  "        return true;",
                  "    } catch (e) {",
                  "        console.error('Invalid event data:', e);",
                  "        return false;",
                  "    }",
                  "}",
                  "",
                  "// Set up timeout",
                  "const timeoutId = setTimeout(() => {",
                  "    if (eventSource) eventSource.close();",
                  "    pm.test('Test completed within timeout', function() {",
                  "        pm.expect(receivedEvents.length).to.be.greaterThan(0, 'Should have received at least one event');",
                  "    });",
                  "}, timeout);",
                  "",
                  "// Initialize SSE connection",
                  "eventSource = new EventSource(pm.request.url.toString());",
                  "",
                  "// Event handlers",
                  "eventSource.addEventListener('message', function(event) {",
                  "    receivedEvents.push(event);",
                  "    const isValid = validateProgressEvent(event);",
                  "    pm.test('Event data is valid', function() {",
                  "        pm.expect(isValid).to.be.true;",
                  "    });",
                  "",
                  "    // Check for completion",
                  "    try {",
                  "        const data = JSON.parse(event.data);",
                  "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                  "        if (status === 'success' || status === 'error') {",
                  "            eventSource.close();",
                  "            clearTimeout(timeoutId);",
                  "            pm.test('Received completion event', function() {",
                  "                pm.expect(['success', 'error']).to.include(status);",
                  "                if (status === 'success') {",
                  "                    pm.expect(data).to.have.property('final_score');",
                  "                }",
                  "                if (status === 'error') {",
                  "                    pm.expect(data).to.have.property('error');",
                  "                }",
                  "            });",
                  "        }",
                  "    } catch (e) {",
                  "        console.error('Error parsing completion event:', e);",
                  "    }",
                  "});",
                  "",
                  "eventSource.addEventListener('error', function(err) {",
                  "    console.error('SSE Error:', err);",
                  "    eventSource.close();",
                  "    clearTimeout(timeoutId);",
                  "    pm.test('SSE connection error', function() {",
                  "        pm.expect.fail('SSE connection failed');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "9c33c333-4d33-4084-990c-b1dcaaa4b3de"
              }
            }
          ]
        },
        "parent": {
          "id": "f610008b-f5c2-4617-91d0-59690f55a73d",
          "name": "3.3 Score Progress Tests",
          "item": [
            {
              "id": "c52cc7b0-ce62-4eea-89c2-e80e67ddf7bf",
              "name": "Get Score Progress (SSE)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "score-progress",
                    "{{rescoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60611323-5973-44e8-861b-0af224e1b7dd",
                    "type": "text/javascript",
                    "exec": [
                      "// Initialize test variables",
                      "let eventSource = null;",
                      "let receivedEvents = [];",
                      "const timeout = 30000; // 30 second timeout",
                      "",
                      "// Helper function to validate event data",
                      "function validateProgressEvent(event) {",
                      "    try {",
                      "        const data = JSON.parse(event.data);",
                      "        pm.expect(data).to.have.property('status');",
                      "        // Accept status values case-insensitively and allow underscores",
                      "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                      "        pm.expect(['inprogress', 'success', 'error']).to.include(status);",
                      "        if (status === 'inprogress') {",
                      "            pm.expect(data).to.have.property('percent');",
                      "            pm.expect(data.percent).to.be.a('number');",
                      "        }",
                      "        if (status === 'success') {",
                      "            pm.expect(data).to.have.property('final_score');",
                      "        }",
                      "        return true;",
                      "    } catch (e) {",
                      "        console.error('Invalid event data:', e);",
                      "        return false;",
                      "    }",
                      "}",
                      "",
                      "// Set up timeout",
                      "const timeoutId = setTimeout(() => {",
                      "    if (eventSource) eventSource.close();",
                      "    pm.test('Test completed within timeout', function() {",
                      "        pm.expect(receivedEvents.length).to.be.greaterThan(0, 'Should have received at least one event');",
                      "    });",
                      "}, timeout);",
                      "",
                      "// Initialize SSE connection",
                      "eventSource = new EventSource(pm.request.url.toString());",
                      "",
                      "// Event handlers",
                      "eventSource.addEventListener('message', function(event) {",
                      "    receivedEvents.push(event);",
                      "    const isValid = validateProgressEvent(event);",
                      "    pm.test('Event data is valid', function() {",
                      "        pm.expect(isValid).to.be.true;",
                      "    });",
                      "",
                      "    // Check for completion",
                      "    try {",
                      "        const data = JSON.parse(event.data);",
                      "        const status = (data.status || '').toLowerCase().replace(/_/g, '');",
                      "        if (status === 'success' || status === 'error') {",
                      "            eventSource.close();",
                      "            clearTimeout(timeoutId);",
                      "            pm.test('Received completion event', function() {",
                      "                pm.expect(['success', 'error']).to.include(status);",
                      "                if (status === 'success') {",
                      "                    pm.expect(data).to.have.property('final_score');",
                      "                }",
                      "                if (status === 'error') {",
                      "                    pm.expect(data).to.have.property('error');",
                      "                }",
                      "            });",
                      "        }",
                      "    } catch (e) {",
                      "        console.error('Error parsing completion event:', e);",
                      "    }",
                      "});",
                      "",
                      "eventSource.addEventListener('error', function(err) {",
                      "    console.error('SSE Error:', err);",
                      "    eventSource.close();",
                      "    clearTimeout(timeoutId);",
                      "    pm.test('SSE connection error', function() {",
                      "        pm.expect.fail('SSE connection failed');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "9c33c333-4d33-4084-990c-b1dcaaa4b3de"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a7383901-0b04-44ad-9aa6-62d1bb1030c6",
          "length": 48,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3ab23635-3944-428e-9eb5-2033a9aa7dff",
          "scriptId": "60611323-5973-44e8-861b-0af224e1b7dd",
          "execution": "9c33c333-4d33-4084-990c-b1dcaaa4b3de"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "ebbe4b99-8290-46db-8545-b5d4ad17fe2f",
          "timestamp": 1745424629170,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
          "name": "4.1 Valid Manual Scoring",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "manual-score",
                "%7B%7BmanualScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e462db2e-feb6-456a-9c16-406592a74511",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31854c3a-b09d-45d0-856a-95051276c175",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid manual score\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "87d18397-151c-47fb-a2fe-264f7469d300",
          "length": 48,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0b8affc2-f8af-4f5e-9e9c-95e8a436c284"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 for valid manual score",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "1eb20a87bf52211974220567b5b016e6",
          "id": "d86aa2b7-0956-4900-bec2-b24699b7e963",
          "timestamp": 1745424629176,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
          "name": "4.1 Valid Manual Scoring",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31854c3a-b09d-45d0-856a-95051276c175",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 for valid manual score\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "87d18397-151c-47fb-a2fe-264f7469d300",
          "length": 48,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0b8affc2-f8af-4f5e-9e9c-95e8a436c284",
          "scriptId": "31854c3a-b09d-45d0-856a-95051276c175",
          "execution": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "f7ad69c4-49f9-4a25-a258-51b41173b846",
          "timestamp": 1745424629235,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
          "name": "4.2 Invalid: Missing Score Field",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "manual-score",
                "%7B%7BmanualScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "a71a0d50-e25c-4995-a5ec-1c04752ca97e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions missing score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing score');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c6ced456-4669-491d-920e-42f924f25b95",
          "length": 48,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "30f653a4-4b30-49d0-97a8-d1a7ca81876e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for missing score",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "a1dfd764bca302d415ec4eb00151579c",
          "id": "e1e1e23f-4667-4d11-ae6a-8c1e72c8287f",
          "timestamp": 1745424629253,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
          "name": "4.2 Invalid: Missing Score Field",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions missing score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing score');",
                  "});"
                ],
                "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c6ced456-4669-491d-920e-42f924f25b95",
          "length": 48,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "30f653a4-4b30-49d0-97a8-d1a7ca81876e",
          "scriptId": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
          "execution": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error message mentions missing score",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "f45ff15d8b403be7db095b841b7921bb",
          "id": "a1f70b7a-2f7f-4d92-a051-eb0bd7f86532",
          "timestamp": 1745424629258,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
          "name": "4.2 Invalid: Missing Score Field",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for missing score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions missing score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Missing score');",
                  "});"
                ],
                "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c6ced456-4669-491d-920e-42f924f25b95",
          "length": 48,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "30f653a4-4b30-49d0-97a8-d1a7ca81876e",
          "scriptId": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
          "execution": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "68cec448-9152-40cd-b0ca-e506160eaf68",
          "timestamp": 1745424629328,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "84b85189-5b46-46a4-9a4b-42772479f624",
          "name": "4.3 Invalid: Non-numeric Score",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "manual-score",
                "%7B%7BmanualScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "72bbdf31-e667-4edd-b282-de1590157365",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"bad\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions invalid score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid score');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ecdc4bd2-d943-4ac6-8b7a-11bbd0485f31",
          "length": 48,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43739a1c-7cb9-47b9-9106-31d43130a4f3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for non-numeric score",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "a583de0f06a05c397dbe383ca692839e",
          "id": "f2f95bd7-00d5-40e7-8142-286d141186b2",
          "timestamp": 1745424629346,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "84b85189-5b46-46a4-9a4b-42772479f624",
          "name": "4.3 Invalid: Non-numeric Score",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"bad\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions invalid score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid score');",
                  "});"
                ],
                "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ecdc4bd2-d943-4ac6-8b7a-11bbd0485f31",
          "length": 48,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43739a1c-7cb9-47b9-9106-31d43130a4f3",
          "scriptId": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
          "execution": "0f0d36a6-508d-465b-8d29-5759ea174815"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error message mentions invalid score",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:26)",
          "checksum": "4a6a6c7e4d9cbbc4d52c9848955fdf92",
          "id": "e9158873-e6c4-42f0-b221-92c7305ea350",
          "timestamp": 1745424629349,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "84b85189-5b46-46a4-9a4b-42772479f624",
          "name": "4.3 Invalid: Non-numeric Score",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": \"bad\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions invalid score\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Invalid score');",
                  "});"
                ],
                "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ecdc4bd2-d943-4ac6-8b7a-11bbd0485f31",
          "length": 48,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43739a1c-7cb9-47b9-9106-31d43130a4f3",
          "scriptId": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
          "execution": "0f0d36a6-508d-465b-8d29-5759ea174815"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "09812d46-af2c-40c3-9ffb-67249225e689",
          "timestamp": 1745424629414,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
          "name": "4.4 Invalid: Extra Fields",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "manual-score",
                "%7B%7BmanualScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5b84c693-9898-49c0-9618-01eb758eea08",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for extra fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions extra fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Extra fields');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "bda3cbfb-edb6-4c76-b01e-83ff647e1d0e",
          "length": 48,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "53203f56-5fdb-4175-a0ef-be6d70ca5bdd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for extra fields",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "f5f22f72f767f38c383412979041d7a7",
          "id": "2a37c399-01c1-4926-b739-b23a26a6df38",
          "timestamp": 1745424629424,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
          "name": "4.4 Invalid: Extra Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for extra fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions extra fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Extra fields');",
                  "});"
                ],
                "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bda3cbfb-edb6-4c76-b01e-83ff647e1d0e",
          "length": 48,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "53203f56-5fdb-4175-a0ef-be6d70ca5bdd",
          "scriptId": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
          "execution": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error message mentions extra fields",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:27)",
          "checksum": "d4fb743a7baba58f6cbe9752f7445143",
          "id": "ce04eb81-757c-44fb-bbfc-5fb6efc3e591",
          "timestamp": 1745424629426,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
          "name": "4.4 Invalid: Extra Fields",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for extra fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions extra fields\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Extra fields');",
                  "});"
                ],
                "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bda3cbfb-edb6-4c76-b01e-83ff647e1d0e",
          "length": 48,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "53203f56-5fdb-4175-a0ef-be6d70ca5bdd",
          "scriptId": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
          "execution": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "b58dc623-5bf5-44d4-9805-8dd35a587d82",
          "timestamp": 1745424629486,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
          "name": "4.5 Invalid: Out-of-Range Score",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "manual-score",
                "%7B%7BmanualScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "581a8cf6-db4c-4cc0-a443-c33abcb8b898",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score range\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Score out of range');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2f177903-3ab0-4d0b-b0a8-8d6fc1dcac17",
          "length": 48,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b2c9d18-c929-4dfe-906b-21d2c4e6edac"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for out-of-range score",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "e4de59044e1fbf8b957dac364ccfbf98",
          "id": "4d56be7a-b3d3-4eb2-ae20-064c80dfc785",
          "timestamp": 1745424629493,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
          "name": "4.5 Invalid: Out-of-Range Score",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score range\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Score out of range');",
                  "});"
                ],
                "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2f177903-3ab0-4d0b-b0a8-8d6fc1dcac17",
          "length": 48,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b2c9d18-c929-4dfe-906b-21d2c4e6edac",
          "scriptId": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
          "execution": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error message mentions score range",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "8e9f9c24ddbf7c8a8b604090f7d8d87b",
          "id": "c7145356-9e97-4ce7-bcab-12b505310f73",
          "timestamp": 1745424629496,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
          "name": "4.5 Invalid: Out-of-Range Score",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 2.0\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score range\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('Score out of range');",
                  "});"
                ],
                "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2f177903-3ab0-4d0b-b0a8-8d6fc1dcac17",
          "length": 48,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b2c9d18-c929-4dfe-906b-21d2c4e6edac",
          "scriptId": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
          "execution": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "eb6a8e70-4d02-4cf6-bc9a-d85897cfdbcb",
          "timestamp": 1745424629573,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
          "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "llm",
                "reanalyze",
                "%7B%7BmanualScoreArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e561fd84-7b97-4ec5-ba4b-77d43b1595f8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score field not allowed\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('score field not allowed');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "e50869c6-5378-449e-ae07-4fe75e799918",
          "length": 48,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "27d762dc-c1be-4c5c-ba9d-564ff1a8c219"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 for manual score sent to LLM endpoint",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)",
          "checksum": "cde04de35fa332e9f3f4fdd3d4b06529",
          "id": "8a0b75a8-62ec-4af8-a1f3-1046877301c2",
          "timestamp": 1745424629583,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
          "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score field not allowed\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('score field not allowed');",
                  "});"
                ],
                "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e50869c6-5378-449e-ae07-4fe75e799918",
          "length": 48,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "27d762dc-c1be-4c5c-ba9d-564ff1a8c219",
          "scriptId": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
          "execution": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error message mentions score field not allowed",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:29)",
          "checksum": "5cde6a0c32cc2f6daf68a46dfc09993f",
          "id": "09f8a4c6-88f5-4317-9d90-ad84b511510a",
          "timestamp": 1745424629585,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
          "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
          "request": {
            "url": {
              "path": [
                "api",
                "llm",
                "reanalyze",
                "{{manualScoreArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Error message mentions score field not allowed\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.error.message).to.include('score field not allowed');",
                  "});"
                ],
                "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
              }
            }
          ]
        },
        "parent": {
          "id": "d3a86b65-0950-45a3-9b98-439071876cb0",
          "name": "4. Manual Scoring Tests",
          "description": {
            "content": "Tests for manual scoring endpoint. Ensures only { \"score\": number } is accepted and all error cases are handled.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "8fb4b474-263b-4037-b1c8-8a1e10c051e0",
              "name": "4.1 Valid Manual Scoring",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31854c3a-b09d-45d0-856a-95051276c175",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 for valid manual score\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e40b6009-c7c5-492e-a6f9-b700f2d819cb"
                  }
                }
              ]
            },
            {
              "id": "05e312e9-7dc5-4137-9902-efdc62d9c5d8",
              "name": "4.2 Invalid: Missing Score Field",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb62104-edc4-4422-96fa-aa5cc46fb3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for missing score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions missing score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Missing score');",
                      "});"
                    ],
                    "_lastExecutionId": "6b0c035f-a50d-4f13-8ba1-212b08aac7e7"
                  }
                }
              ]
            },
            {
              "id": "84b85189-5b46-46a4-9a4b-42772479f624",
              "name": "4.3 Invalid: Non-numeric Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": \"bad\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a679c71c-5c94-473c-b8a9-8425ebe2e13c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for non-numeric score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions invalid score\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Invalid score');",
                      "});"
                    ],
                    "_lastExecutionId": "0f0d36a6-508d-465b-8d29-5759ea174815"
                  }
                }
              ]
            },
            {
              "id": "83288c9b-573e-43bf-9e37-ca2fa30462af",
              "name": "4.4 Invalid: Extra Fields",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5,\n  \"foo\": \"bar\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c3c38fb-d1dd-40ee-93f7-c5012e5a1d1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for extra fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions extra fields\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Extra fields');",
                      "});"
                    ],
                    "_lastExecutionId": "c0434965-c15c-4f43-b4bd-08c0590b37bc"
                  }
                }
              ]
            },
            {
              "id": "75ff096b-fa37-4c59-a08b-754f850d5339",
              "name": "4.5 Invalid: Out-of-Range Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 2.0\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "295d2fbd-ae07-41a7-9337-5e31cd8c9ca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for out-of-range score\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score range\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('Score out of range');",
                      "});"
                    ],
                    "_lastExecutionId": "b735138d-ea4a-4ce4-9ec5-744217ead9c6"
                  }
                }
              ]
            },
            {
              "id": "838d96df-36f1-4046-b7e9-3d12ea38b7db",
              "name": "4.6 Invalid: Manual Score Sent to LLM Endpoint",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "llm",
                    "reanalyze",
                    "{{manualScoreArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400 for manual score sent to LLM endpoint\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "pm.test(\"Error message mentions score field not allowed\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.error.message).to.include('score field not allowed');",
                      "});"
                    ],
                    "_lastExecutionId": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e50869c6-5378-449e-ae07-4fe75e799918",
          "length": 48,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "27d762dc-c1be-4c5c-ba9d-564ff1a8c219",
          "scriptId": "871f3fb9-9957-43e1-8e45-c0c9f6e066eb",
          "execution": "bedc9487-ebd8-4f74-8e38-23c904d49c84"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "ec2d3ef6-8124-4ce9-8f8b-4c15d1caf285",
          "timestamp": 1745424629669,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "aa84abdf-17f1-4a21-80ee-be81f3bbd0bb",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "8477c2c6-67a3-4c6d-b7c4-697a3845fcea",
          "length": 48,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "81242c5d-4103-4844-b696-50bcae357dfe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "f5600e2cbaf102c7b1e7aab73b6982e1",
          "id": "755caea5-0171-4a90-af38-869aac6fa638",
          "timestamp": 1745424629676,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ],
                "_lastExecutionId": "97f7e916-7119-49b4-8fcc-f513485a70c6"
              }
            }
          ]
        },
        "parent": {
          "id": "1b47f66c-888e-4597-a7cd-d2689fc0b94d",
          "name": "4.1 Debug Feedback Handler",
          "item": [
            {
              "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
              "name": "Get Database Schema",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "debug",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains schema information\", function () {",
                      "    var json = pm.response.json();",
                      "    console.log(JSON.stringify(json, null, 2));",
                      "});"
                    ],
                    "_lastExecutionId": "97f7e916-7119-49b4-8fcc-f513485a70c6"
                  }
                }
              ]
            },
            {
              "id": "1aafc649-1b82-443f-a6e5-b8e922a6b362",
              "name": "Submit Feedback - Debug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Debug",
                    "value": "true"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edd4bcb6-ed4a-4083-9d1a-196ac42622bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Response received\", function () {",
                      "    console.log('Status code:', pm.response.code);",
                      "    console.log('Response body:', pm.response.text());",
                      "});",
                      "",
                      "try {",
                      "    var json = pm.response.json();",
                      "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                      "} catch (e) {",
                      "    console.log('Error parsing JSON:', e.message);",
                      "}"
                    ],
                    "_lastExecutionId": "2b212f92-6a57-4960-901e-d51f059414a6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8477c2c6-67a3-4c6d-b7c4-697a3845fcea",
          "length": 48,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "81242c5d-4103-4844-b696-50bcae357dfe",
          "scriptId": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
          "execution": "97f7e916-7119-49b4-8fcc-f513485a70c6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains schema information",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:30)",
          "checksum": "d17208764ffd358475a161274dd8e823",
          "id": "e7c3ee13-c6fe-4c92-b061-6eecc7d194b2",
          "timestamp": 1745424629677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
          "name": "Get Database Schema",
          "request": {
            "url": {
              "path": [
                "api",
                "debug",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains schema information\", function () {",
                  "    var json = pm.response.json();",
                  "    console.log(JSON.stringify(json, null, 2));",
                  "});"
                ],
                "_lastExecutionId": "97f7e916-7119-49b4-8fcc-f513485a70c6"
              }
            }
          ]
        },
        "parent": {
          "id": "1b47f66c-888e-4597-a7cd-d2689fc0b94d",
          "name": "4.1 Debug Feedback Handler",
          "item": [
            {
              "id": "ee8b7d0e-9c65-4b31-9d4f-3a00db8cd06f",
              "name": "Get Database Schema",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "debug",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response contains schema information\", function () {",
                      "    var json = pm.response.json();",
                      "    console.log(JSON.stringify(json, null, 2));",
                      "});"
                    ],
                    "_lastExecutionId": "97f7e916-7119-49b4-8fcc-f513485a70c6"
                  }
                }
              ]
            },
            {
              "id": "1aafc649-1b82-443f-a6e5-b8e922a6b362",
              "name": "Submit Feedback - Debug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Debug",
                    "value": "true"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{articleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edd4bcb6-ed4a-4083-9d1a-196ac42622bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Response received\", function () {",
                      "    console.log('Status code:', pm.response.code);",
                      "    console.log('Response body:', pm.response.text());",
                      "});",
                      "",
                      "try {",
                      "    var json = pm.response.json();",
                      "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                      "} catch (e) {",
                      "    console.log('Error parsing JSON:', e.message);",
                      "}"
                    ],
                    "_lastExecutionId": "2b212f92-6a57-4960-901e-d51f059414a6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8477c2c6-67a3-4c6d-b7c4-697a3845fcea",
          "length": 48,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "81242c5d-4103-4844-b696-50bcae357dfe",
          "scriptId": "79a31300-f82e-4ecb-af21-ddfd8c7473c7",
          "execution": "97f7e916-7119-49b4-8fcc-f513485a70c6"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "f4ac8425-224a-4b72-83ea-01c1fe3cd4ad",
          "timestamp": 1745424629769,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1aafc649-1b82-443f-a6e5-b8e922a6b362",
          "name": "Submit Feedback - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "4c3bce5b-8e5f-4192-a590-3678280856c6",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": 3977,\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"This is a test feedback for debugging.\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edd4bcb6-ed4a-4083-9d1a-196ac42622bb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "198440a0-213a-401f-b1ec-7c6ade018eef",
          "length": 48,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f53270d2-fb6a-4c5d-bbe6-8f09fa302848"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "098d7953-e915-42ca-98f6-dc335368c8c4",
          "timestamp": 1745424629887,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3eab7d8e-3bc0-4689-adf6-6c1789c44391",
          "name": "Create Article - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Debug",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2ccf8b28-070c-482b-b89f-bce4e6b8d413",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Debug Test Article\",\n  \"content\": \"This is a test article for debugging.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/debug-1745424630\",\n  \"pub_date\": \"2025-04-23T16:10:29.866Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb87c094-0523-4c80-8938-cf37a2bfdd07",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "    if (json.data && json.data.article_id) {",
                  "        pm.environment.set(\"debugArticleId\", json.data.article_id);",
                  "        console.log('Set debugArticleId to:', json.data.article_id);",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6d739c35-bdc8-4d6d-9235-01feb07a2ba9",
          "length": 48,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6b07be9e-420c-4f2b-8c15-b97fd3121502"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "ce63bdbf-4667-4096-a392-e83f7e9de587",
          "timestamp": 1745424629969,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "86ad96a3-4b7c-4249-8114-6d8e7b1d4d8f",
          "name": "Get Article - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BdebugArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "603a582c-1730-498a-9d13-846fcda2b91b",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc4edb51-9b01-4986-ab40-2856a1c8eaf9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "52f03839-25fd-423f-9ad7-03bfb52ddefb",
          "length": 48,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c8ee252f-3182-4bc2-9811-7eed25b83239"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "ad5b52b8-53eb-40af-b515-2964f33fff51",
          "timestamp": 1745424630040,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a81ab9a8-2677-42d0-b7bb-633d4a42e261",
          "name": "Get Articles - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "46fc5de7-f4d8-423e-9a52-bb2561a72c6e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8b4ceb7-f71b-475c-8295-20120c49d16e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response headers:', pm.response.headers.all());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Response structure:', Object.keys(json));",
                  "    if (json.data && Array.isArray(json.data)) {",
                  "        console.log('Number of articles:', json.data.length);",
                  "        if (json.data.length > 0) {",
                  "            console.log('First article structure:', Object.keys(json.data[0]));",
                  "            console.log('First article sample:', {",
                  "                id: json.data[0].id,",
                  "                title: json.data[0].title,",
                  "                source: json.data[0].source,",
                  "                composite_score: json.data[0].composite_score,",
                  "                confidence: json.data[0].confidence",
                  "            });",
                  "        }",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7d0f9a16-77ca-436b-baf8-637e74a5024a",
          "length": 48,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2258d7e0-d415-465d-9e39-25cffc23b73b"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'substring')",
          "checksum": "74fa7b1eff5b29603aab90349019b036",
          "id": "2843a258-0bd2-402e-8c0f-62282f31855d",
          "timestamp": 1745424630057,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a81ab9a8-2677-42d0-b7bb-633d4a42e261",
          "name": "Get Articles - Debug",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8b4ceb7-f71b-475c-8295-20120c49d16e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response headers:', pm.response.headers.all());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Response structure:', Object.keys(json));",
                  "    if (json.data && Array.isArray(json.data)) {",
                  "        console.log('Number of articles:', json.data.length);",
                  "        if (json.data.length > 0) {",
                  "            console.log('First article structure:', Object.keys(json.data[0]));",
                  "            console.log('First article sample:', {",
                  "                id: json.data[0].id,",
                  "                title: json.data[0].title,",
                  "                source: json.data[0].source,",
                  "                composite_score: json.data[0].composite_score,",
                  "                confidence: json.data[0].confidence",
                  "            });",
                  "        }",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                  "}"
                ],
                "_lastExecutionId": "f551d7b2-571e-4e01-919d-20ca56cb8315"
              }
            }
          ]
        },
        "parent": {
          "id": "201c926b-4631-4572-af0c-aec0e3527444",
          "name": "4.3 Debug Get Articles",
          "item": [
            {
              "id": "a81ab9a8-2677-42d0-b7bb-633d4a42e261",
              "name": "Get Articles - Debug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "debug",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8b4ceb7-f71b-475c-8295-20120c49d16e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Response received\", function () {",
                      "    console.log('Status code:', pm.response.code);",
                      "    console.log('Response headers:', pm.response.headers.all());",
                      "});",
                      "",
                      "try {",
                      "    var json = pm.response.json();",
                      "    console.log('Response structure:', Object.keys(json));",
                      "    if (json.data && Array.isArray(json.data)) {",
                      "        console.log('Number of articles:', json.data.length);",
                      "        if (json.data.length > 0) {",
                      "            console.log('First article structure:', Object.keys(json.data[0]));",
                      "            console.log('First article sample:', {",
                      "                id: json.data[0].id,",
                      "                title: json.data[0].title,",
                      "                source: json.data[0].source,",
                      "                composite_score: json.data[0].composite_score,",
                      "                confidence: json.data[0].confidence",
                      "            });",
                      "        }",
                      "    }",
                      "} catch (e) {",
                      "    console.log('Error parsing JSON:', e.message);",
                      "    console.log('Raw response:', pm.response.text().substring(0, 500) + '...');",
                      "}"
                    ],
                    "_lastExecutionId": "f551d7b2-571e-4e01-919d-20ca56cb8315"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7d0f9a16-77ca-436b-baf8-637e74a5024a",
          "length": 48,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2258d7e0-d415-465d-9e39-25cffc23b73b",
          "scriptId": "e8b4ceb7-f71b-475c-8295-20120c49d16e"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "4d923c13-b3e7-4894-a199-ee0b39826549",
          "timestamp": 1745424630117,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1510ebfc-a0eb-4160-a161-bc7cbe52de91",
          "name": "Get Ensemble Details - Debug",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BdebugArticleId%7D%7D",
                "ensemble"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "debug",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5f127a1b-3e50-40fe-9f85-d22f46413c48",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "49168db0-71af-4cfb-a8b0-0468163f6628",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response received\", function () {",
                  "    console.log('Status code:', pm.response.code);",
                  "    console.log('Response body:', pm.response.text());",
                  "});",
                  "",
                  "try {",
                  "    var json = pm.response.json();",
                  "    console.log('Parsed JSON:', JSON.stringify(json, null, 2));",
                  "} catch (e) {",
                  "    console.log('Error parsing JSON:', e.message);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ebae7274-f02c-4f8d-8205-b1414b1de460",
          "length": 48,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4f28173f-ba5d-4d90-a2bd-4221f8eaf05c"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "8620fcb2-2e63-4e36-a439-142a24d86d7b",
          "timestamp": 1745424630199,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
          "name": "Get Article - Cache Hit",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "3977"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "a7fc9728-dadf-4a55-9a49-cff7e088086e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Store response time for cache hit comparison",
                  "var firstResponseTime = pm.response.responseTime;",
                  "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                  "",
                  "// Store ETag if present",
                  "var etag = pm.response.headers.get(\"ETag\");",
                  "if (etag) {",
                  "    pm.environment.set(\"articleEtag\", etag);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "90461bf2-25c4-4679-8162-c234987a3ac8",
          "length": 48,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "01161195-9961-437c-a9c0-65755c801a37"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)",
          "checksum": "dabea6af1800e17f97bc7e6100c565e3",
          "id": "23a10df1-6c2e-476b-9656-6821f8bdb33b",
          "timestamp": 1745424630207,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
          "name": "Get Article - Cache Hit",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Store response time for cache hit comparison",
                  "var firstResponseTime = pm.response.responseTime;",
                  "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                  "",
                  "// Store ETag if present",
                  "var etag = pm.response.headers.get(\"ETag\");",
                  "if (etag) {",
                  "    pm.environment.set(\"articleEtag\", etag);",
                  "}"
                ],
                "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
              }
            }
          ]
        },
        "parent": {
          "id": "da04f39f-e076-4459-806c-266f8cc4d311",
          "name": "5.1 Cache Validation Tests",
          "item": [
            {
              "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
              "name": "Get Article - Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Store response time for cache hit comparison",
                      "var firstResponseTime = pm.response.responseTime;",
                      "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                      "",
                      "// Store ETag if present",
                      "var etag = pm.response.headers.get(\"ETag\");",
                      "if (etag) {",
                      "    pm.environment.set(\"articleEtag\", etag);",
                      "}"
                    ],
                    "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
                  }
                }
              ]
            },
            {
              "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
              "name": "Get Article - Validate Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "{{articleEtag}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 304 for cached response\", function () {",
                      "    pm.response.to.have.status(304);",
                      "});"
                    ],
                    "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
                  }
                }
              ]
            },
            {
              "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
              "name": "Get Articles - Cache Performance",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Verify response time improvement from caching",
                      "var cachedResponseTime = pm.response.responseTime;",
                      "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                      "",
                      "pm.test(\"Cached response should be faster\", function () {",
                      "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                      "});"
                    ],
                    "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "90461bf2-25c4-4679-8162-c234987a3ac8",
          "length": 48,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "01161195-9961-437c-a9c0-65755c801a37",
          "scriptId": "80fde67e-e665-4ef7-be83-fe4443047488",
          "execution": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "03292be1-d118-4a23-9339-4f7d4d747f25",
          "timestamp": 1745424630261,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
          "name": "Get Article - Validate Cache Hit",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "3977"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "If-None-Match",
                "value": "{{articleEtag}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9a766e30-784d-441e-a7c8-e8d1b22f65a1",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 304 for cached response\", function () {",
                  "    pm.response.to.have.status(304);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "214d82f1-e718-40e7-a43a-12df17e829de",
          "length": 48,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2ddda20f-79a8-4baf-b800-2ada4c772112"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 304 for cached response",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)",
          "checksum": "a653340061da522f499061e2df594387",
          "id": "341e02c4-2d25-433a-b25a-b036468794b9",
          "timestamp": 1745424630280,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 37,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
          "name": "Get Article - Validate Cache Hit",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{articleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "If-None-Match",
                "value": "{{articleEtag}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 304 for cached response\", function () {",
                  "    pm.response.to.have.status(304);",
                  "});"
                ],
                "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
              }
            }
          ]
        },
        "parent": {
          "id": "da04f39f-e076-4459-806c-266f8cc4d311",
          "name": "5.1 Cache Validation Tests",
          "item": [
            {
              "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
              "name": "Get Article - Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Store response time for cache hit comparison",
                      "var firstResponseTime = pm.response.responseTime;",
                      "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                      "",
                      "// Store ETag if present",
                      "var etag = pm.response.headers.get(\"ETag\");",
                      "if (etag) {",
                      "    pm.environment.set(\"articleEtag\", etag);",
                      "}"
                    ],
                    "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
                  }
                }
              ]
            },
            {
              "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
              "name": "Get Article - Validate Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "{{articleEtag}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 304 for cached response\", function () {",
                      "    pm.response.to.have.status(304);",
                      "});"
                    ],
                    "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
                  }
                }
              ]
            },
            {
              "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
              "name": "Get Articles - Cache Performance",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Verify response time improvement from caching",
                      "var cachedResponseTime = pm.response.responseTime;",
                      "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                      "",
                      "pm.test(\"Cached response should be faster\", function () {",
                      "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                      "});"
                    ],
                    "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "214d82f1-e718-40e7-a43a-12df17e829de",
          "length": 48,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2ddda20f-79a8-4baf-b800-2ada4c772112",
          "scriptId": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
          "execution": "278838a8-7dca-4768-9b88-dde2a8418a72"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "b1758ce5-731e-4768-a996-272750caf637",
          "timestamp": 1745424630344,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
          "name": "Get Articles - Cache Performance",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8f069dc3-0c00-4b94-8b23-c6cc62840cfc",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify response time improvement from caching",
                  "var cachedResponseTime = pm.response.responseTime;",
                  "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                  "",
                  "pm.test(\"Cached response should be faster\", function () {",
                  "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "8b0ef71b-e1a5-4cf7-978d-9104a955cb66",
          "length": 48,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41fa5d13-d20e-459d-930a-813763edcd7d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)",
          "checksum": "1a49d7e2c86bd8bc4c6f77e840aa0f01",
          "id": "dbd19c02-dc17-4244-9e0b-6ae2d1951a98",
          "timestamp": 1745424630353,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
          "name": "Get Articles - Cache Performance",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify response time improvement from caching",
                  "var cachedResponseTime = pm.response.responseTime;",
                  "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                  "",
                  "pm.test(\"Cached response should be faster\", function () {",
                  "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                  "});"
                ],
                "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
              }
            }
          ]
        },
        "parent": {
          "id": "da04f39f-e076-4459-806c-266f8cc4d311",
          "name": "5.1 Cache Validation Tests",
          "item": [
            {
              "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
              "name": "Get Article - Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Store response time for cache hit comparison",
                      "var firstResponseTime = pm.response.responseTime;",
                      "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                      "",
                      "// Store ETag if present",
                      "var etag = pm.response.headers.get(\"ETag\");",
                      "if (etag) {",
                      "    pm.environment.set(\"articleEtag\", etag);",
                      "}"
                    ],
                    "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
                  }
                }
              ]
            },
            {
              "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
              "name": "Get Article - Validate Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "{{articleEtag}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 304 for cached response\", function () {",
                      "    pm.response.to.have.status(304);",
                      "});"
                    ],
                    "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
                  }
                }
              ]
            },
            {
              "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
              "name": "Get Articles - Cache Performance",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Verify response time improvement from caching",
                      "var cachedResponseTime = pm.response.responseTime;",
                      "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                      "",
                      "pm.test(\"Cached response should be faster\", function () {",
                      "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                      "});"
                    ],
                    "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8b0ef71b-e1a5-4cf7-978d-9104a955cb66",
          "length": 48,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41fa5d13-d20e-459d-930a-813763edcd7d",
          "scriptId": "1a933db1-256b-4738-89d2-8a097ef306da",
          "execution": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Cached response should be faster",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:38)",
          "checksum": "067581dabe71ca3e4521c87d0038d76a",
          "id": "ae4f8c72-fc24-4eca-b595-6bea131cbb87",
          "timestamp": 1745424630356,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
          "name": "Get Articles - Cache Performance",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify response time improvement from caching",
                  "var cachedResponseTime = pm.response.responseTime;",
                  "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                  "",
                  "pm.test(\"Cached response should be faster\", function () {",
                  "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                  "});"
                ],
                "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
              }
            }
          ]
        },
        "parent": {
          "id": "da04f39f-e076-4459-806c-266f8cc4d311",
          "name": "5.1 Cache Validation Tests",
          "item": [
            {
              "id": "209ad25d-41f2-404e-a4ac-755be2ec02c2",
              "name": "Get Article - Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80fde67e-e665-4ef7-be83-fe4443047488",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Store response time for cache hit comparison",
                      "var firstResponseTime = pm.response.responseTime;",
                      "pm.environment.set(\"firstResponseTime\", firstResponseTime);",
                      "",
                      "// Store ETag if present",
                      "var etag = pm.response.headers.get(\"ETag\");",
                      "if (etag) {",
                      "    pm.environment.set(\"articleEtag\", etag);",
                      "}"
                    ],
                    "_lastExecutionId": "085324ba-6169-4f2b-a1f9-e1d838050fb5"
                  }
                }
              ]
            },
            {
              "id": "cc62d6d4-3506-4a75-8ac4-37c6ebee8f5b",
              "name": "Get Article - Validate Cache Hit",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{articleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "{{articleEtag}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8aae7d7e-658d-4a01-870c-0c46f6287d5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 304 for cached response\", function () {",
                      "    pm.response.to.have.status(304);",
                      "});"
                    ],
                    "_lastExecutionId": "278838a8-7dca-4768-9b88-dde2a8418a72"
                  }
                }
              ]
            },
            {
              "id": "34ee379d-7ecf-4ccf-8052-5a55c2712dda",
              "name": "Get Articles - Cache Performance",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a933db1-256b-4738-89d2-8a097ef306da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Verify response time improvement from caching",
                      "var cachedResponseTime = pm.response.responseTime;",
                      "var firstResponseTime = Number(pm.environment.get(\"firstResponseTime\"));",
                      "",
                      "pm.test(\"Cached response should be faster\", function () {",
                      "    pm.expect(cachedResponseTime).to.be.below(firstResponseTime);",
                      "});"
                    ],
                    "_lastExecutionId": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8b0ef71b-e1a5-4cf7-978d-9104a955cb66",
          "length": 48,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41fa5d13-d20e-459d-930a-813763edcd7d",
          "scriptId": "1a933db1-256b-4738-89d2-8a097ef306da",
          "execution": "0f719fa1-b66c-4c24-a3f6-75c4088c5fe1"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "609b0a1f-8da8-4833-aa4a-e519e93c6a02",
          "timestamp": 1745424630413,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
          "name": "Concurrent Article Creation",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "342631e7-f1d7-41a4-b422-97c8f78826cb",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Concurrent Test Article 1745424630\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-1745424630\",\n  \"pub_date\": \"2025-04-23T16:10:30.407Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Store article ID for concurrent operations",
                  "var json = pm.response.json();",
                  "if (json.data && json.data.article_id) {",
                  "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "22753472-5db6-433d-a1a9-088a0b6c6c31",
          "length": 48,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0038d240-f476-4abe-a2db-2dce2c0630ee"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 201",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:39)",
          "checksum": "1ea492733422523617f030e65ff3ce50",
          "id": "d26f89a7-398e-4b99-ba4a-43c39ac3d116",
          "timestamp": 1745424630421,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
          "name": "Concurrent Article Creation",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Store article ID for concurrent operations",
                  "var json = pm.response.json();",
                  "if (json.data && json.data.article_id) {",
                  "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                  "}"
                ],
                "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
              }
            }
          ]
        },
        "parent": {
          "id": "d9632815-0850-416f-85a0-a1e66166fab0",
          "name": "5.2 Concurrent Operations Tests",
          "item": [
            {
              "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
              "name": "Concurrent Article Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Store article ID for concurrent operations",
                      "var json = pm.response.json();",
                      "if (json.data && json.data.article_id) {",
                      "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                  }
                }
              ]
            },
            {
              "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
              "name": "Concurrent Score Updates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{concurrentArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response indicates successful update\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                  }
                }
              ]
            },
            {
              "id": "3c83912c-948b-4907-b445-66cd93909668",
              "name": "Concurrent Feedback Submission",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Feedback submission successful\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22753472-5db6-433d-a1a9-088a0b6c6c31",
          "length": 48,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0038d240-f476-4abe-a2db-2dce2c0630ee",
          "scriptId": "7300a467-bf3e-4884-a3dd-3caba756e7de",
          "execution": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "948b9e53-214d-49f0-86c5-99a2038a96bf",
          "timestamp": 1745424630424,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
          "name": "Concurrent Article Creation",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Store article ID for concurrent operations",
                  "var json = pm.response.json();",
                  "if (json.data && json.data.article_id) {",
                  "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                  "}"
                ],
                "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
              }
            }
          ]
        },
        "parent": {
          "id": "d9632815-0850-416f-85a0-a1e66166fab0",
          "name": "5.2 Concurrent Operations Tests",
          "item": [
            {
              "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
              "name": "Concurrent Article Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Store article ID for concurrent operations",
                      "var json = pm.response.json();",
                      "if (json.data && json.data.article_id) {",
                      "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                  }
                }
              ]
            },
            {
              "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
              "name": "Concurrent Score Updates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{concurrentArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response indicates successful update\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                  }
                }
              ]
            },
            {
              "id": "3c83912c-948b-4907-b445-66cd93909668",
              "name": "Concurrent Feedback Submission",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Feedback submission successful\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22753472-5db6-433d-a1a9-088a0b6c6c31",
          "length": 48,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0038d240-f476-4abe-a2db-2dce2c0630ee",
          "scriptId": "7300a467-bf3e-4884-a3dd-3caba756e7de"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "2bddac43-2fd1-4a70-94dc-a465679bdbc1",
          "timestamp": 1745424630495,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
          "name": "Concurrent Score Updates",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "manual-score",
                "%7B%7BconcurrentArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3f6e9015-8d62-4070-ab61-3627baae591a",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates successful update\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "1b15503b-dc74-4b11-90ee-b748925471f3",
          "length": 48,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1f91e3d-d1de-49ce-b26a-2e90f2eaebb8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)",
          "checksum": "6e4b03ad0fb30a145a69305b2a51744b",
          "id": "a3a8faed-1dc2-49d5-ab86-9137151be31c",
          "timestamp": 1745424630505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
          "name": "Concurrent Score Updates",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{concurrentArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates successful update\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
              }
            }
          ]
        },
        "parent": {
          "id": "d9632815-0850-416f-85a0-a1e66166fab0",
          "name": "5.2 Concurrent Operations Tests",
          "item": [
            {
              "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
              "name": "Concurrent Article Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Store article ID for concurrent operations",
                      "var json = pm.response.json();",
                      "if (json.data && json.data.article_id) {",
                      "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                  }
                }
              ]
            },
            {
              "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
              "name": "Concurrent Score Updates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{concurrentArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response indicates successful update\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                  }
                }
              ]
            },
            {
              "id": "3c83912c-948b-4907-b445-66cd93909668",
              "name": "Concurrent Feedback Submission",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Feedback submission successful\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1b15503b-dc74-4b11-90ee-b748925471f3",
          "length": 48,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1f91e3d-d1de-49ce-b26a-2e90f2eaebb8",
          "scriptId": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
          "execution": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response indicates successful update",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:40)",
          "checksum": "67903488034aad7a378871419450bcfb",
          "id": "5ba1f9cc-7384-4fd8-8cfb-f4eb79e76884",
          "timestamp": 1745424630506,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
          "name": "Concurrent Score Updates",
          "request": {
            "url": {
              "path": [
                "api",
                "manual-score",
                "{{concurrentArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 0.5\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates successful update\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
              }
            }
          ]
        },
        "parent": {
          "id": "d9632815-0850-416f-85a0-a1e66166fab0",
          "name": "5.2 Concurrent Operations Tests",
          "item": [
            {
              "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
              "name": "Concurrent Article Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Store article ID for concurrent operations",
                      "var json = pm.response.json();",
                      "if (json.data && json.data.article_id) {",
                      "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                  }
                }
              ]
            },
            {
              "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
              "name": "Concurrent Score Updates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{concurrentArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response indicates successful update\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                  }
                }
              ]
            },
            {
              "id": "3c83912c-948b-4907-b445-66cd93909668",
              "name": "Concurrent Feedback Submission",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Feedback submission successful\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1b15503b-dc74-4b11-90ee-b748925471f3",
          "length": 48,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1f91e3d-d1de-49ce-b26a-2e90f2eaebb8",
          "scriptId": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
          "execution": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "a781141d-826a-4b4a-8243-d840571043ad",
          "timestamp": 1745424630562,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3c83912c-948b-4907-b445-66cd93909668",
          "name": "Concurrent Feedback Submission",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "423f27ed-6c7c-4cf2-9724-21c1e7d8b3a9",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Feedback submission successful\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2d31fdb6-dfa2-4e6d-8052-f60943492fdc",
          "length": 48,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bb537c9b-d766-4468-8cc7-d4e45250dc31"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)",
          "checksum": "4c11380351ad0954f158b064ff1d1eee",
          "id": "3c584ddc-b98d-49fc-b58a-143f0efa5bec",
          "timestamp": 1745424630577,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 41,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3c83912c-948b-4907-b445-66cd93909668",
          "name": "Concurrent Feedback Submission",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Feedback submission successful\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
              }
            }
          ]
        },
        "parent": {
          "id": "d9632815-0850-416f-85a0-a1e66166fab0",
          "name": "5.2 Concurrent Operations Tests",
          "item": [
            {
              "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
              "name": "Concurrent Article Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Store article ID for concurrent operations",
                      "var json = pm.response.json();",
                      "if (json.data && json.data.article_id) {",
                      "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                  }
                }
              ]
            },
            {
              "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
              "name": "Concurrent Score Updates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{concurrentArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response indicates successful update\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                  }
                }
              ]
            },
            {
              "id": "3c83912c-948b-4907-b445-66cd93909668",
              "name": "Concurrent Feedback Submission",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Feedback submission successful\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d31fdb6-dfa2-4e6d-8052-f60943492fdc",
          "length": 48,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bb537c9b-d766-4468-8cc7-d4e45250dc31",
          "scriptId": "93525616-6c35-4392-a027-a5fb6703b1b0",
          "execution": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Feedback submission successful",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:41)",
          "checksum": "8a1523d99caaadd5c07432ec96fe3749",
          "id": "ff83e158-544f-4e75-87f3-0426687bf925",
          "timestamp": 1745424630579,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 41,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3c83912c-948b-4907-b445-66cd93909668",
          "name": "Concurrent Feedback Submission",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Feedback submission successful\", function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
              }
            }
          ]
        },
        "parent": {
          "id": "d9632815-0850-416f-85a0-a1e66166fab0",
          "name": "5.2 Concurrent Operations Tests",
          "item": [
            {
              "id": "3aba86ea-669d-4875-bac3-4055bfe03055",
              "name": "Concurrent Article Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Concurrent Test Article {{$timestamp}}\",\n  \"content\": \"This is a test article for concurrent operations.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/concurrent-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7300a467-bf3e-4884-a3dd-3caba756e7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", function () {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Store article ID for concurrent operations",
                      "var json = pm.response.json();",
                      "if (json.data && json.data.article_id) {",
                      "    pm.environment.set(\"concurrentArticleId\", json.data.article_id);",
                      "}"
                    ],
                    "_lastExecutionId": "6b480844-e063-45eb-b2fe-2fd3bf50d623"
                  }
                }
              ]
            },
            {
              "id": "be71f06b-3640-47fa-9539-dd74a5fe934d",
              "name": "Concurrent Score Updates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "manual-score",
                    "{{concurrentArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"score\": 0.5\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41d9b8fc-8cd8-4bc2-a602-79c3e32a39c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response indicates successful update\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7ebfcc24-5171-425d-bf39-5f3310073c7f"
                  }
                }
              ]
            },
            {
              "id": "3c83912c-948b-4907-b445-66cd93909668",
              "name": "Concurrent Feedback Submission",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{concurrentArticleId}},\n  \"user_id\": \"test-user-concurrent\",\n  \"feedback_text\": \"Concurrent feedback test\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93525616-6c35-4392-a027-a5fb6703b1b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Feedback submission successful\", function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d31fdb6-dfa2-4e6d-8052-f60943492fdc",
          "length": 48,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bb537c9b-d766-4468-8cc7-d4e45250dc31",
          "scriptId": "93525616-6c35-4392-a027-a5fb6703b1b0",
          "execution": "671f15a7-bacd-4f80-bc34-29273bc1fc53"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "9a7eb352-393e-43b3-8e8b-68e5545e181b",
          "timestamp": 1745424630644,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "73c7328a-3a12-4914-8e7e-759febacc468",
          "name": "Create Article and Check Initial Confidence",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d1ddbe71-e0ca-4161-95c9-a04836e56b8d",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-1745424631\",\n  \"pub_date\": \"2025-04-23T16:10:30.623Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "f4c8227e-8b32-46a8-b4a8-42a354a9da9d",
          "length": 48,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ac4eaa5-9090-4b09-809d-9d3c9a7ccf8d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)",
          "checksum": "0e2f8e1b6a4ab9d6e3bf8e44d03425ae",
          "id": "e1c0af03-08e3-49c5-8d11-017043e25c59",
          "timestamp": 1745424630654,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 42,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "73c7328a-3a12-4914-8e7e-759febacc468",
          "name": "Create Article and Check Initial Confidence",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                ],
                "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
              }
            }
          ]
        },
        "parent": {
          "id": "359dca70-dce0-4967-8dde-df13354192db",
          "name": "6.1 Initial Confidence Tests",
          "item": [
            {
              "id": "73c7328a-3a12-4914-8e7e-759febacc468",
              "name": "Create Article and Check Initial Confidence",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                    ],
                    "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
                  }
                }
              ]
            },
            {
              "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
              "name": "Get Article and Verify Initial Confidence Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Initial confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var confidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(confidence).to.exist;",
                      "    pm.expect(confidence).to.be.a('number');",
                      "    pm.expect(confidence).to.be.within(0, 1);",
                      "    pm.environment.set(\"initialConfidence\", confidence);",
                      "});"
                    ],
                    "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f4c8227e-8b32-46a8-b4a8-42a354a9da9d",
          "length": 48,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ac4eaa5-9090-4b09-809d-9d3c9a7ccf8d",
          "scriptId": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
          "execution": "32f5d149-a0b7-410f-abf1-db87d59a178e"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "7feecb4f-904b-4ad2-9da3-cf17919abde6",
          "timestamp": 1745424630659,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "73c7328a-3a12-4914-8e7e-759febacc468",
          "name": "Create Article and Check Initial Confidence",
          "request": {
            "url": {
              "path": [
                "api",
                "articles"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                ],
                "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
              }
            }
          ]
        },
        "parent": {
          "id": "359dca70-dce0-4967-8dde-df13354192db",
          "name": "6.1 Initial Confidence Tests",
          "item": [
            {
              "id": "73c7328a-3a12-4914-8e7e-759febacc468",
              "name": "Create Article and Check Initial Confidence",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                    ],
                    "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
                  }
                }
              ]
            },
            {
              "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
              "name": "Get Article and Verify Initial Confidence Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Initial confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var confidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(confidence).to.exist;",
                      "    pm.expect(confidence).to.be.a('number');",
                      "    pm.expect(confidence).to.be.within(0, 1);",
                      "    pm.environment.set(\"initialConfidence\", confidence);",
                      "});"
                    ],
                    "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f4c8227e-8b32-46a8-b4a8-42a354a9da9d",
          "length": 48,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ac4eaa5-9090-4b09-809d-9d3c9a7ccf8d",
          "scriptId": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "86551b11-65e7-4c89-a0eb-460a65ee4e3a",
          "timestamp": 1745424630747,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
          "name": "Get Article and Verify Initial Confidence Score",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BconfidenceArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d5c51ced-72a3-4b03-af61-34c0440a5add",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Initial confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var confidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(confidence).to.exist;",
                  "    pm.expect(confidence).to.be.a('number');",
                  "    pm.expect(confidence).to.be.within(0, 1);",
                  "    pm.environment.set(\"initialConfidence\", confidence);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "5489c6fd-5971-4807-ab9b-8de47a0ccfe0",
          "length": 48,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "55d19b69-8d1d-4b63-bb6c-bbd934bfbd36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)",
          "checksum": "3e162d6dd8546aafa3ad5a99bf87374a",
          "id": "8a534c46-ef9d-46d5-a66f-d74ce4ac00dd",
          "timestamp": 1745424630754,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 43,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
          "name": "Get Article and Verify Initial Confidence Score",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Initial confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var confidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(confidence).to.exist;",
                  "    pm.expect(confidence).to.be.a('number');",
                  "    pm.expect(confidence).to.be.within(0, 1);",
                  "    pm.environment.set(\"initialConfidence\", confidence);",
                  "});"
                ],
                "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
              }
            }
          ]
        },
        "parent": {
          "id": "359dca70-dce0-4967-8dde-df13354192db",
          "name": "6.1 Initial Confidence Tests",
          "item": [
            {
              "id": "73c7328a-3a12-4914-8e7e-759febacc468",
              "name": "Create Article and Check Initial Confidence",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                    ],
                    "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
                  }
                }
              ]
            },
            {
              "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
              "name": "Get Article and Verify Initial Confidence Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Initial confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var confidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(confidence).to.exist;",
                      "    pm.expect(confidence).to.be.a('number');",
                      "    pm.expect(confidence).to.be.within(0, 1);",
                      "    pm.environment.set(\"initialConfidence\", confidence);",
                      "});"
                    ],
                    "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5489c6fd-5971-4807-ab9b-8de47a0ccfe0",
          "length": 48,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "55d19b69-8d1d-4b63-bb6c-bbd934bfbd36",
          "scriptId": "1e5f666b-1d97-4f45-811e-54001b645ccb",
          "execution": "ba5cd908-343d-4b22-832b-18b15244bd0e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Initial confidence validation",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:43)",
          "checksum": "a2166bd137381ff2ba318b6c701e0820",
          "id": "f11e5729-ae63-43eb-8af2-12eb54b103ae",
          "timestamp": 1745424630755,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 43,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
          "name": "Get Article and Verify Initial Confidence Score",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Initial confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var confidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(confidence).to.exist;",
                  "    pm.expect(confidence).to.be.a('number');",
                  "    pm.expect(confidence).to.be.within(0, 1);",
                  "    pm.environment.set(\"initialConfidence\", confidence);",
                  "});"
                ],
                "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
              }
            }
          ]
        },
        "parent": {
          "id": "359dca70-dce0-4967-8dde-df13354192db",
          "name": "6.1 Initial Confidence Tests",
          "item": [
            {
              "id": "73c7328a-3a12-4914-8e7e-759febacc468",
              "name": "Create Article and Check Initial Confidence",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Confidence Test Article\",\n  \"content\": \"This is a test article for confidence validation.\",\n  \"source\": \"test\",\n  \"url\": \"https://example.com/confidence-{{$timestamp}}\",\n  \"pub_date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc36aefb-62f9-471b-a8d0-0828a8e3c8a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "pm.environment.set(\"confidenceArticleId\", json.data.article_id);"
                    ],
                    "_lastExecutionId": "32f5d149-a0b7-410f-abf1-db87d59a178e"
                  }
                }
              ]
            },
            {
              "id": "3ee5dd43-a957-4eb0-a19a-a699c2cb3cbb",
              "name": "Get Article and Verify Initial Confidence Score",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e5f666b-1d97-4f45-811e-54001b645ccb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Initial confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var confidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(confidence).to.exist;",
                      "    pm.expect(confidence).to.be.a('number');",
                      "    pm.expect(confidence).to.be.within(0, 1);",
                      "    pm.environment.set(\"initialConfidence\", confidence);",
                      "});"
                    ],
                    "_lastExecutionId": "ba5cd908-343d-4b22-832b-18b15244bd0e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5489c6fd-5971-4807-ab9b-8de47a0ccfe0",
          "length": 48,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "55d19b69-8d1d-4b63-bb6c-bbd934bfbd36",
          "scriptId": "1e5f666b-1d97-4f45-811e-54001b645ccb",
          "execution": "ba5cd908-343d-4b22-832b-18b15244bd0e"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "936a7467-06ff-445a-81ad-cc948d5f2e29",
          "timestamp": 1745424630844,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
          "name": "Submit Initial Feedback",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6790ebe3-0e73-4b4c-8c28-c44b18bb2efa",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "8f237f5e-6abb-4056-be3a-e7824a23244b",
          "length": 48,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "63a62513-47a0-433a-a813-1a9d1cc243a5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)",
          "checksum": "c98e0bc8624fc45ff1c9dbd701efbf30",
          "id": "89bae2fe-8ee0-4e89-b9dc-e6424e5188d4",
          "timestamp": 1745424630854,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 44,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
          "name": "Submit Initial Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
              }
            }
          ]
        },
        "parent": {
          "id": "3e0b1eff-abe8-490e-901b-fa8f24006b11",
          "name": "6.2 Feedback Impact on Confidence",
          "item": [
            {
              "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
              "name": "Submit Initial Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
                  }
                }
              ]
            },
            {
              "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
              "name": "Submit Multiple Feedback Items",
              "item": [
                {
                  "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
                  "name": "Submit Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                      }
                    }
                  ]
                },
                {
                  "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
                  "name": "Submit Additional Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                      }
                    }
                  ]
                }
              ],
              "event": []
            },
            {
              "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
              "name": "Verify Confidence After Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "var currentConfidence = json.data.article.confidence;",
                      "",
                      "if (currentConfidence > 0) {",
                      "    pm.test(\"Confidence updated after feedback\", function () {",
                      "        pm.expect(currentConfidence).to.be.within(0, 1);",
                      "        pm.expect(currentConfidence).to.be.above(0);",
                      "    });",
                      "} else {",
                      "    // Set delay for retry",
                      "    setTimeout(function(){}, 1000);",
                      "}"
                    ],
                    "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
                  }
                }
              ]
            },
            {
              "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
              "name": "Second Confidence Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Final confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var currentConfidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(currentConfidence).to.exist;",
                      "    pm.expect(currentConfidence).to.be.a('number');",
                      "    pm.expect(currentConfidence).to.be.within(0, 1);",
                      "    ",
                      "    // Log confidence value for debugging",
                      "    console.log('Final confidence value:', currentConfidence);",
                      "});"
                    ],
                    "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f237f5e-6abb-4056-be3a-e7824a23244b",
          "length": 48,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "63a62513-47a0-433a-a813-1a9d1cc243a5",
          "scriptId": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
          "execution": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "321cf03a-6c69-490d-b329-e433c8279380",
          "timestamp": 1745424630910,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
          "name": "Submit Agree Feedback",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1848888b-147e-47f8-b1d3-af6fab578103",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "0051bd5a-f38a-4b0f-8a89-d446f5b5478c",
          "length": 48,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2d1348a8-ae53-4ee1-9e39-d62c9c39aa85"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)",
          "checksum": "94d7b28e549bfd8c44040958cbec0546",
          "id": "18f97c04-0f01-476e-ade3-58cdee276600",
          "timestamp": 1745424630918,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 45,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
          "name": "Submit Agree Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
              }
            }
          ]
        },
        "parent": {
          "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
          "name": "Submit Multiple Feedback Items",
          "item": [
            {
              "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
              "name": "Submit Agree Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                  }
                }
              ]
            },
            {
              "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
              "name": "Submit Additional Agree Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0051bd5a-f38a-4b0f-8a89-d446f5b5478c",
          "length": 48,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2d1348a8-ae53-4ee1-9e39-d62c9c39aa85",
          "scriptId": "dd70e7b9-b926-4817-a44a-ab260ac63407",
          "execution": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "dff0489e-8035-4d2a-a271-929ef62e1244",
          "timestamp": 1745424630962,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
          "name": "Submit Additional Agree Feedback",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "cd3447a1-e033-49ea-9a1c-0600a5d3d597",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "28a26935-05d9-4ba6-88ec-84d993984b2b",
          "length": 48,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "702b11a3-1c77-496f-a945-470cbdff66c2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)",
          "checksum": "217ccda31e3676f0d29192b9ba0caeef",
          "id": "ef587d9d-7130-41ca-81aa-3d560ae70321",
          "timestamp": 1745424630970,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 46,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
          "name": "Submit Additional Agree Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "feedback"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
              }
            }
          ]
        },
        "parent": {
          "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
          "name": "Submit Multiple Feedback Items",
          "item": [
            {
              "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
              "name": "Submit Agree Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                  }
                }
              ]
            },
            {
              "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
              "name": "Submit Additional Agree Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "28a26935-05d9-4ba6-88ec-84d993984b2b",
          "length": 48,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "702b11a3-1c77-496f-a945-470cbdff66c2",
          "scriptId": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
          "execution": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "42ecfef3-685f-41a8-a53e-77e8dc9f2b26",
          "timestamp": 1745424631017,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
          "name": "Verify Confidence After Feedback",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BconfidenceArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "14370795-a54c-4f98-8364-6f3951587495",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "var currentConfidence = json.data.article.confidence;",
                  "",
                  "if (currentConfidence > 0) {",
                  "    pm.test(\"Confidence updated after feedback\", function () {",
                  "        pm.expect(currentConfidence).to.be.within(0, 1);",
                  "        pm.expect(currentConfidence).to.be.above(0);",
                  "    });",
                  "} else {",
                  "    // Set delay for retry",
                  "    setTimeout(function(){}, 1000);",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3b08cd65-0d21-42af-ab8b-8b380876d4e8",
          "length": 48,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61301404-d135-4a2a-91b5-455072375521"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)",
          "checksum": "585481990a1173b8e184fd3c80f24429",
          "id": "a87a5162-0973-4fd1-b2ab-38405741d340",
          "timestamp": 1745424631028,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 47,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
          "name": "Verify Confidence After Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "var currentConfidence = json.data.article.confidence;",
                  "",
                  "if (currentConfidence > 0) {",
                  "    pm.test(\"Confidence updated after feedback\", function () {",
                  "        pm.expect(currentConfidence).to.be.within(0, 1);",
                  "        pm.expect(currentConfidence).to.be.above(0);",
                  "    });",
                  "} else {",
                  "    // Set delay for retry",
                  "    setTimeout(function(){}, 1000);",
                  "}"
                ],
                "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
              }
            }
          ]
        },
        "parent": {
          "id": "3e0b1eff-abe8-490e-901b-fa8f24006b11",
          "name": "6.2 Feedback Impact on Confidence",
          "item": [
            {
              "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
              "name": "Submit Initial Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
                  }
                }
              ]
            },
            {
              "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
              "name": "Submit Multiple Feedback Items",
              "item": [
                {
                  "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
                  "name": "Submit Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                      }
                    }
                  ]
                },
                {
                  "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
                  "name": "Submit Additional Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                      }
                    }
                  ]
                }
              ],
              "event": []
            },
            {
              "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
              "name": "Verify Confidence After Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "var currentConfidence = json.data.article.confidence;",
                      "",
                      "if (currentConfidence > 0) {",
                      "    pm.test(\"Confidence updated after feedback\", function () {",
                      "        pm.expect(currentConfidence).to.be.within(0, 1);",
                      "        pm.expect(currentConfidence).to.be.above(0);",
                      "    });",
                      "} else {",
                      "    // Set delay for retry",
                      "    setTimeout(function(){}, 1000);",
                      "}"
                    ],
                    "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
                  }
                }
              ]
            },
            {
              "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
              "name": "Second Confidence Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Final confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var currentConfidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(currentConfidence).to.exist;",
                      "    pm.expect(currentConfidence).to.be.a('number');",
                      "    pm.expect(currentConfidence).to.be.within(0, 1);",
                      "    ",
                      "    // Log confidence value for debugging",
                      "    console.log('Final confidence value:', currentConfidence);",
                      "});"
                    ],
                    "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b08cd65-0d21-42af-ab8b-8b380876d4e8",
          "length": 48,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61301404-d135-4a2a-91b5-455072375521",
          "scriptId": "6d3913be-9a93-44d4-904a-4238768a44c3",
          "execution": "976cfd90-0ccb-402f-92ea-8815b1bee577"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "28571415-cda9-472f-a9bc-fbc825732b18",
          "timestamp": 1745424631034,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
          "name": "Verify Confidence After Feedback",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "var json = pm.response.json();",
                  "var currentConfidence = json.data.article.confidence;",
                  "",
                  "if (currentConfidence > 0) {",
                  "    pm.test(\"Confidence updated after feedback\", function () {",
                  "        pm.expect(currentConfidence).to.be.within(0, 1);",
                  "        pm.expect(currentConfidence).to.be.above(0);",
                  "    });",
                  "} else {",
                  "    // Set delay for retry",
                  "    setTimeout(function(){}, 1000);",
                  "}"
                ],
                "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
              }
            }
          ]
        },
        "parent": {
          "id": "3e0b1eff-abe8-490e-901b-fa8f24006b11",
          "name": "6.2 Feedback Impact on Confidence",
          "item": [
            {
              "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
              "name": "Submit Initial Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
                  }
                }
              ]
            },
            {
              "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
              "name": "Submit Multiple Feedback Items",
              "item": [
                {
                  "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
                  "name": "Submit Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                      }
                    }
                  ]
                },
                {
                  "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
                  "name": "Submit Additional Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                      }
                    }
                  ]
                }
              ],
              "event": []
            },
            {
              "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
              "name": "Verify Confidence After Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "var currentConfidence = json.data.article.confidence;",
                      "",
                      "if (currentConfidence > 0) {",
                      "    pm.test(\"Confidence updated after feedback\", function () {",
                      "        pm.expect(currentConfidence).to.be.within(0, 1);",
                      "        pm.expect(currentConfidence).to.be.above(0);",
                      "    });",
                      "} else {",
                      "    // Set delay for retry",
                      "    setTimeout(function(){}, 1000);",
                      "}"
                    ],
                    "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
                  }
                }
              ]
            },
            {
              "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
              "name": "Second Confidence Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Final confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var currentConfidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(currentConfidence).to.exist;",
                      "    pm.expect(currentConfidence).to.be.a('number');",
                      "    pm.expect(currentConfidence).to.be.within(0, 1);",
                      "    ",
                      "    // Log confidence value for debugging",
                      "    console.log('Final confidence value:', currentConfidence);",
                      "});"
                    ],
                    "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b08cd65-0d21-42af-ab8b-8b380876d4e8",
          "length": 48,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61301404-d135-4a2a-91b5-455072375521",
          "scriptId": "6d3913be-9a93-44d4-904a-4238768a44c3"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "dd0840b7ca5d3f247c198c291b996b43",
          "id": "e0c11372-0a24-4eb5-b647-c9abd7830779",
          "timestamp": 1745424631097,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
          "name": "Second Confidence Check",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "articles",
                "%7B%7BconfidenceArticleId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "05c54669-662e-43ad-b9bf-b7f91b264293",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Final confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var currentConfidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(currentConfidence).to.exist;",
                  "    pm.expect(currentConfidence).to.be.a('number');",
                  "    pm.expect(currentConfidence).to.be.within(0, 1);",
                  "    ",
                  "    // Log confidence value for debugging",
                  "    console.log('Final confidence value:', currentConfidence);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "fb5e48c8-a5f2-41fc-b766-9cd44b373167",
          "length": 48,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c5f4f2d5-90a9-4eab-aed8-5c614fb70285"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)",
          "checksum": "74438b243b8f62e5c640f1b6ba06c64b",
          "id": "024847d0-4940-4005-9528-604cf3059d64",
          "timestamp": 1745424631112,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 48,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
          "name": "Second Confidence Check",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Final confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var currentConfidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(currentConfidence).to.exist;",
                  "    pm.expect(currentConfidence).to.be.a('number');",
                  "    pm.expect(currentConfidence).to.be.within(0, 1);",
                  "    ",
                  "    // Log confidence value for debugging",
                  "    console.log('Final confidence value:', currentConfidence);",
                  "});"
                ],
                "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
              }
            }
          ]
        },
        "parent": {
          "id": "3e0b1eff-abe8-490e-901b-fa8f24006b11",
          "name": "6.2 Feedback Impact on Confidence",
          "item": [
            {
              "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
              "name": "Submit Initial Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
                  }
                }
              ]
            },
            {
              "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
              "name": "Submit Multiple Feedback Items",
              "item": [
                {
                  "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
                  "name": "Submit Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                      }
                    }
                  ]
                },
                {
                  "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
                  "name": "Submit Additional Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                      }
                    }
                  ]
                }
              ],
              "event": []
            },
            {
              "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
              "name": "Verify Confidence After Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "var currentConfidence = json.data.article.confidence;",
                      "",
                      "if (currentConfidence > 0) {",
                      "    pm.test(\"Confidence updated after feedback\", function () {",
                      "        pm.expect(currentConfidence).to.be.within(0, 1);",
                      "        pm.expect(currentConfidence).to.be.above(0);",
                      "    });",
                      "} else {",
                      "    // Set delay for retry",
                      "    setTimeout(function(){}, 1000);",
                      "}"
                    ],
                    "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
                  }
                }
              ]
            },
            {
              "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
              "name": "Second Confidence Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Final confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var currentConfidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(currentConfidence).to.exist;",
                      "    pm.expect(currentConfidence).to.be.a('number');",
                      "    pm.expect(currentConfidence).to.be.within(0, 1);",
                      "    ",
                      "    // Log confidence value for debugging",
                      "    console.log('Final confidence value:', currentConfidence);",
                      "});"
                    ],
                    "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb5e48c8-a5f2-41fc-b766-9cd44b373167",
          "length": 48,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c5f4f2d5-90a9-4eab-aed8-5c614fb70285",
          "scriptId": "16cc808d-11d4-4efd-b096-6774425f9af6",
          "execution": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Final confidence validation",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:48)",
          "checksum": "8fb8adfce1d621bd67a36e7769350f63",
          "id": "7ae72fc4-d9dd-407a-aa3c-0373c4fa04e6",
          "timestamp": 1745424631114,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 48,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
          "name": "Second Confidence Check",
          "request": {
            "url": {
              "path": [
                "api",
                "articles",
                "{{confidenceArticleId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Final confidence validation\", function () {",
                  "    var json = pm.response.json();",
                  "    var currentConfidence = json.data.article.confidence;",
                  "    ",
                  "    pm.expect(currentConfidence).to.exist;",
                  "    pm.expect(currentConfidence).to.be.a('number');",
                  "    pm.expect(currentConfidence).to.be.within(0, 1);",
                  "    ",
                  "    // Log confidence value for debugging",
                  "    console.log('Final confidence value:', currentConfidence);",
                  "});"
                ],
                "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
              }
            }
          ]
        },
        "parent": {
          "id": "3e0b1eff-abe8-490e-901b-fa8f24006b11",
          "name": "6.2 Feedback Impact on Confidence",
          "item": [
            {
              "id": "90255c84-c6a2-4ceb-89dd-f6466662479e",
              "name": "Submit Initial Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "feedback"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4cd8a4a-1cd6-49a7-a0c9-f5a5b8e665db",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "efda8ba3-40f6-4765-9d88-5f00d64cb5a9"
                  }
                }
              ]
            },
            {
              "id": "b2c1d8a4-dc41-444d-aacd-6fccd9bc82d7",
              "name": "Submit Multiple Feedback Items",
              "item": [
                {
                  "id": "6eda2075-f897-4c7f-95d9-ad99a395b6c8",
                  "name": "Submit Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-1\",\n  \"feedback_text\": \"Test feedback for confidence validation\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "dd70e7b9-b926-4817-a44a-ab260ac63407",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "33a07490-a0ab-401b-a8fd-8529b0c4422f"
                      }
                    }
                  ]
                },
                {
                  "id": "7cd7a67b-fd93-4cc8-b2c3-ef69b08584c0",
                  "name": "Submit Additional Agree Feedback",
                  "request": {
                    "url": {
                      "path": [
                        "api",
                        "feedback"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"article_id\": {{confidenceArticleId}},\n  \"user_id\": \"test-user-2\",\n  \"feedback_text\": \"Another test feedback\",\n  \"category\": \"agree\",\n  \"source\": \"test\"\n}"
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbd5624d-937b-42b5-a3b1-b33e498dbb2d",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "_lastExecutionId": "cd957faf-3967-4bcc-9d34-7e8f9ad497e4"
                      }
                    }
                  ]
                }
              ],
              "event": []
            },
            {
              "id": "00d261b9-1584-433b-a3b0-9f9b25cedb37",
              "name": "Verify Confidence After Feedback",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3913be-9a93-44d4-904a-4238768a44c3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "var json = pm.response.json();",
                      "var currentConfidence = json.data.article.confidence;",
                      "",
                      "if (currentConfidence > 0) {",
                      "    pm.test(\"Confidence updated after feedback\", function () {",
                      "        pm.expect(currentConfidence).to.be.within(0, 1);",
                      "        pm.expect(currentConfidence).to.be.above(0);",
                      "    });",
                      "} else {",
                      "    // Set delay for retry",
                      "    setTimeout(function(){}, 1000);",
                      "}"
                    ],
                    "_lastExecutionId": "976cfd90-0ccb-402f-92ea-8815b1bee577"
                  }
                }
              ]
            },
            {
              "id": "22f29617-5c0a-4ca6-b076-c52376fe481e",
              "name": "Second Confidence Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "articles",
                    "{{confidenceArticleId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16cc808d-11d4-4efd-b096-6774425f9af6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Final confidence validation\", function () {",
                      "    var json = pm.response.json();",
                      "    var currentConfidence = json.data.article.confidence;",
                      "    ",
                      "    pm.expect(currentConfidence).to.exist;",
                      "    pm.expect(currentConfidence).to.be.a('number');",
                      "    pm.expect(currentConfidence).to.be.within(0, 1);",
                      "    ",
                      "    // Log confidence value for debugging",
                      "    console.log('Final confidence value:', currentConfidence);",
                      "});"
                    ],
                    "_lastExecutionId": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb5e48c8-a5f2-41fc-b766-9cd44b373167",
          "length": 48,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c5f4f2d5-90a9-4eab-aed8-5c614fb70285",
          "scriptId": "16cc808d-11d4-4efd-b096-6774425f9af6",
          "execution": "8795387e-56fc-412c-8c1e-c6fbf6210ba9"
        }
      }
    ],
    "error": null
  }
}